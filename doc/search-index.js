var searchIndex = JSON.parse('{\
"benchmark":{"doc":"Oak Functions benchmark example.","t":"FADDDMALLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLENNLLLLLLLLLLLLLLL","n":["main","proto","BenchmarkRequest","EchoAndPanicTest","LookupTest","action","benchmark_request","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clear","clear","clear","clone","clone","clone","clone_into","clone_into","clone_into","data","default","default","default","encoded_len","encoded_len","encoded_len","eq","eq","eq","fmt","fmt","fmt","from","from","from","into","into","into","iterations","key","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","Action","EchoAndPanic","Lookup","borrow","borrow_mut","clone","clone_into","encode","encoded_len","eq","fmt","from","into","merge","to_owned","try_from","try_into","type_id"],"q":[[0,"benchmark"],[2,"benchmark::proto"],[55,"benchmark::proto::benchmark_request"],[73,"core::fmt"],[74,"core::fmt"],[75,"core::any"],[76,"bytes::buf::buf_mut"],[77,"core::option"],[78,"prost::encoding"],[79,"prost::encoding"],[80,"bytes::buf::buf_impl"]],"d":["","","A request to execute a benchmark action a specified number …","Echo the bytes back, and then causes the benchmark to …","Container for the key to use when doing a benchmark lookup.","TODO(#4294): Use micro RPC instead of this oneof.","Nested message and enum types in <code>BenchmarkRequest</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","TODO(#4294): Use micro RPC instead of this oneof.","","","","","","","Encodes the message to a buffer.","Returns the encoded length of the message without a length …","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Decodes an instance of the message from a buffer, and …","","","",""],"i":[0,0,0,0,0,2,0,2,3,4,2,3,4,2,3,4,2,3,4,2,3,4,4,2,3,4,2,3,4,2,3,4,2,3,4,2,3,4,2,3,4,2,3,2,3,4,2,3,4,2,3,4,2,3,4,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"f":[[[],1],0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[2,1],[3,1],[4,1],[2,2],[3,3],[4,4],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],0,[[],2],[[],3],[[],4],[2,5],[3,5],[4,5],[[2,2],6],[[3,3],6],[[4,4],6],[[2,7],8],[[3,7],8],[[4,7],8],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[11,11],[[-1,-2],1,[],[]],[[11,-1],1,12],[11,5],[[11,11],6],[[11,7],8],[-1,-1,[]],[-1,-2,[],[]],[[[13,[11]],14,15,-1,16],[[9,[1,17]]],18],[-1,-2,[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,10,[]]],"c":[],"p":[[15,"tuple"],[3,"BenchmarkRequest",2],[3,"LookupTest",2],[3,"EchoAndPanicTest",2],[15,"usize"],[15,"bool"],[3,"Formatter",73],[6,"Result",73],[4,"Result",74],[3,"TypeId",75],[4,"Action",55],[8,"BufMut",76],[4,"Option",77],[15,"u32"],[4,"WireType",78],[3,"DecodeContext",78],[3,"DecodeError",79],[8,"Buf",80]],"b":[]},\
"echo":{"doc":"Oak Functions echo example.","t":"F","n":["main"],"q":[[0,"echo"]],"d":[""],"i":[0],"f":[[[],1]],"c":[],"p":[[15,"tuple"]],"b":[]},\
"invalid_module":{"doc":"","t":"","n":[],"q":[],"d":[],"i":[],"f":[],"c":[],"p":[],"b":[]},\
"key_value_lookup":{"doc":"Oak Functions key / value lookup example.","t":"F","n":["main"],"q":[[0,"key_value_lookup"]],"d":[""],"i":[0],"f":[[[],1]],"c":[],"p":[[15,"tuple"]],"b":[]},\
"location_utils":{"doc":"Utilities for finding and comparing longitude- and …","t":"DDIRNRDNGRLLLLLLLLLLLLLFFLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLFFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLMFFFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLK","n":["Angle","CellID","Context","DEFAULT_CUTOFF_RADIUS_RADIANS","Err","LOCATION_SIZE","LatLng","Ok","Result","S2_DEFAULT_LEVEL","abs","add","advance","advance_wrap","all_neighbors","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","bound_st","bound_uv","cell_id_from_bytes","cell_id_to_bytes","center_face_siti","center_uv","child_begin","child_begin_at_level","child_end","child_end_at_level","child_iter","child_iter_at_level","child_position","children","clone","clone","clone","clone_into","clone_into","clone_into","cmp","common_ancestor_level","contains","context","default","default","deg","distance","distance_from_begin","edge_neighbors","eq","eq","eq","face","face_ij_orientation","find_cell","find_covering_cells","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_degrees","from_face","from_face_ij","from_face_pos_level","from_token","hash","immediate_parent","inf","intersects","into","into","into","is_face","is_infinite","is_leaf","is_valid","is_valid","lat","level","lng","location_from_bytes","location_from_degrees","location_to_bytes","lsb","max","max_tile","min","mul","new","next","next_wrap","normalized","normalized","parent","partial_cmp","partial_cmp","pos","prev","prev_wrap","rad","range_max","range_min","raw_point","sub","to_owned","to_owned","to_owned","to_string","to_token","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vertex_neighbors","with_context"],"q":[[0,"location_utils"],[147,"alloc::vec"],[148,"s2::r2::rect"],[149,"s2::r2::point"],[150,"s2::s2::cellid"],[151,"core::cmp"],[152,"core::option"],[153,"anyhow"],[154,"core::result"],[155,"core::fmt"],[156,"core::marker"],[157,"core::marker"],[158,"s2::s1::chordangle"],[159,"s2::s1::angle"],[160,"s2::s2::point"],[161,"core::hash"],[162,"s2::r3::vector"],[163,"alloc::string"],[164,"core::any"],[165,"core::ops::function"]],"d":["Angle represents a 1D angle. The internal representation …","CellID uniquely identifies a cell in the S2 cell …","Provides the <code>context</code> method for <code>Result</code>.","The default cutoff radius in radians.","Contains the error value","","","Contains the success value","<code>Result&lt;T, Error&gt;</code>","The default level to use for S2 Geometry cells. Higher …","abs returns the absolute value of the angle.","","advance advances or retreats the indicated number of steps …","advance_wrap advances or retreats the indicated number of …","all_neighbors returns all neighbors of this cell at the …","","","","","","","bound_st returns the bound of this CellID in (s,t)-space.","bound_uv returns the bound of this CellID in (u,v)-space.","Converts a byte representation to the <code>CellID</code>.","Converts a <code>CellID</code> to a byte representation.","center_face_siti returns the (face, si, ti) coordinates of …","center_uv returns the center of this CellID in …","child_begin returns the first child in a traversal of the …","child_begin_at_level returns the first cell in a traversal …","child_end returns the first cell after a traversal of the …","child_end_at_level returns the first cell after the last …","","","child_position returns the child position (0..3) of this …","children returns the four immediate children of this cell. …","","","","","","","","common_ancestor_level returns the level of the common …","contains returns true iff the CellID contains oci.","Wrap the error value with additional context.","","","deg returns the angle in degrees.","","distance_from_begin returns the number of steps that this …","edge_neighbors returns the four cells that are adjacent …","","","","face returns the cube face for this cell ID, in the range […","face_ij_orientation uses the global lookupIJ table to …","Finds the cell at the given <code>level</code> that covers the <code>location</code>.","Finds the set of S2 cells at the required <code>level</code> that …","","","","","","converts this ChordAngle to an Angle.","Returns the argument unchanged.","","","","converts this ChordAngle to an Angle.","","","","","","","","","","Returns the argument unchanged.","","","","returns the center of the s2 cell on the sphere as a …","","","","Returns the argument unchanged.","","from_face returns the cell corresponding to a given S2 …","","from_pos_level returns a cell given its face in the range […","from_token returns a cell given a hex-encoded string of …","","immediate_parent is cheaper than Parent, but assumes …","inf returns an angle larger than any finite angle.","intersects returns true iff the CellID intersects oci.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","is_face returns whether this is a top-level (face) cell.","is_infinite reports whether this Angle is infinite.","is_leaf returns whether this cell ID is at the deepest …","is_valid reports whether ci represents a valid cell.","","","level returns the subdivision level of this cell ID, in …","","Converts a byte representation of a location into a <code>LatLng</code>.","Converts latitude and longitude values in degrees to a …","Converts a <code>LatLng</code> location to a byte representation.","lsb returns the least significant bit that is set.","","max_tile returns the largest cell with the same range_min …","","","","next returns the next cell along the Hilbert curve. This …","next_wrap returns the next cell along the Hilbert curve, …","normalized returns an equivalent angle in [0, 2π).","","parent returns the cell at the given level, which must be …","","","pos returns the position along the Hilbert curve of this …","prev returns the previous cell along the Hilbert curve.","prev_wrap returns the previous cell along the Hilbert …","rad returns the angle in radians.","range_max returns the maximum CellID that is contained …","range_min returns the minimum CellID that is contained …","","","","","","","to_token returns a hex-encoded string of the uint64 cell …","","","","","","","","","","vertex_neighbors returns the neighboring cellIDs with …","Wrap the error value with additional context that is …"],"i":[0,0,0,0,10,0,0,10,0,0,1,1,3,3,3,1,3,16,1,3,16,3,3,0,0,3,3,3,3,3,3,3,3,3,3,1,3,16,1,3,16,3,3,3,41,1,16,1,16,3,3,1,3,16,3,3,0,0,1,3,3,16,1,1,1,1,1,1,1,1,1,1,1,1,1,3,3,3,3,3,3,3,16,16,16,16,16,16,3,3,3,3,3,3,1,3,1,3,16,3,1,3,3,16,16,3,16,0,0,0,3,1,3,1,1,16,3,3,1,16,3,1,3,3,3,3,1,3,3,3,1,1,3,16,3,3,1,3,16,1,3,16,1,3,16,3,41],"f":[0,0,0,0,0,0,0,0,0,0,[1,1],[[1,2],1],[[3,4],3],[[3,4],3],[[3,5],[[6,[3]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[3,7],[3,7],[[[9,[8]]],[[10,[3]]]],[3,[[6,[8]]]],[3,[[12,[8,11,11]]]],[3,13],[3,3],[[3,5],3],[3,3],[[3,5],3],[3,14],[[3,5],14],[[3,5],5],[3,[[15,[3]]]],[1,1],[3,3],[16,16],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[[3,3],17],[[3,3],[[18,[5]]]],[[3,3],19],[[-1,-2],[[21,[-3,20]]],[],[22,23,24],[]],[[],1],[[],16],[1,2],[[16,16],1],[3,4],[3,[[15,[3]]]],[[1,1],19],[[3,3],19],[[16,16],19],[3,8],[3,[[12,[8,11,11,8]]]],[[16,8],[[10,[3]]]],[[16,1,8],[[10,[[6,[3]]]]]],[[1,25],[[21,[12,26]]]],[[3,25],[[21,[12,26]]]],[[3,25],[[21,[12,26]]]],[[16,25],[[21,[12,26]]]],[27,1],[28,1],[-1,-1,[]],[29,1],[30,1],[27,1],[28,1],[31,1],[32,1],[32,1],[29,1],[31,1],[30,1],[33,3],[33,3],[16,3],[-1,-1,[]],[16,3],[34,3],[34,3],[3,16],[3,16],[34,16],[34,16],[-1,-1,[]],[[2,2],16],[5,3],[[8,11,11],3],[[5,5,5],3],[35,3],[[3,-1],12,36],[3,3],[[],1],[[3,3],19],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[3,19],[1,19],[3,19],[3,19],[16,19],0,[3,5],0,[[[9,[8]]],[[10,[16]]]],[[2,2],16],[16,[[15,[8]]]],[3,5],[[1,1],1],[[3,3],3],[[1,1],1],[[1,2],1],[[1,1],16],[3,3],[3,3],[1,1],[16,16],[[3,5],3],[[1,1],[[18,[17]]]],[[3,3],[[18,[17]]]],[3,5],[3,3],[3,3],[1,2],[3,3],[3,3],[3,37],[[1,2],1],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,38,[]],[3,38],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[[3,5],[[6,[3]]]],[[-1,-2],[[21,[-3,20]]],[],40,[]]],"c":[],"p":[[3,"Angle",0],[15,"f64"],[3,"CellID",0],[15,"i64"],[15,"u64"],[3,"Vec",147],[3,"Rect",148],[15,"u8"],[15,"slice"],[6,"Result",0],[15,"i32"],[15,"tuple"],[3,"Point",149],[3,"Iter",150],[15,"array"],[3,"LatLng",0],[4,"Ordering",151],[4,"Option",152],[15,"bool"],[3,"Error",153],[4,"Result",154],[8,"Display",155],[8,"Send",156],[8,"Sync",156],[3,"Formatter",155],[3,"Error",155],[3,"E6",157],[3,"ChordAngle",158],[3,"Rad",157],[3,"E5",157],[3,"E7",157],[3,"Deg",157],[3,"Cell",159],[3,"Point",160],[15,"str"],[8,"Hasher",161],[3,"Vector",162],[3,"String",163],[3,"TypeId",164],[8,"FnOnce",165],[8,"Context",0]],"b":[[59,"impl-Debug-for-CellID"],[60,"impl-Display-for-CellID"],[62,"impl-From%3C%26E6%3E-for-Angle"],[63,"impl-From%3CChordAngle%3E-for-Angle"],[65,"impl-From%3C%26Rad%3E-for-Angle"],[66,"impl-From%3CE5%3E-for-Angle"],[67,"impl-From%3CE6%3E-for-Angle"],[68,"impl-From%3C%26ChordAngle%3E-for-Angle"],[69,"impl-From%3CE7%3E-for-Angle"],[70,"impl-From%3C%26Deg%3E-for-Angle"],[71,"impl-From%3CDeg%3E-for-Angle"],[72,"impl-From%3CRad%3E-for-Angle"],[73,"impl-From%3C%26E7%3E-for-Angle"],[74,"impl-From%3C%26E5%3E-for-Angle"],[75,"impl-From%3C%26Cell%3E-for-CellID"],[76,"impl-From%3CCell%3E-for-CellID"],[77,"impl-From%3C%26LatLng%3E-for-CellID"],[79,"impl-From%3CLatLng%3E-for-CellID"],[80,"impl-From%3C%26Point%3E-for-CellID"],[81,"impl-From%3CPoint%3E-for-CellID"],[82,"impl-From%3CCellID%3E-for-LatLng"],[83,"impl-From%3C%26CellID%3E-for-LatLng"],[84,"impl-From%3CPoint%3E-for-LatLng"],[85,"impl-From%3C%26Point%3E-for-LatLng"]]},\
"lookup_data_checker":{"doc":"","t":"DLLLLLLLLMLLLLLLFFLLLLLL","n":["Opt","augment_args","augment_args_for_update","borrow","borrow_mut","clone","clone_into","command","command_for_update","file_path","fmt","from","from_arg_matches","from_arg_matches_mut","group_id","into","main","parse_lookup_entries","to_owned","try_from","try_into","type_id","update_from_arg_matches","update_from_arg_matches_mut"],"q":[[0,"lookup_data_checker"],[24,"clap_builder::builder::command"],[25,"core::fmt"],[26,"core::fmt"],[27,"clap_builder"],[28,"core::result"],[29,"clap_builder::util::id"],[30,"core::option"],[31,"anyhow"],[32,"alloc::vec"],[33,"std::collections::hash::map"],[34,"bytes::buf::buf_impl"],[35,"core::any"]],"d":["","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","",""],"i":[0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,2,2,2,2,2,2],"f":[0,[1,1],[1,1],[-1,-2,[],[]],[-1,-2,[],[]],[2,2],[[-1,-2],3,[],[]],[[],1],[[],1],0,[[2,4],5],[-1,-1,[]],[6,[[8,[2,7]]]],[6,[[8,[2,7]]]],[[],[[10,[9]]]],[-1,-2,[],[]],[[],[[11,[3]]]],[-1,[[11,[[14,[[13,[12]],[13,[12]]]]]]],15],[-1,-2,[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,16,[]],[[2,6],[[8,[3,7]]]],[[2,6],[[8,[3,7]]]]],"c":[],"p":[[3,"Command",24],[3,"Opt",0],[15,"tuple"],[3,"Formatter",25],[6,"Result",25],[3,"ArgMatches",26],[6,"Error",27],[4,"Result",28],[3,"Id",29],[4,"Option",30],[6,"Result",31],[15,"u8"],[3,"Vec",32],[3,"HashMap",33],[8,"Buf",34],[3,"TypeId",35]],"b":[]},\
"lookup_data_generator":{"doc":"","t":"AFFF","n":["data","generate_and_serialize_random_entries","generate_and_serialize_sparse_weather_entries","generate_and_serialize_weather_entries"],"q":[[0,"lookup_data_generator"],[1,"lookup_data_generator::data"],[4,"bytes::bytes_mut"],[5,"anyhow"],[6,"rand::rng"]],"d":["","Generates random lookup entries with the specified sizes …","Generates a sparse set of random weather lookup entries …","Generates a dense set of random weather lookup entries …"],"i":[0,0,0,0],"f":[0,[[-1,1,1,1],[[3,[2]]],4],[[-1,1],[[3,[2]]],4],[-1,[[3,[2]]],4]],"c":[],"p":[[15,"usize"],[3,"BytesMut",4],[6,"Result",5],[8,"Rng",6]],"b":[]},\
"micro_rpc":{"doc":"","t":"NNINNNCNQQNNNNCNNNNDNDEDEINNNNDLLLLLLLLLLLLLLLLLFMLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLOLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKKLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNELLLLLLLLLLLLLLL","n":["Aborted","AlreadyExists","AsyncTransport","Cancelled","DataLoss","DeadlineExceeded","Err","Err","Error","Error","FailedPrecondition","Internal","InvalidArgument","NotFound","Ok","Ok","Ok","OutOfRange","PermissionDenied","RequestWrapper","ResourceExhausted","ResponseWrapper","Result","Status","StatusCode","Transport","Unauthenticated","Unavailable","Unimplemented","Unknown","Vec","advance_mut","allocator","and","and_then","append","as_deref","as_deref_mut","as_mut","as_mut","as_mut","as_mut_ptr","as_mut_slice","as_ptr","as_ref","as_ref","as_ref","as_slice","async_client_invoke","body","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","branch","capacity","chunk_mut","clear","clear","clear","clear","client_invoke","clone","clone","clone","clone","clone_from","clone_from","clone_into","clone_into","clone_into","clone_into","cloned","cloned","cmp","cmp","code","copied","copied","dedup","dedup_by","dedup_by_key","default","default","default","deref","deref_mut","drain","drop","encoded_len","encoded_len","encoded_len","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","err","expect","expect_err","extend","extend","extend_from_slice","extend_from_within","extend_one","extend_one","extend_reserve","extend_reserve","extract_if","flatten","flush","fmt","fmt","fmt","fmt","fmt","fmt","fmt","format","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_iter","from_iter","from_output","from_raw_parts","from_raw_parts_in","from_residual","from_residual","hash","hash","index","index_mut","insert","inspect","inspect_err","into","into","into","into","into","into","into_boxed_slice","into_err","into_flattened","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_ok","into_raw_parts","into_raw_parts_with_alloc","invoke","invoke","is_empty","is_err","is_err_and","is_ok","is_ok_and","is_write_vectored","iter","iter_mut","leak","len","map","map_err","map_or","map_or_else","message","method_id","ne","ne","ne","ne","ne","ne","new","new","new_in","new_with_message","ok","or","or_else","partial_cmp","partial_cmp","partial_cmp","partial_cmp","pop","product","push","push_within_capacity","put","put_bytes","put_slice","remaining_mut","remove","report","reserve","reserve_exact","resize","resize_with","response","response_wrapper","retain","retain_mut","set_len","shrink_to","shrink_to_fit","spare_capacity_mut","splice","split_at_spare_mut","split_off","sum","swap_remove","to_owned","to_owned","to_owned","to_owned","to_string","transpose","truncate","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_reserve","try_reserve_exact","type_id","type_id","type_id","type_id","type_id","type_id","unwrap","unwrap_err","unwrap_err_unchecked","unwrap_or","unwrap_or_default","unwrap_or_else","unwrap_unchecked","with_capacity","with_capacity_in","write","write_all","write_vectored","Body","Error","Response","borrow","borrow_mut","clone","clone_into","encode","encoded_len","eq","fmt","from","into","merge","to_owned","try_from","try_into","type_id"],"q":[[0,"micro_rpc"],[295,"micro_rpc::response_wrapper"],[313,"core::alloc"],[314,"core::ops::function"],[315,"core::ops::deref"],[316,"core::ops::deref"],[317,"core::default"],[318,"core::ops::control_flow"],[319,"bytes::buf::uninit_slice"],[320,"core::clone"],[321,"core::cmp"],[322,"core::cmp"],[323,"core::cmp"],[324,"core::ops::range"],[325,"bytes::bytes_mut"],[326,"bytes::bytes"],[327,"core::option"],[328,"core::fmt"],[329,"core::iter::traits::collect"],[330,"alloc::vec::extract_if"],[331,"std::io::error"],[332,"core::fmt"],[333,"alloc::string"],[334,"alloc::boxed"],[335,"alloc::borrow"],[336,"alloc::collections::binary_heap"],[337,"alloc::collections::vec_deque"],[338,"miniz_oxide"],[339,"miniz_oxide"],[340,"core::convert"],[341,"core::hash"],[342,"core::hash"],[343,"core::convert"],[344,"core::result"],[345,"core::pin"],[346,"core::cmp"],[347,"core::iter::traits::accum"],[348,"bytes::buf::buf_impl"],[349,"std::process"],[350,"std::process"],[351,"alloc::vec::splice"],[352,"core::iter::traits::accum"],[353,"core::any"],[354,"std::io"],[355,"bytes::buf::buf_mut"],[356,"prost::encoding"],[357,"prost::encoding"]],"d":["The operation was aborted.","Some entity that we attempted to create already exists.","Same as <code>Transport</code>, but for async use cases.","The operation was cancelled.","Unrecoverable data loss or corruption.","Deadline expired before operation could complete.","","Contains the error value","Type representing any transport-specific errors. By …","See <code>Transport::Error</code>.","The system is not in a state required for the operation’…","Internal error.","Client specified an invalid argument.","Some requested entity was not found.","","The operation completed successfully.","Contains the success value","Operation was attempted past the valid range.","The caller does not have permission to execute the …","A wrapper message representing a request over a transport.","Some resource has been exhausted.","A wrapper message representing a response over a transport.","<code>Result</code> is a type that represents either success (<code>Ok</code>) or …","","gRPC status codes used by <code>Status</code>.","A message-oriented transport that allows performing …","The request does not have valid authentication credentials","The service is currently unavailable.","Operation is not implemented or not supported.","Unknown error.","A contiguous growable array type, written as <code>Vec&lt;T&gt;</code>, short …","","Returns a reference to the underlying allocator.","Returns <code>res</code> if the result is <code>Ok</code>, otherwise returns the <code>Err</code> …","Calls <code>op</code> if the result is <code>Ok</code>, otherwise returns the <code>Err</code> …","Moves all the elements of <code>other</code> into <code>self</code>, leaving <code>other</code> …","Converts from <code>Result&lt;T, E&gt;</code> (or <code>&amp;Result&lt;T, E&gt;</code>) to …","Converts from <code>Result&lt;T, E&gt;</code> (or <code>&amp;mut Result&lt;T, E&gt;</code>) to …","","","Converts from <code>&amp;mut Result&lt;T, E&gt;</code> to <code>Result&lt;&amp;mut T, &amp;mut E&gt;</code>.","Returns an unsafe mutable pointer to the vector’s …","Extracts a mutable slice of the entire vector.","Returns a raw pointer to the vector’s buffer, or a …","","","Converts from <code>&amp;Result&lt;T, E&gt;</code> to <code>Result&lt;&amp;T, &amp;E&gt;</code>.","Extracts a slice containing the entire vector.","Same as <code>client_invoke</code>, but via an <code>AsyncTransport</code>.","The bytes of the serialized request.","","","","","","","","","","","","","","","","Returns the total number of elements the vector can hold …","","","","","Clears the vector, removing all values.","Invokes the method identified by <code>method_id</code> via the …","","","","","","","","","","","Maps a <code>Result&lt;&amp;T, E&gt;</code> to a <code>Result&lt;T, E&gt;</code> by cloning the …","Maps a <code>Result&lt;&amp;mut T, E&gt;</code> to a <code>Result&lt;T, E&gt;</code> by cloning the …","","","","Maps a <code>Result&lt;&amp;T, E&gt;</code> to a <code>Result&lt;T, E&gt;</code> by copying the …","Maps a <code>Result&lt;&amp;mut T, E&gt;</code> to a <code>Result&lt;T, E&gt;</code> by copying the …","Removes consecutive repeated elements in the vector …","Removes all but the first of consecutive elements in the …","Removes all but the first of consecutive elements in the …","","","Creates an empty <code>Vec&lt;T&gt;</code>.","","","Removes the specified range from the vector in bulk, …","","","","","","","","","","","","","","","","","","Converts from <code>Result&lt;T, E&gt;</code> to <code>Option&lt;E&gt;</code>.","Returns the contained <code>Ok</code> value, consuming the <code>self</code> value.","Returns the contained <code>Err</code> value, consuming the <code>self</code> value.","","","Clones and appends all elements in a slice to the <code>Vec</code>.","Copies elements from <code>src</code> range to the end of the vector.","","","","","Creates an iterator which uses a closure to determine if …","Converts from <code>Result&lt;Result&lt;T, E&gt;, E&gt;</code> to <code>Result&lt;T, E&gt;</code>","","","","","","","","","Creates a <code>String</code> using interpolation of runtime …","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Converts a <code>CString</code> into a Vec&lt;u8&gt;.","Converts the given <code>String</code> to a vector <code>Vec</code> that holds …","Convert a boxed slice into a vector by transferring …","","","Allocate a <code>Vec&lt;T&gt;</code> and fill it by cloning <code>s</code>’s items.","Convert a clone-on-write slice into a vector.","Converts a <code>BinaryHeap&lt;T&gt;</code> into a <code>Vec&lt;T&gt;</code>.","Allocate a <code>Vec&lt;T&gt;</code> and fill it by cloning <code>s</code>’s items.","Allocate a <code>Vec&lt;T&gt;</code> and fill it by cloning <code>s</code>’s items.","Returns the argument unchanged.","Turn a <code>VecDeque&lt;T&gt;</code> into a <code>Vec&lt;T&gt;</code>.","Allocate a <code>Vec&lt;u8&gt;</code> and fill it with a UTF-8 string.","Allocate a <code>Vec&lt;T&gt;</code> and fill it by cloning <code>s</code>’s items.","Allocate a <code>Vec&lt;T&gt;</code> and move <code>s</code>’s items into it.","","","","Returns the argument unchanged.","","Takes each element in the <code>Iterator</code>: if it is an <code>Err</code>, no …","","Creates a <code>Vec&lt;T&gt;</code> directly from a pointer, a capacity, and …","Creates a <code>Vec&lt;T, A&gt;</code> directly from a pointer, a capacity, a …","","","","","","","Inserts an element at position <code>index</code> within the vector, …","Calls the provided closure with a reference to the …","Calls the provided closure with a reference to the …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Converts the vector into <code>Box&lt;[T]&gt;</code>.","Returns the contained <code>Err</code> value, but never panics.","Takes a <code>Vec&lt;[T; N]&gt;</code> and flattens it into a <code>Vec&lt;T&gt;</code>.","","","Creates a consuming iterator, that is, one that moves each …","","Returns a consuming iterator over the possibly contained …","","Returns the contained <code>Ok</code> value, but never panics.","Decomposes a <code>Vec&lt;T&gt;</code> into its raw components.","Decomposes a <code>Vec&lt;T&gt;</code> into its raw components.","","See <code>Transport::invoke</code>.","Returns <code>true</code> if the vector contains no elements.","Returns <code>true</code> if the result is <code>Err</code>.","Returns <code>true</code> if the result is <code>Err</code> and the value inside of …","Returns <code>true</code> if the result is <code>Ok</code>.","Returns <code>true</code> if the result is <code>Ok</code> and the value inside of …","","Returns an iterator over the possibly contained value.","Returns a mutable iterator over the possibly contained …","Consumes and leaks the <code>Vec</code>, returning a mutable reference …","Returns the number of elements in the vector, also …","Maps a <code>Result&lt;T, E&gt;</code> to <code>Result&lt;U, E&gt;</code> by applying a function …","Maps a <code>Result&lt;T, E&gt;</code> to <code>Result&lt;T, F&gt;</code> by applying a function …","Returns the provided default (if <code>Err</code>), or applies a …","Maps a <code>Result&lt;T, E&gt;</code> to <code>U</code> by applying fallback function …","English message that helps developers understand and …","The id of the method to invoke. This is usually specified …","","","","","","","","Constructs a new, empty <code>Vec&lt;T&gt;</code>.","Constructs a new, empty <code>Vec&lt;T, A&gt;</code>.","","Converts from <code>Result&lt;T, E&gt;</code> to <code>Option&lt;T&gt;</code>.","Returns <code>res</code> if the result is <code>Err</code>, otherwise returns the <code>Ok</code> …","Calls <code>op</code> if the result is <code>Err</code>, otherwise returns the <code>Ok</code> …","","","","","Removes the last element from a vector and returns it, or …","Takes each element in the <code>Iterator</code>: if it is an <code>Err</code>, no …","Appends an element to the back of a collection.","Appends an element if there is sufficient spare capacity, …","","","","","Removes and returns the element at position <code>index</code> within …","","Reserves capacity for at least <code>additional</code> more elements to …","Reserves the minimum capacity for at least <code>additional</code> more …","Resizes the <code>Vec</code> in-place so that <code>len</code> is equal to <code>new_len</code>.","Resizes the <code>Vec</code> in-place so that <code>len</code> is equal to <code>new_len</code>.","","Nested message and enum types in <code>ResponseWrapper</code>.","Retains only the elements specified by the predicate.","Retains only the elements specified by the predicate, …","Forces the length of the vector to <code>new_len</code>.","Shrinks the capacity of the vector with a lower bound.","Shrinks the capacity of the vector as much as possible.","Returns the remaining spare capacity of the vector as a …","Creates a splicing iterator that replaces the specified …","Returns vector content as a slice of <code>T</code>, along with the …","Splits the collection into two at the given index.","Takes each element in the <code>Iterator</code>: if it is an <code>Err</code>, no …","Removes an element from the vector and returns it.","","","","","","Transposes a <code>Result</code> of an <code>Option</code> into an <code>Option</code> of a <code>Result</code>…","Shortens the vector, keeping the first <code>len</code> elements and …","","","","","","","","","","","","","Tries to reserve capacity for at least <code>additional</code> more …","Tries to reserve the minimum capacity for at least …","","","","","","","Returns the contained <code>Ok</code> value, consuming the <code>self</code> value.","Returns the contained <code>Err</code> value, consuming the <code>self</code> value.","Returns the contained <code>Err</code> value, consuming the <code>self</code> value, …","Returns the contained <code>Ok</code> value or a provided default.","Returns the contained <code>Ok</code> value or a default","Returns the contained <code>Ok</code> value or computes it from a …","Returns the contained <code>Ok</code> value, consuming the <code>self</code> value, …","Constructs a new, empty <code>Vec&lt;T&gt;</code> with at least the specified …","Constructs a new, empty <code>Vec&lt;T, A&gt;</code> with at least the …","","","","The bytes of the serialized response, if successful.","A status / error message, in case of failure.","","","","","","Encodes the message to a buffer.","Returns the encoded length of the message without a length …","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Decodes an instance of the message from a buffer, and …","","","",""],"i":[30,30,0,30,30,30,0,6,20,13,30,30,30,30,0,30,6,30,30,0,30,0,0,0,0,0,30,30,30,30,0,2,2,6,6,2,6,6,2,2,6,2,2,2,2,2,6,2,0,18,18,19,12,30,2,2,6,18,19,12,30,2,2,6,6,2,2,18,19,2,2,0,18,19,2,6,2,6,18,19,2,6,6,6,2,6,12,6,6,2,2,2,18,19,2,2,2,2,2,18,19,2,18,19,12,30,2,2,2,2,2,2,2,2,6,6,6,6,2,2,2,2,2,2,2,2,2,6,2,18,19,12,12,30,2,6,0,18,19,19,12,30,30,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,6,6,6,6,2,6,6,2,2,6,6,2,6,2,2,2,6,6,18,19,12,30,2,6,2,6,2,2,2,2,6,6,6,6,2,2,20,13,2,6,6,6,6,2,6,6,2,2,6,6,6,6,12,18,2,2,2,2,2,2,12,2,2,12,6,6,6,2,2,2,6,2,6,2,2,2,2,2,2,2,6,2,2,2,2,19,0,2,2,2,2,2,2,2,2,2,6,2,18,19,2,6,12,6,2,18,19,12,30,2,6,18,19,12,30,2,6,2,2,18,19,12,30,2,6,6,6,6,6,6,6,6,2,2,2,2,2,78,78,0,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[2,[1]],3],4],[[[2,[-1,-2]]],-2,[],5],[[[6,[-1,-2]],[6,[-3,-2]]],[[6,[-3,-2]]],[],[],[]],[[[6,[-1,-2]],-3],[[6,[-4,-2]]],[],[],7,[]],[[[2,[-1,-2]],[2,[-1,-2]]],4,[],5],[[[6,[-1,-2]]],[[6,[-2]]],8,[]],[[[6,[-1,-2]]],[[6,[-2]]],9,[]],[[[2,[-1,-2]]],[[2,[-1,-2]]],[],5],[[[2,[-1,-2]]],[[10,[-1]]],[],5],[[[6,[-1,-2]]],[[6,[-1,-2]]],[],[]],[[[2,[-1,-2]]],[],[],5],[[[2,[-1,-2]]],[[10,[-1]]],[],5],[[[2,[-1,-2]]],[],[],5],[[[2,[-1,-2]]],[[10,[-1]]],[],5],[[[2,[-1,-2]]],[[2,[-1,-2]]],[],5],[[[6,[-1,-2]]],[[6,[-1,-2]]],[],[]],[[[2,[-1,-2]]],[[10,[-1]]],[],5],[[-1,11,-2],[[6,[[6,[-3,12]]]]],13,14,[14,15]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[2,[-1,-2]]],[[10,[-1]]],[],5],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[2,[-1,-2]]],[[10,[-1]]],[],5],[-1,-2,[],[]],[[[6,[-1,-2]]],16,[],[]],[[[2,[-1,-2]]],3,[],5],[[[2,[1]]],17],[18,4],[19,4],[[[2,[1]]],4],[[[2,[-1,-2]]],4,[],5],[[-1,11,-2],[[6,[[6,[-3,12]]]]],20,14,[14,15]],[18,18],[19,19],[[[2,[-1,-2]]],[[2,[-1,-2]]],21,[5,21]],[[[6,[-1,-2]]],[[6,[-1,-2]]],21,21],[[[2,[-1,-2]],[2,[-1,-2]]],4,21,[5,21]],[[[6,[-1,-2]],[6,[-1,-2]]],4,21,21],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[[6,[-1,-2]]],[[6,[-1,-2]]],21,[]],[[[6,[-1,-2]]],[[6,[-1,-2]]],21,[]],[[[2,[-1,-2]],[2,[-1,-2]]],22,23,5],[[[6,[-1,-2]],[6,[-1,-2]]],22,23,23],0,[[[6,[-1,-2]]],[[6,[-1,-2]]],24,[]],[[[6,[-1,-2]]],[[6,[-1,-2]]],24,[]],[[[2,[-1,-2]]],4,25,5],[[[2,[-1,-2]],-3],4,[],5,26],[[[2,[-1,-2]],-3],4,[],5,26],[[],18],[[],19],[[],[[2,[-1]]],[]],[[[2,[-1,-2]]],[[10,[-1]]],[],5],[[[2,[-1,-2]]],[[10,[-1]]],[],5],[[[2,[-1,-2]],-3],[[27,[-1,-2]]],[],5,[[28,[3]]]],[[[2,[-1,-2]]],4,[],5],[18,3],[19,3],[[[2,[1]]],3],[[18,18],29],[[19,19],29],[[12,12],29],[[30,30],29],[[[2,[1]],31],29],[[[2,[-2,-3]],[2,[-1,-4]]],29,[],[[25,[-1]]],5,5],[[[2,[-2,-3]],[32,[-1]]],29,[],[[25,[-1]]],5],[[[2,[1]],33],29],[[[2,[-2,-3]],[10,[-1]]],29,[],[[25,[-1]]],5],[[[2,[-2,-3]],[10,[-1]]],29,[],[[25,[-1]]],5],[[[2,[-2,-3]],[10,[-1]]],29,[],[[25,[-1]]],5],[[[2,[-2,-3]],[32,[-1]]],29,[],[[25,[-1]]],5],[[[6,[-1,-2]],[6,[-1,-2]]],29,25,25],[[[6,[-1,-2]]],[[34,[-2]]],[],[]],[[[6,[-1,-2]],35],-1,[],36],[[[6,[-1,-2]],35],-2,36,[]],[[[2,[-1,-2]],-3],4,[],5,37],[[[2,[-1,-2]],-3],4,24,5,37],[[[2,[-1,-2]],[10,[-1]]],4,21,5],[[[2,[-1,-2]],-3],4,21,5,[[28,[3]]]],[[[2,[-1,-2]],-1],4,[],5],[[[2,[-1,-2]],-1],4,24,5],[[[2,[-1,-2]],3],4,24,5],[[[2,[-1,-2]],3],4,[],5],[[[2,[-1,-2]],-3],[[38,[-1,-3,-2]]],[],5,26],[[[6,[[6,[-1,-2]],-2]]],[[6,[-1,-2]]],[],[]],[[[2,[1,-1]]],[[6,[4,39]]],5],[[18,40],41],[[19,40],41],[[12,40],41],[[12,40],41],[[30,40],41],[[[2,[-1,-2]],40],[[6,[4,42]]],36,5],[[[6,[-1,-2]],40],[[6,[4,42]]],36,36],0,[-1,-1,[]],[[[6,[[2,[1]],12]]],19],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[11,30],[43,[[2,[1]]]],[44,[[2,[1]]]],[[[45,[[10,[-1]],-2]]],[[2,[-1,-2]]],[],5],[33,[[2,[1]]]],[31,[[2,[1]]]],[[[10,[-1]]],[[2,[-1]]],21],[[[46,[[10,[-1]]]]],[[2,[-1]]],[]],[[[47,[-1,-2]]],[[2,[-1,-2]]],[],5],[[[10,[-1]]],[[2,[-1]]],21],[[[32,[-1]]],[[2,[-1]]],21],[-1,-1,[]],[[[48,[-1,-2]]],[[2,[-1,-2]]],[],5],[35,[[2,[1]]]],[[[32,[-1]]],[[2,[-1]]],21],[[[32,[-1]]],[[2,[-1]]],[]],[19,[[6,[[2,[1]],12]]]],[49,[[6,[50,51]]]],[49,[[6,[50,51]]]],[-1,-1,[]],[-1,[[2,[-2]]],37,[]],[-1,[[6,[-3,-4]]],37,[],[[52,[-2]]],[]],[[],[[6,[-1,-2]]],[],[]],[[3,3],[[2,[-1]]],[]],[[3,3,-1],[[2,[-2,-1]]],5,[]],[[[6,[53,-1]]],[[6,[-2,-3]]],[],[],[[54,[-1]]]],[[[55,[-1]]],[[6,[-2,-3]]],[],[],[[54,[-1]]]],[[[2,[-1,-2]],-3],4,56,5,57],[[[6,[-1,-2]],-3],4,56,56,57],[[[2,[-1,-2]],-3],[],[],5,[[58,[[10,[-1]]]]]],[[[2,[-1,-2]],-3],[],[],5,[[58,[[10,[-1]]]]]],[[[2,[-1,-2]],3,-1],4,[],5],[[[6,[-1,-2]],-3],[[6,[-1,-2]]],[],[],7],[[[6,[-1,-2]],-3],[[6,[-1,-2]]],[],[],7],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[2,[-1,-2]]],[[45,[[10,[-1]],-2]]],[],5],[[[6,[-1,-2]]],-2,[[60,[59]]],[]],[[[2,[[32,[-1]],-2]]],[[2,[-1,-2]]],[],5],[[[2,[-1,-2]]],[],[],5],[[[2,[-1,-2]]],[],[],5],[[[2,[-1,-2]]],[],[],5],[[[6,[-1,-2]]],[[61,[-1]]],[],[]],[[[6,[-1,-2]]],[[62,[-1]]],[],[]],[[[6,[-1,-2]]],[[63,[-1]]],[],[]],[[[6,[-1,-2]]],-1,[],[[60,[59]]]],[[[2,[-1,-2]]],[[4,[3,3]]],[],5],[[[2,[-1,-2]]],[[4,[3,3,-2]]],[],5],[[-1,[10,[1]]],[[6,[[2,[1]]]]],[]],[[-1,[10,[1]]],[[65,[[45,[64]]]]],[]],[[[2,[-1,-2]]],29,[],5],[[[6,[-1,-2]]],29,[],[]],[[[6,[-1,-2]],-3],29,[],[],7],[[[6,[-1,-2]]],29,[],[]],[[[6,[-1,-2]],-3],29,[],[],7],[[[2,[1,-1]]],29,5],[[[6,[-1,-2]]],[[63,[-1]]],[],[]],[[[6,[-1,-2]]],[[61,[-1]]],[],[]],[[[2,[-1,-2]]],[[10,[-1]]],[],5],[[[2,[-1,-2]]],3,[],5],[[[6,[-1,-2]],-3],[[6,[-4,-2]]],[],[],7,[]],[[[6,[-1,-2]],-3],[[6,[-1,-4]]],[],[],7,[]],[[[6,[-1,-2]],-3,-4],-3,[],[],[],7],[[[6,[-1,-2]],-3,-4],-5,[],[],7,7,[]],0,0,[[[2,[-2,-3]],[32,[-1]]],29,[],[[25,[-1]]],5],[[[2,[-2,-3]],[2,[-1,-4]]],29,[],[[25,[-1]]],5,5],[[[2,[-2,-3]],[10,[-1]]],29,[],[[25,[-1]]],5],[[[2,[-2,-3]],[32,[-1]]],29,[],[[25,[-1]]],5],[[[2,[-2,-3]],[10,[-1]]],29,[],[[25,[-1]]],5],[[[2,[-2,-3]],[10,[-1]]],29,[],[[25,[-1]]],5],[30,12],[[],[[2,[-1]]],[]],[-1,[[2,[-2,-1]]],5,[]],[[30,-1],12,[[60,[44]]]],[[[6,[-1,-2]]],[[34,[-1]]],[],[]],[[[6,[-1,-2]],[6,[-1,-3]]],[[6,[-1,-3]]],[],[],[]],[[[6,[-1,-2]],-3],[[6,[-1,-4]]],[],[],7,[]],[[[2,[1]],33],[[34,[22]]]],[[[2,[1]],31],[[34,[22]]]],[[[2,[-1,-2]],[2,[-1,-3]]],[[34,[22]]],66,5,5],[[[6,[-1,-2]],[6,[-1,-2]]],[[34,[22]]],66,66],[[[2,[-1,-2]]],[[34,[-1]]],[],5],[-1,[[6,[-3,-4]]],67,[],[[68,[-2]]],[]],[[[2,[-1,-2]],-1],4,[],5],[[[2,[-1,-2]],-1],[[6,[4,-1]]],[],5],[[[2,[1]],-1],4,69],[[[2,[1]],1,3],4],[[[2,[1]],[10,[1]]],4],[[[2,[1]]],3],[[[2,[-1,-2]],3],-1,[],5],[[[6,[-1,-2]]],70,71,36],[[[2,[-1,-2]],3],4,[],5],[[[2,[-1,-2]],3],4,[],5],[[[2,[-1,-2]],3,-1],4,21,5],[[[2,[-1,-2]],3,-3],4,[],5,26],0,0,[[[2,[-1,-2]],-3],4,[],5,26],[[[2,[-1,-2]],-3],4,[],5,26],[[[2,[-1,-2]],3],4,[],5],[[[2,[-1,-2]],3],4,[],5],[[[2,[-1,-2]]],4,[],5],[[[2,[-1,-2]]],[[10,[[72,[-1]]]]],[],5],[[[2,[-1,-2]],-3,-4],[[73,[-2]]],[],5,[[28,[3]]],37],[[[2,[-1,-2]]],[[4,[[10,[-1]],[10,[[72,[-1]]]]]]],[],5],[[[2,[-1,-2]],3],[[2,[-1,-2]]],[],[21,5]],[-1,[[6,[-3,-4]]],67,[],[[74,[-2]]],[]],[[[2,[-1,-2]],3],-1,[],5],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,44,[]],[[[6,[[34,[-1]],-2]]],[[34,[[6,[-1,-2]]]]],[],[]],[[[2,[-1,-2]],3],4,[],5],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[[[2,[-1,-2]],3],[[6,[4,75]]],[],5],[[[2,[-1,-2]],3],[[6,[4,75]]],[],5],[-1,76,[]],[-1,76,[]],[-1,76,[]],[-1,76,[]],[-1,76,[]],[-1,76,[]],[[[6,[-1,-2]]],-1,[],36],[[[6,[-1,-2]]],-2,36,[]],[[[6,[-1,-2]]],-2,[],[]],[[[6,[-1,-2]],-1],-1,[],[]],[[[6,[-1,-2]]],-1,15,[]],[[[6,[-1,-2]],-3],-1,[],[],7],[[[6,[-1,-2]]],-1,[],[]],[3,[[2,[-1]]],[]],[[3,-1],[[2,[-2,-1]]],5,[]],[[[2,[1,-1]],[10,[1]]],[[6,[3,39]]],5],[[[2,[1,-1]],[10,[1]]],[[6,[4,39]]],5],[[[2,[1,-1]],[10,[77]]],[[6,[3,39]]],5],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[78,78],[[-1,-2],4,[],[]],[[78,-1],4,79],[78,3],[[78,78],29],[[78,40],41],[-1,-1,[]],[-1,-2,[],[]],[[[34,[78]],11,80,-1,81],[[6,[4,82]]],69],[-1,-2,[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,76,[]]],"c":[],"p":[[15,"u8"],[3,"Vec",0],[15,"usize"],[15,"tuple"],[8,"Allocator",313],[4,"Result",0],[8,"FnOnce",314],[8,"Deref",315],[8,"DerefMut",315],[15,"slice"],[15,"u32"],[3,"Status",0],[8,"AsyncTransport",0],[8,"Message",316],[8,"Default",317],[4,"ControlFlow",318],[3,"UninitSlice",319],[3,"RequestWrapper",0],[3,"ResponseWrapper",0],[8,"Transport",0],[8,"Clone",320],[4,"Ordering",321],[8,"Ord",321],[8,"Copy",322],[8,"PartialEq",321],[8,"FnMut",314],[3,"Drain",323],[8,"RangeBounds",324],[15,"bool"],[4,"StatusCode",0],[3,"BytesMut",325],[15,"array"],[3,"Bytes",326],[4,"Option",327],[15,"str"],[8,"Debug",328],[8,"IntoIterator",329],[3,"ExtractIf",330],[3,"Error",331],[3,"Formatter",328],[6,"Result",328],[3,"Error",328],[3,"CString",332],[3,"String",333],[3,"Box",334],[4,"Cow",335],[3,"BinaryHeap",336],[3,"VecDeque",337],[3,"StreamResult",338],[4,"MZStatus",338],[4,"MZError",338],[8,"FromIterator",329],[4,"Infallible",339],[8,"From",339],[3,"Yeet",340],[8,"Hash",341],[8,"Hasher",341],[8,"SliceIndex",342],[15,"never"],[8,"Into",339],[3,"IterMut",343],[3,"IntoIter",343],[3,"Iter",343],[8,"Future",344],[3,"Pin",345],[8,"PartialOrd",321],[8,"Iterator",346],[8,"Product",347],[8,"Buf",348],[3,"ExitCode",349],[8,"Termination",349],[19,"MaybeUninit",350],[3,"Splice",351],[8,"Sum",347],[3,"TryReserveError",352],[3,"TypeId",353],[3,"IoSlice",354],[4,"Response",295],[8,"BufMut",355],[4,"WireType",356],[3,"DecodeContext",356],[3,"DecodeError",357]],"b":[[38,"impl-AsMut%3CVec%3CT,+A%3E%3E-for-Vec%3CT,+A%3E"],[39,"impl-AsMut%3C%5BT%5D%3E-for-Vec%3CT,+A%3E"],[44,"impl-AsRef%3C%5BT%5D%3E-for-Vec%3CT,+A%3E"],[45,"impl-AsRef%3CVec%3CT,+A%3E%3E-for-Vec%3CT,+A%3E"],[69,"impl-Message-for-Vec%3Cu8%3E"],[70,"impl-Vec%3CT,+A%3E"],[82,"impl-Result%3C%26T,+E%3E"],[83,"impl-Result%3C%26mut+T,+E%3E"],[87,"impl-Result%3C%26T,+E%3E"],[88,"impl-Result%3C%26mut+T,+E%3E"],[106,"impl-PartialEq%3CBytesMut%3E-for-Vec%3Cu8%3E"],[107,"impl-PartialEq%3CVec%3CU,+A2%3E%3E-for-Vec%3CT,+A1%3E"],[108,"impl-PartialEq%3C%5BU;+N%5D%3E-for-Vec%3CT,+A%3E"],[109,"impl-PartialEq%3CBytes%3E-for-Vec%3Cu8%3E"],[110,"impl-PartialEq%3C%26mut+%5BU%5D%3E-for-Vec%3CT,+A%3E"],[111,"impl-PartialEq%3C%5BU%5D%3E-for-Vec%3CT,+A%3E"],[112,"impl-PartialEq%3C%26%5BU%5D%3E-for-Vec%3CT,+A%3E"],[113,"impl-PartialEq%3C%26%5BU;+N%5D%3E-for-Vec%3CT,+A%3E"],[118,"impl-Extend%3CT%3E-for-Vec%3CT,+A%3E"],[119,"impl-Extend%3C%26T%3E-for-Vec%3CT,+A%3E"],[122,"impl-Extend%3CT%3E-for-Vec%3CT,+A%3E"],[123,"impl-Extend%3C%26T%3E-for-Vec%3CT,+A%3E"],[124,"impl-Extend%3C%26T%3E-for-Vec%3CT,+A%3E"],[125,"impl-Extend%3CT%3E-for-Vec%3CT,+A%3E"],[131,"impl-Display-for-Status"],[132,"impl-Debug-for-Status"],[143,"impl-From%3CCString%3E-for-Vec%3Cu8%3E"],[144,"impl-From%3CString%3E-for-Vec%3Cu8%3E"],[145,"impl-From%3CBox%3C%5BT%5D,+A%3E%3E-for-Vec%3CT,+A%3E"],[146,"impl-From%3CBytes%3E-for-Vec%3Cu8%3E"],[147,"impl-From%3CBytesMut%3E-for-Vec%3Cu8%3E"],[148,"impl-From%3C%26mut+%5BT%5D%3E-for-Vec%3CT%3E"],[149,"impl-From%3CCow%3C\'a,+%5BT%5D%3E%3E-for-Vec%3CT%3E"],[150,"impl-From%3CBinaryHeap%3CT,+A%3E%3E-for-Vec%3CT,+A%3E"],[151,"impl-From%3C%26%5BT%5D%3E-for-Vec%3CT%3E"],[152,"impl-From%3C%26mut+%5BT;+N%5D%3E-for-Vec%3CT%3E"],[154,"impl-From%3CVecDeque%3CT,+A%3E%3E-for-Vec%3CT,+A%3E"],[155,"impl-From%3C%26str%3E-for-Vec%3Cu8%3E"],[156,"impl-From%3C%26%5BT;+N%5D%3E-for-Vec%3CT%3E"],[157,"impl-From%3C%5BT;+N%5D%3E-for-Vec%3CT%3E"],[158,"impl-From%3CResponseWrapper%3E-for-Result%3CVec%3Cu8%3E,+Status%3E"],[159,"impl-From%3C%26StreamResult%3E-for-Result%3CMZStatus,+MZError%3E"],[160,"impl-From%3CStreamResult%3E-for-Result%3CMZStatus,+MZError%3E"],[167,"impl-FromResidual%3CResult%3CInfallible,+E%3E%3E-for-Result%3CT,+F%3E"],[168,"impl-FromResidual%3CYeet%3CE%3E%3E-for-Result%3CT,+F%3E"],[185,"impl-IntoIterator-for-%26Vec%3CT,+A%3E"],[186,"impl-IntoIterator-for-%26mut+Vec%3CT,+A%3E"],[187,"impl-IntoIterator-for-Vec%3CT,+A%3E"],[188,"impl-IntoIterator-for-%26mut+Result%3CT,+E%3E"],[189,"impl-IntoIterator-for-Result%3CT,+E%3E"],[190,"impl-IntoIterator-for-%26Result%3CT,+E%3E"],[212,"impl-PartialEq%3C%26%5BU;+N%5D%3E-for-Vec%3CT,+A%3E"],[213,"impl-PartialEq%3CVec%3CU,+A2%3E%3E-for-Vec%3CT,+A1%3E"],[214,"impl-PartialEq%3C%5BU%5D%3E-for-Vec%3CT,+A%3E"],[215,"impl-PartialEq%3C%5BU;+N%5D%3E-for-Vec%3CT,+A%3E"],[216,"impl-PartialEq%3C%26%5BU%5D%3E-for-Vec%3CT,+A%3E"],[217,"impl-PartialEq%3C%26mut+%5BU%5D%3E-for-Vec%3CT,+A%3E"],[225,"impl-PartialOrd%3CBytes%3E-for-Vec%3Cu8%3E"],[226,"impl-PartialOrd%3CBytesMut%3E-for-Vec%3Cu8%3E"],[227,"impl-PartialOrd%3CVec%3CT,+A2%3E%3E-for-Vec%3CT,+A1%3E"]]},\
"micro_rpc_build":{"doc":"This crate allows compiling protobuf services to Rust in …","t":"DENNLLLLMLLLLFLLLLLLLMLLLLLLLL","n":["CompileOptions","ReceiverType","RefMutSelf","RefSelf","borrow","borrow","borrow_mut","borrow_mut","bytes","clone","clone","clone_into","clone_into","compile","default","default","fmt","from","from","into","into","receiver_type","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id"],"q":[[0,"micro_rpc_build"],[30,"std::path"],[31,"core::convert"],[32,"core::fmt"],[33,"core::fmt"],[34,"core::any"]],"d":["","","&amp;mut self","&amp;self","","","","","List of <code>bytes</code> fields that will use <code>bytes::Bytes</code> instead of …","","","","","Compile Rust server code from the services in the provided …","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Specifies the receiver type in generated server code.","","","","","","","",""],"i":[0,0,1,1,1,2,1,2,2,1,2,1,2,0,1,2,1,1,2,1,2,2,1,2,1,2,1,2,1,2],"f":[0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[1,1],[2,2],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[[4,[-1]],[4,[-2]],2],3,[[6,[5]]],[[6,[5]]]],[[],1],[[],2],[[1,7],8],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,10,[]],[-1,10,[]]],"c":[],"p":[[4,"ReceiverType",0],[3,"CompileOptions",0],[15,"tuple"],[15,"slice"],[3,"Path",30],[8,"AsRef",31],[3,"Formatter",32],[6,"Result",32],[4,"Result",33],[3,"TypeId",34]],"b":[]},\
"oak_attestation":{"doc":"","t":"AAAAIDDLLLLLLLLLKLLLLLLLLLLLDLLLLLLLLLLDDDMLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLAAAAANDDDDDDDDNDDDDDDDEDNMMMLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMLLLLLLLLLLLLLLLLLLMMMLLLLLLLLLLLLLLLLMMMALLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLMMMMMMMLLMMMMMMLMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLNNNELLLLLLLLLLLLLLLADDDDDMLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLMMMLMMLLLLLLLLLLLLLLLLLLLLADDDDDDDDDDMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLMLLLLLLLLLLMMMMMMMLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["attester","dice","handler","proto","AttestationReportGenerator","Attester","EmptyAttestationReportGenerator","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","from","from","generate_attestation_evidence","generate_attestation_report","generate_attestation_report","into","into","new","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","DiceBuilder","add_application_keys","add_layer","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","AsyncEncryptionHandler","EncryptionHandler","PublicKeyInfo","attestation","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","create","create","fmt","from","from","from","into","into","into","invoke","invoke","public_key","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","oak","attestation","crypto","session","v1","AmdSevSnp","ApplicationKeys","ApplicationLayerEndorsements","CbEndorsements","CertificateAuthority","ContainerLayerEndorsements","DiceData","Endorsements","Evidence","IntelTdx","KernelLayerEndorsements","LayerEvidence","OakContainersEndorsements","OakRestrictedKernelEndorsements","RootLayerEndorsements","RootLayerEvidence","SystemLayerEndorsements","TeePlatform","TransparentReleaseEndorsement","Unspecified","acpi","application_keys","application_layer","as_str_name","binary","binary","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","certificate_authority","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","configuration","configuration","container_layer","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","drop","eca_certificate","eca_private_key","eca_public_key","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encryption_public_key_certificate","endorsement","endorsement_signature","endorsements","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","evidence","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_i32","from_str_name","get_claims","hash","init_ram_fs","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","is_valid","kernel_cmd_line","kernel_image","kernel_layer","kernel_layer","kernel_setup_data","layers","memory_map","partial_cmp","platform","platform","rekor_log_entry","remote_attestation_report","root_layer","root_layer","root_layer","set_platform","signing_public_key_certificate","stage0","system_image","system_layer","tee_certificate","tee_certificate","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","Cb","OakContainers","OakRestrictedKernel","Type","borrow","borrow_mut","clone","clone_into","encode","encoded_len","eq","fmt","from","into","merge","to_owned","try_from","try_into","type_id","v1","AeadEncryptedMessage","EncryptedRequest","EncryptedResponse","SessionKeys","Signature","associated_data","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","ciphertext","clear","clear","clear","clear","clear","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","default","default","default","default","default","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encrypted_message","encrypted_message","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","into","into","into","into","into","nonce","request_key","response_key","serialized_encapsulated_public_key","serialized_encapsulated_public_key","signature","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","v1","ApplicationData","AttestationBundle","AttestationEndorsement","AttestationEvidence","GetEncryptionKeyRequest","GetEncryptionKeyResponse","GetPublicKeyRequest","GetPublicKeyResponse","InvokeRequest","InvokeResponse","application_data","attestation","attestation_bundle","attestation_endorsement","attestation_evidence","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","config","default","default","default","default","default","default","default","default","default","default","digest","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encrypted_attestation_bundle","encrypted_encryption_key","encrypted_request","encrypted_response","encryption_public_key","endorsed_evidence","endorsements","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","evidence","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","into","into","into","into","into","into","into","into","into","into","signed_application_data","signing_public_key","tee_certificates","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id"],"q":[[0,"oak_attestation"],[4,"oak_attestation::attester"],[28,"oak_attestation::dice"],[39,"oak_attestation::handler"],[73,"oak_attestation::proto"],[74,"oak_attestation::proto::oak"],[77,"oak_attestation::proto::oak::attestation"],[78,"oak_attestation::proto::oak::attestation::v1"],[407,"oak_attestation::proto::oak::attestation::v1::endorsements"],[426,"oak_attestation::proto::oak::crypto"],[427,"oak_attestation::proto::oak::crypto::v1"],[517,"oak_attestation::proto::oak::session"],[518,"oak_attestation::proto::oak::session::v1"],[696,"anyhow"],[697,"alloc::vec"],[698,"alloc::sync"],[699,"oak_crypto::encryptor"],[700,"core::result"],[701,"core::any"],[702,"coset::cwt"],[703,"ciborium::value"],[704,"p256::ecdsa"],[705,"oak_crypto::encryptor"],[706,"oak_crypto::encryptor"],[707,"core::marker"],[708,"core::fmt"],[709,"core::fmt"],[710,"oak_dice::evidence"],[711,"core::option"],[712,"coset::cwt"],[713,"oak_dice::evidence"],[714,"prost::encoding"],[715,"prost::encoding"],[716,"bytes::buf::buf_impl"],[717,"core::fmt"]],"d":["","","","","A trait implementing the functionality of generating a …","A struct implementing the functionality of an attester …","An instance of <code>AttestationReportGenerator</code> that always …","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Generate an attestation evidence containing a remote …","Generate a remote attestation report, ensuring that …","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","Builds the DICE evidence and certificate authority for the …","Adds the CWT certificates application keys to the DICE …","Adds an additional layer of evidence to the DICE data.","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","Wraps a closure to an underlying function with request …","Wraps a closure to an underlying function with request …","Information about a public key.","The serialized attestation report that binds the public …","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","The serialized public key.","","","","","","","","","","","","","","","","","Keys used by the application to derive encryption session …","","","Message for passing embedded certificate authority …","","Message that is sent between DICE layers.","Endorsement contains statements that some entity (e.g. a …","Attestation Evidence used by the client to the identity of …","","","DICE layer evidence containing a certificate signed by the …","","","","Evidence generated by the Layer0.","","This proto defines the layered DICE Attestation Evidence.","Endorsement for binaries from the Transparent Release …","","","Application keys signed by the penultimate layer’s ECA …","","String value of the enum field names used in the ProtoBuf …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Certificate signing current layer’s measurements and the …","ECA private key that will be used by a layer to sign a …","Serialized ECA public key for Layer0 that is signed by the …","","","","","","","","","","","","","","","","","Certificate signing the encryption public key.","JSON string comtaining the endorsement statement for the …","The signature for the endorsement.","Nested message and enum types in <code>Endorsements</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Converts an <code>i32</code> to a <code>TeePlatform</code>, or <code>None</code> if <code>value</code> is not …","Creates an enum from field names used in the ProtoBuf …","Extracts the <code>ClaimsSet</code> encoded in the ECA certificate of …","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if <code>value</code> is a variant of <code>TeePlatform</code>.","","","","","","Layer1..LayerN-1 attestation evidence.","","","Returns the enum value of <code>platform</code>, or the default if the …","The platform providing the attestation report.","The log entry as proof of inclusion of the endorsement …","TEE-specific attestation report acting as a non-standard …","Layer0 attestation evidence.","","","Sets <code>platform</code> to the provided enum value.","Certificate signing the signing public key.","Endorsement of the Stage0 binary.","","","The serialized TEE certificate(s). The details of the …","Serialized X.509 TEE certificate.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Encodes the message to a buffer.","Returns the encoded length of the message without a length …","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Decodes an instance of the message from a buffer, and …","","","","","","Message encrypted with Authenticated Encryption with …","Request message encrypted using Hybrid Public Key …","Response message encrypted Hybrid Public Key Encryption …","Envelope containing session keys required to …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Message encrypted with Authenticated Encryption with …","Message encrypted with Authenticated Encryption with …","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","AEAD key for encrypting/decrypting client requests.","AEAD key for encrypting/decrypting enclave responses.","Returns the value of <code>serialized_encapsulated_public_key</code>, …","Ephemeral Diffie-Hellman client public key that is needed …","","","","","","","","","","","","","","","","","","","","","","","","AttestationBundle contains the information that the …","AttestationEndorsement contains statements that some …","AttestationEvidence contains all the information that …","","","","","","","The optional application-specific data.","The serialized attestation report binding the public key.","The enclave’s signing and encryption public keys and …","Supporting evidence required for verifying the integrity …","Attestation evidence from the enclave.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The serialized application configuration. The format of …","","","","","","","","","","","The cryptographic digest of the application, of the form …","","","","","","","","","","","Encrypted attestation evidence of the dependent enclave.","Encrypted private key of the leader enclave.","Body of the request, encrypted using Hybrid Public Key …","Body of the request, encrypted using Hybrid Public Key …","The serialized public key part of the enclave encryption …","Attestation evidence and public key.","Thea attestation endorsements.","","","","","","","","","","","The DICE attestation evidence.","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","The signature over the application_data, signed by the …","The serialized public key part of the enclave signing key. …","The serialized TEE certificate(s). The details of the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,3,1,3,1,1,1,3,1,3,9,1,3,1,3,1,3,1,3,1,3,1,0,14,14,14,14,14,14,14,14,14,14,0,0,0,20,22,24,20,22,24,20,20,20,22,24,20,22,24,20,22,24,20,22,24,20,20,22,24,20,22,24,20,22,24,20,0,0,0,0,0,33,0,0,0,0,0,0,0,0,33,0,0,0,0,0,0,0,0,0,33,41,18,45,33,43,44,35,36,37,18,33,38,19,39,40,41,42,43,44,45,46,47,48,35,36,37,18,33,38,19,39,40,41,42,43,44,45,46,47,48,19,35,36,37,18,38,19,39,40,41,42,43,44,45,46,47,48,35,36,37,18,33,38,19,39,40,41,42,43,44,45,46,47,48,35,36,37,18,33,38,19,39,40,41,42,43,44,45,46,47,48,33,43,44,46,35,36,37,18,33,38,19,39,40,41,42,43,44,45,46,47,48,19,36,38,35,35,36,37,18,38,19,39,40,41,42,43,44,45,46,47,48,37,39,39,0,35,36,37,18,33,38,19,39,40,41,42,43,44,45,46,47,48,19,35,36,37,18,33,38,19,39,40,41,42,43,44,45,46,47,48,35,36,37,18,33,33,38,19,19,39,40,41,42,43,44,45,46,47,48,33,33,36,33,41,35,36,37,18,33,38,19,39,40,41,42,43,44,45,46,47,48,33,41,41,45,46,41,18,41,33,35,35,39,35,18,45,46,35,37,40,42,46,40,47,35,36,37,18,33,38,19,39,40,41,42,43,44,45,46,47,48,35,35,36,36,37,37,18,18,33,38,19,19,39,40,41,42,43,44,45,46,47,48,35,36,37,18,33,38,19,39,40,41,42,43,44,45,46,47,48,48,35,36,37,18,33,38,19,39,40,41,42,43,44,45,46,47,48,62,62,62,0,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,0,0,0,0,0,0,69,31,32,69,70,71,31,32,69,70,71,69,31,32,69,70,71,31,32,69,70,71,31,32,69,70,71,31,32,69,70,71,31,32,69,70,71,31,32,31,32,69,70,71,31,32,69,70,71,31,32,69,70,71,31,32,69,70,71,69,70,70,31,31,71,31,32,69,70,71,31,32,69,70,71,31,32,69,70,71,31,32,69,70,71,0,0,0,0,0,0,0,0,0,0,0,74,4,77,73,73,4,73,74,75,76,77,78,79,80,81,4,73,74,75,76,77,78,79,80,81,4,73,74,75,76,77,78,79,80,81,4,73,74,75,76,77,78,79,80,81,4,73,74,75,76,77,78,79,80,81,75,4,73,74,75,76,77,78,79,80,81,75,4,73,74,75,76,77,78,79,80,81,80,81,78,79,4,81,73,4,73,74,75,76,77,78,79,80,81,73,4,73,74,75,76,77,78,79,80,81,4,73,74,75,76,77,78,79,80,81,4,73,74,75,76,77,78,79,80,81,4,4,74,4,73,74,75,76,77,78,79,80,81,4,73,74,75,76,77,78,79,80,81,4,73,74,75,76,77,78,79,80,81,4,73,74,75,76,77,78,79,80,81],"f":[0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[1,1],[[-1,-2],2,[],[]],[-1,-1,[]],[-1,-1,[]],[3,[[5,[4]]]],[[-1,[7,[6]]],[[5,[[8,[6]]]]],[]],[[1,[7,[6]]],[[5,[[8,[6]]]]]],[-1,-2,[],[]],[-1,-2,[],[]],[[[10,[9]],[10,[11]]],3],[-1,-2,[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,13,[]],[-1,13,[]],0,[[14,[8,[[2,[15,16]]]],[7,[6]],17],[[5,[18]]]],[[14,[8,[[2,[15,16]]]]],[[5,[2]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-1,[]],[-1,-2,[],[]],[-1,[[12,[-2]]],[],[]],[19,[[5,[14]]]],[-1,[[12,[-2]]],[],[]],[-1,13,[]],0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[20,20],[[-1,-2],2,[],[]],[[[10,[21]],-1],[[22,[-1]]],23],[[[10,[-1]],-2],[[24,[-1,-2,-3]]],[25,26,27],23,28],[[20,29],30],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[22,[-1]],31],[[5,[32]]],23],[[[24,[-1,-2,-3]],31],[[5,[32]]],[25,26,27],23,28],0,[-1,-2,[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[33,34],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[35,2],[36,2],[37,2],[18,2],[38,2],[19,2],[39,2],[40,2],[41,2],[42,2],[43,2],[44,2],[45,2],[46,2],[47,2],[48,2],[35,35],[36,36],[37,37],[18,18],[33,33],[38,38],[19,19],[39,39],[40,40],[41,41],[42,42],[43,43],[44,44],[45,45],[46,46],[47,47],[48,48],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[33,33],49],0,0,0,[[],35],[[],36],[[],37],[[],18],[[],33],[[],38],[[],19],[[],39],[[],40],[[],41],[[],42],[[],43],[[],44],[[],45],[[],46],[[],47],[[],48],[19,2],0,0,0,[35,50],[36,50],[37,50],[18,50],[38,50],[19,50],[39,50],[40,50],[41,50],[42,50],[43,50],[44,50],[45,50],[46,50],[47,50],[48,50],0,0,0,0,[[35,35],51],[[36,36],51],[[37,37],51],[[18,18],51],[[33,33],51],[[38,38],51],[[19,19],51],[[39,39],51],[[40,40],51],[[41,41],51],[[42,42],51],[[43,43],51],[[44,44],51],[[45,45],51],[[46,46],51],[[47,47],51],[[48,48],51],0,[[35,29],30],[[36,29],30],[[37,29],30],[[18,29],30],[[33,29],30],[[38,29],30],[[19,29],30],[[39,29],30],[[40,29],30],[[41,29],30],[[42,29],30],[[43,29],30],[[44,29],30],[[45,29],30],[[46,29],30],[[47,29],30],[[48,29],30],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[52,33],[-1,-1,[]],[-1,-1,[]],[14,19],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[53,[[54,[33]]]],[34,[[54,[33]]]],[36,[[5,[55]]]],[[33,-1],2,56],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[53,51],0,0,0,0,0,0,0,[[33,33],[[54,[49]]]],[35,33],0,0,0,0,0,0,[[35,33],2],0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[57,[[5,[35]]]],[-1,[[12,[-2]]],[],[]],[58,[[5,[36]]]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[59,[[5,[37]]]],[-1,[[12,[-2]]],[],[]],[60,[[5,[18]]]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[61,[[5,[19]]]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],0,[-1,13,[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[62,62],[[-1,-2],2,[],[]],[[62,-1],2,63],[62,50],[[62,62],51],[[62,29],30],[-1,-1,[]],[-1,-2,[],[]],[[[54,[62]],64,65,-1,66],[[12,[2,67]]],68],[-1,-2,[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,13,[]],0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[31,2],[32,2],[69,2],[70,2],[71,2],[31,31],[32,32],[69,69],[70,70],[71,71],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[],31],[[],32],[[],69],[[],70],[[],71],[31,50],[32,50],[69,50],[70,50],[71,50],0,0,[[31,31],51],[[32,32],51],[[69,69],51],[[70,70],51],[[71,71],51],[[31,29],[[12,[2,72]]]],[[32,29],[[12,[2,72]]]],[[69,29],[[12,[2,72]]]],[[70,29],[[12,[2,72]]]],[[71,29],[[12,[2,72]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,[31,[[7,[6]]]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[4,2],[73,2],[74,2],[75,2],[76,2],[77,2],[78,2],[79,2],[80,2],[81,2],[4,4],[73,73],[74,74],[75,75],[76,76],[77,77],[78,78],[79,79],[80,80],[81,81],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],0,[[],4],[[],73],[[],74],[[],75],[[],76],[[],77],[[],78],[[],79],[[],80],[[],81],0,[4,50],[73,50],[74,50],[75,50],[76,50],[77,50],[78,50],[79,50],[80,50],[81,50],0,0,0,0,0,0,0,[[4,4],51],[[73,73],51],[[74,74],51],[[75,75],51],[[76,76],51],[[77,77],51],[[78,78],51],[[79,79],51],[[80,80],51],[[81,81],51],0,[[4,29],30],[[73,29],30],[[74,29],30],[[75,29],30],[[76,29],30],[[77,29],30],[[78,29],30],[[79,29],30],[[80,29],30],[[81,29],30],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],[-1,13,[]]],"c":[531,532],"p":[[3,"EmptyAttestationReportGenerator",4],[15,"tuple"],[3,"Attester",4],[3,"AttestationEvidence",518],[6,"Result",696],[15,"u8"],[15,"slice"],[3,"Vec",697],[8,"AttestationReportGenerator",4],[3,"Arc",698],[3,"EncryptionKeyProvider",699],[4,"Result",700],[3,"TypeId",701],[3,"DiceBuilder",28],[6,"ClaimName",702],[4,"Value",703],[6,"VerifyingKey",704],[3,"Evidence",78],[3,"DiceData",78],[3,"PublicKeyInfo",39],[8,"RecipientContextGenerator",699],[3,"EncryptionHandler",39],[8,"FnOnce",705],[3,"AsyncEncryptionHandler",39],[8,"AsyncRecipientContextGenerator",699],[8,"Send",706],[8,"Sync",706],[8,"Future",707],[3,"Formatter",708],[6,"Result",708],[3,"EncryptedRequest",427],[3,"EncryptedResponse",427],[4,"TeePlatform",78],[15,"str"],[3,"RootLayerEvidence",78],[3,"LayerEvidence",78],[3,"ApplicationKeys",78],[3,"CertificateAuthority",78],[3,"TransparentReleaseEndorsement",78],[3,"RootLayerEndorsements",78],[3,"KernelLayerEndorsements",78],[3,"SystemLayerEndorsements",78],[3,"ApplicationLayerEndorsements",78],[3,"ContainerLayerEndorsements",78],[3,"OakRestrictedKernelEndorsements",78],[3,"OakContainersEndorsements",78],[3,"CbEndorsements",78],[3,"Endorsements",78],[4,"Ordering",709],[15,"usize"],[15,"bool"],[4,"TeePlatform",710],[15,"i32"],[4,"Option",711],[3,"ClaimsSet",702],[8,"Hasher",712],[3,"RootLayerEvidence",710],[3,"LayerEvidence",710],[3,"ApplicationKeys",710],[3,"Evidence",710],[3,"Stage0DiceData",710],[4,"Type",407],[8,"BufMut",713],[15,"u32"],[4,"WireType",714],[3,"DecodeContext",714],[3,"DecodeError",715],[8,"Buf",716],[3,"AeadEncryptedMessage",427],[3,"SessionKeys",427],[3,"Signature",427],[3,"Error",708],[3,"AttestationBundle",518],[3,"AttestationEndorsement",518],[3,"ApplicationData",518],[3,"GetPublicKeyRequest",518],[3,"GetPublicKeyResponse",518],[3,"InvokeRequest",518],[3,"InvokeResponse",518],[3,"GetEncryptionKeyRequest",518],[3,"GetEncryptionKeyResponse",518]],"b":[]},\
"oak_attestation_verification":{"doc":"","t":"AAAAAARDDNDDGRGENRDNDNMMLLLLLLLLLLLLLLMMLLLLLLMMLLLLLLMLLLLLLLLLLLLLLFLLLLLLLMMMMFMMMMMLLLLLLMMLLLLLLLLLLLLLLLLLLLLLMFFMFFFFFADDALLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMMMMMMMMMMLLLLLLLLADNDDDDDDDDDDDDDDDNDDDDDDDDDDDDDDDDEDNMMMMMMMMLAMMMMALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMAMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMMMMMMMLMLMMAMMMMMMMMLLMMMMLMMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMNENNLLLLLLLLLLLLLLLLLLLLNNNELLLLLLLLLLLLLLLNNNELLLLLLLLLLLLLLLNNNELLLLLLLLLLLLLLLDDDDDDDDDMMMLLLLLLLLLLLLLLLLLLMMMMLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLFMMLLLLLLLLLMMMMLLLLLLLLMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMFFFNENNLLFFFFLFLFFLFFFFFLLLFDLLLLLLLF","n":["claims","endorsement","proto","rekor","util","verifier","CLAIM_V1","ClaimEvidence","ClaimPredicate","ClaimType","ClaimValidity","Claimless","DigestSet","ENDORSEMENT_V2","EndorsementStatement","InvalidClaimData","PredicateType","STATEMENT_INTOTO_V01","Statement","StatementType","Subject","Validity","_type","_type","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","claim_spec","claim_type","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","digest","digest","eq","eq","eq","eq","eq","eq","evidence","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","get_digest","into","into","into","into","into","into","into","issued_on","name","not_after","not_before","parse_endorsement_statement","predicate","predicate","predicate_type","predicate_type","role","serialize","serialize","serialize","serialize","serialize","serialize","subject","subject","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","uri","validate_claim","validate_endorsement","validity","verify_validity_duration","verify_binary_digest","verify_binary_endorsement","verify_endorsement_statement","verify_endorser_public_key","oak","HexDigest","RawDigest","attestation","borrow","borrow","borrow_mut","borrow_mut","clear","clear","clone","clone","clone_into","clone_into","default","default","encoded_len","encoded_len","eq","eq","fmt","fmt","from","from","into","into","psha2","psha2","sha1","sha1","sha2_256","sha2_256","sha2_384","sha2_384","sha2_512","sha2_512","sha3_224","sha3_224","sha3_256","sha3_256","sha3_384","sha3_384","sha3_512","sha3_512","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","v1","AmdSevReferenceValues","AmdSevSnp","ApplicationKeys","ApplicationLayerEndorsements","ApplicationLayerReferenceValues","AttestationResults","BinaryReferenceValue","CbEndorsements","CbLayerReferenceValues","CbReferenceValues","ContainerLayerEndorsements","ContainerLayerReferenceValues","Digests","EndorsementReferenceValue","Endorsements","Evidence","FileReferenceValue","IntelTdx","IntelTdxReferenceValues","KernelLayerEndorsements","KernelLayerReferenceValues","LayerEvidence","OakContainersEndorsements","OakContainersReferenceValues","OakRestrictedKernelEndorsements","OakRestrictedKernelReferenceValues","ReferenceValues","RootLayerEndorsements","RootLayerEvidence","RootLayerReferenceValues","SkipVerification","StringReferenceValue","SystemLayerEndorsements","SystemLayerReferenceValues","TeePlatform","TransparentReleaseEndorsement","Unspecified","acpi","acpi","allow_debug","amd_root_public_key","amd_sev","application_keys","application_layer","application_layer","as_str_name","attestation_results","binary","binary","binary","binary","binary_reference_value","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","command_line","config","configuration","configuration","configuration","configuration","container_layer","container_layer","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","digests","digests","eca_certificate","eca_public_key","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encryption_public_key","encryption_public_key_certificate","endorsement","endorsement_signature","endorsements","endorser_public_key","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","files","firmware_version","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_i32","from_str_name","hash","init_ram_fs","init_ram_fs","intel_tdx","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","is_valid","kernel_cmd_line","kernel_cmd_line","kernel_image","kernel_image","kernel_layer","kernel_layer","kernel_layer","kernel_layer","kernel_setup_data","kernel_setup_data","layer_name","layers","layers","memory_map","memory_map","partial_cmp","path","platform","platform","reason","reference_values","rekor_log_entry","rekor_public_key","remote_attestation_report","root_layer","root_layer","root_layer","root_layer","root_layer","set_platform","set_status","signing_public_key","signing_public_key_certificate","stage0","stage0","status","status","system_image","system_image","system_layer","system_layer","tee_certificate","tee_certificate","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type","type","type","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","values","GenericFailure","Status","Success","Unspecified","as_str_name","borrow","borrow_mut","clone","clone_into","cmp","default","eq","fmt","from","from_i32","from_str_name","hash","into","is_valid","partial_cmp","to_owned","try_from","try_into","type_id","Digests","Endorsement","Skip","Type","borrow","borrow_mut","clone","clone_into","encode","encoded_len","eq","fmt","from","into","merge","to_owned","try_from","try_into","type_id","Cb","OakContainers","OakRestrictedKernel","Type","borrow","borrow_mut","clone","clone_into","encode","encoded_len","eq","fmt","from","into","merge","to_owned","try_from","try_into","type_id","Cb","OakContainers","OakRestrictedKernel","Type","borrow","borrow_mut","clone","clone_into","encode","encoded_len","eq","fmt","from","into","merge","to_owned","try_from","try_into","type_id","Body","Data","GenericSignature","Hash","LogEntry","LogEntryVerification","PublicKey","RekorSignatureBundle","Spec","algorithm","api_version","body","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","canonicalized","content","content","data","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","eq","eq","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","format","from","from","from","from","from","from","from","from","from","get_rekor_log_entry_body","hash","integrated_time","into","into","into","into","into","into","into","into","into","kind","log_id","log_index","public_key","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","signature","signature","signed_entry_timestamp","spec","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","value","verification","verify_rekor_body","verify_rekor_log_entry","verify_rekor_signature","DIFFERENT","MatchResult","SAME","UNDECIDABLE","borrow","borrow_mut","convert_pem_to_raw","convert_pem_to_verifying_key","convert_raw_to_pem","convert_raw_to_verifying_key","eq","equal_keys","from","hash_sha2_256","hex_to_raw_digest","into","is_hex_digest_match","is_raw_digest_match","looks_like_pem","raw_digest_from_contents","raw_to_hex_digest","try_from","try_into","type_id","verify_signature_raw","DiceChainResult","borrow","borrow_mut","from","into","try_from","try_into","type_id","verify"],"q":[[0,"oak_attestation_verification"],[6,"oak_attestation_verification::claims"],[121,"oak_attestation_verification::endorsement"],[125,"oak_attestation_verification::proto"],[126,"oak_attestation_verification::proto::oak"],[177,"oak_attestation_verification::proto::oak::attestation"],[178,"oak_attestation_verification::proto::oak::attestation::v1"],[814,"oak_attestation_verification::proto::oak::attestation::v1::attestation_results"],[838,"oak_attestation_verification::proto::oak::attestation::v1::binary_reference_value"],[857,"oak_attestation_verification::proto::oak::attestation::v1::endorsements"],[876,"oak_attestation_verification::proto::oak::attestation::v1::reference_values"],[895,"oak_attestation_verification::rekor"],[1024,"oak_attestation_verification::util"],[1049,"oak_attestation_verification::verifier"],[1058,"core::result"],[1059,"serde::de"],[1060,"serde::de"],[1061,"core::fmt"],[1062,"core::fmt"],[1063,"serde::ser"],[1064,"serde::ser"],[1065,"core::cmp"],[1066,"core::hash"],[1067,"bytes::buf::buf_mut"],[1068,"prost::encoding"],[1069,"prost::encoding"],[1070,"bytes::buf::buf_impl"],[1071,"alloc::vec"],[1072,"p256::ecdsa"],[1073,"alloc::string"]],"d":["Contains structs for specifying in-toto statements and …","Verifies binary endorsements as coming from Transparent …","","This module provides structs for representing a Rekor …","","Provides verification based on evidence, endorsements and …","PredicateType which identifies a V1 Claim, for in-toto …","Metadata about an artifact that serves as the evidence for …","Detailed content of a claim.","","Validity time range of an issued claim.","Inner type for a simple claim with no further fields.","","ClaimType for endorsements. Expected to be used together …","","","","URI representing in-toto v01 statements. This is constant …","Represents a generic statement that binds a predicate to a …","","A software artifact identified by its name and a set of …","","","","","","","","","","","","","","","","","","A detailed description of the claim, as an optional …","URI indicating the type of the claim. It determines the …","","","","","","","","Collection of cryptographic digests for the contents of …","","","","","","","A collection of artifacts that support the truth of the …","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Assembles digests found in endorsement statement into a …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","The timestamp (encoded as an Epoch time) when the claim …","","The timestamp (encoded as an Epoch time) from which the …","The timestamp (encoded as an Epoch time) from which the …","Converts the given byte array into an endorsement …","","","","","Optional field specifying the role of this evidence within …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","URI uniquely identifies this evidence.","Checks that the given statement is a valid claim:","Checks that the given endorsement statement is a valid and …","Validity duration of this claim.","Checks that the input claim has a validity duration, and …","Compares the digest contained in the endorsement against …","Verifies the binary endorsement for a given measurement.","Verifies endorsement against the given reference values.","Verifies that the endorser public key coincides with the …","","Similar to RawDigest, but contains hex-encoded hashes for …","Contains various digest formats for the same underlying …","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Keys used by the application to derive encryption session …","","Represents an application running under Oak Restricted …","Represents a verification result. Can be extended to …","","","","","","","Verifies that the field contains at least one of the given …","Verifies the transparency log entry, including signatures …","Endorsement contains statements that some entity (e.g. a …","Attestation Evidence used by the client to the identity of …","Reference value for a file including its digests.","","TBD","","Reference values of the kernel layer, as measured by …","DICE layer evidence containing a certificate signed by the …","","","","","","","Evidence generated by the Layer0.","","","Verifies that a particular string is equal to at least one …","","","This proto defines the layered DICE Attestation Evidence.","Endorsement for binaries from the Transparent Release …","","","","If true, will skip the check that the TEE is not in debug …","","Switches between AMD and Intel based on TeePlatform value.","Application keys signed by the penultimate layer’s ECA …","","","String value of the enum field names used in the ProtoBuf …","Nested message and enum types in <code>AttestationResults</code>.","","","Verifies the application binary based on endorsement.","Verifies the container binary based on endorsement.","Nested message and enum types in <code>BinaryReferenceValue</codeerifies configuration with respect to the application …","Verifies configuration with respect to the container …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Allowable digests for the file.","","Certificate signing current layer’s measurements and the …","Serialized ECA public key for Layer0 that is signed by the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Contains the verified public key for encryption whenever …","Certificate signing the encryption public key.","JSON string comtaining the endorsement statement for the …","The signature for the endorsement.","Nested message and enum types in <code>Endorsements</code>.","The endorser’s public signing key for signature …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","TBD: Add conditions on all kinds of fields contained in the","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Converts an <code>i32</code> to a <code>TeePlatform</code>, or <code>None</code> if <code>value</code> is not …","Creates an enum from field names used in the ProtoBuf …","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if <code>value</code> is a variant of <code>TeePlatform</code>.","","Verifies the command line by which the kernel was built. …","","Verifies the kernel binary based on endorsement.","","","","","","One part of the kernel is modified by the system after …","","Layer1..LayerN-1 attestation evidence.","","","","","Absolute path to the file in question, or just the file …","Returns the enum value of <code>platform</code>, or the default if the …","The platform providing the attestation report.","Provides the reason why verification did not pass, on …","Nested message and enum types in <code>ReferenceValues</code>.","The log entry as proof of inclusion of the endorsement …","Rekor’s public signing key for signature verification.","TEE-specific attestation report acting as a non-standard …","","","Layer0 attestation evidence.","","","Sets <code>platform</code> to the provided enum value.","Sets <code>status</code> to the provided enum value.","Contains the verified public key for signing whenever the …","Certificate signing the signing public key.","Endorsement of the Stage0 binary.","Verifies the stage0 binary implicitly contained in the …","Returns the enum value of <code>status</code>, or the default if the …","Indicates whether the verification passed and perhaps more.","","Verifies the system image binary based on endorsement.","","","The serialized TEE certificate(s). The details of the …","Serialized X.509 TEE certificate.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","String value of the enum field names used in the ProtoBuf …","","","","","","","","","Returns the argument unchanged.","Converts an <code>i32</code> to a <code>Status</code>, or <code>None</code> if <code>value</code> is not a …","Creates an enum from field names used in the ProtoBuf …","","Calls <code>U::from(self)</code>.","Returns <code>true</code> if <code>value</code> is a variant of <code>Status</code>.","","","","","","Explicitly verifies digests if the client has them.","Verifies the endorsement of the underlying binary.","Deliberately skips a verification step, rather than …","","","","","","Encodes the message to a buffer.","Returns the encoded length of the message without a length …","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Decodes an instance of the message from a buffer, and …","","","","","","","","","","","","","Encodes the message to a buffer.","Returns the encoded length of the message without a length …","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Decodes an instance of the message from a buffer, and …","","","","","","","","","","","","","Encodes the message to a buffer.","Returns the encoded length of the message without a length …","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Decodes an instance of the message from a buffer, and …","","","","","Struct representing the body in a Rekor LogEntry.","Struct representing the hashed data in the body of a Rekor …","Struct representing a signature in the body of a Rekor …","Struct representing a hash digest. Based on …","Struct representing a Rekor LogEntry. Based on …","Struct representing a verification object in a Rekor …","Struct representing a public key included in the body of a …","Convenient struct for verifying the <code>signedEntryTimestamp</code> …","Struct representing the <code>spec</code> in the body of a Rekor …","","","We cannot directly use the type <code>Body</code> here, since body is …","","","","","","","","","","","","","","","","","","","Canonicalized JSON representation, based on RFC 8785 …","Base64 content that is signed.","Base64 content of a public key.","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Parses the given bytes into a Rekor <code>LogEntry</code> object, and …","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","This is the SHA256 hash of the DER-encoded public key for …","Minimum: 0","","","","","","","","","","The signature over the canonicalized JSON document.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Includes a signature over the body, integratedTime, logID, …","Verifies the signature in the body over the contents.","Verifies a Rekor LogEntry. This includes verifying:","Parses a blob into a Rekor log entry and verifies the …","","","","","","","Converts a PEM key to raw. Will panic if it does not look …","Converts a PEM-encoded x509/PKIX public key to a verifying …","Converts a raw public key to PEM format.","Converts a raw public key to a verifying key.","","Compares two ECDSA public keys. Instead of comparing the …","Returns the argument unchanged.","","Converts hex digest to raw digest.","Calls <code>U::from(self)</code>.","Compares two hex digests.","Compares two raw digests.","Makes a plausible guess whether the public key is in PEM …","Computes various digest formats of a binary array. The …","Converts raw digest to hex digest.","","","","Verifies the signature over the contents using the public …","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","Verifies entire setup by forwarding to individual setup …"],"i":[0,0,0,0,0,0,0,0,0,15,0,0,0,0,0,0,15,0,0,15,0,15,16,4,1,4,15,6,7,8,9,1,4,15,6,7,8,9,6,6,1,4,6,7,8,9,1,8,1,4,6,7,8,9,6,1,4,15,6,7,8,9,1,4,15,6,7,8,9,0,1,4,15,6,7,8,9,6,1,7,7,0,16,4,16,4,8,1,4,6,7,8,9,16,4,1,4,15,6,7,8,9,1,4,15,6,7,8,9,1,4,15,6,7,8,9,8,0,0,6,0,0,0,0,0,0,0,0,0,27,17,27,17,27,17,27,17,27,17,27,17,27,17,27,17,27,17,27,17,27,17,27,17,27,17,27,17,27,17,27,17,27,17,27,17,27,17,27,17,27,17,27,17,27,17,27,17,0,0,29,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,29,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,29,33,54,51,51,50,44,37,58,29,0,35,36,56,57,0,31,32,33,34,35,36,37,38,39,40,41,42,43,44,29,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,31,32,33,34,35,36,37,38,39,40,41,42,43,44,29,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,31,32,33,34,35,36,37,38,39,40,41,42,43,44,29,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,31,32,33,34,35,36,37,38,39,40,41,42,43,44,29,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,29,60,60,35,36,56,57,38,59,31,32,33,34,35,36,37,38,39,40,41,42,43,44,29,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,48,53,42,41,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,63,43,31,31,0,46,31,32,33,34,35,36,37,38,39,40,41,42,43,44,29,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,60,51,31,32,33,34,35,36,37,38,39,40,41,42,43,44,29,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,31,32,33,34,35,36,37,38,39,40,41,42,43,44,29,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,63,29,29,29,33,54,50,31,32,33,34,35,36,37,38,39,40,41,42,43,44,29,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,29,33,54,33,54,37,38,58,59,33,54,60,44,61,33,54,29,48,41,41,63,0,31,46,41,37,38,44,58,59,41,63,63,43,32,51,63,63,34,55,38,59,32,39,31,32,33,34,35,36,37,38,39,40,41,42,43,44,29,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,31,32,33,34,35,36,37,38,39,40,41,42,43,44,29,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,31,32,33,34,35,36,37,38,39,40,41,42,43,44,29,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,40,47,62,31,32,33,34,35,36,37,38,39,40,41,42,43,44,29,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,49,69,0,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,70,70,70,0,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,77,77,77,0,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,78,78,78,0,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,0,0,0,0,0,0,0,0,0,83,80,79,87,79,80,81,82,83,84,85,86,87,79,80,81,82,83,84,85,86,87,84,85,81,79,80,81,82,83,84,85,86,79,80,81,82,83,84,85,86,79,80,81,82,83,84,85,86,84,87,79,80,81,82,83,84,85,86,0,82,79,87,79,80,81,82,83,84,85,86,80,79,79,84,79,80,81,82,83,84,85,86,87,81,86,80,87,87,79,80,81,82,83,84,85,86,87,79,80,81,82,83,84,85,86,87,79,80,81,82,83,84,85,86,83,79,0,0,0,26,0,26,26,26,26,0,0,0,0,26,0,26,0,0,26,0,0,0,0,0,26,26,26,0,0,65,65,65,65,65,65,65,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[-1,[[2,[1]]],3],[-1,[[2,[[4,[-2]]]]],3,5],[-1,[[2,[[6,[-2]]]]],3,5],[-1,[[2,[7]]],3],[-1,[[2,[8]]],3],[-1,[[2,[9]]],3],0,0,[[1,1],10],[[[4,[-1]],[4,[-1]]],10,11],[[[6,[-1]],[6,[-1]]],10,11],[[7,7],10],[[8,8],10],[[9,9],10],0,[[1,12],13],[[[4,[-1]],12],13,14],[[15,12],13],[[[6,[-1]],12],13,14],[[7,12],13],[[8,12],13],[[9,12],13],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[16,[[18,[17]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,[[[20,[19]]],[[18,[16]]]],0,0,0,0,0,[[1,-1],2,21],[[[4,[-1]],-2],2,22,21],[[[6,[-1]],-2],2,22,21],[[7,-1],2,21],[[8,-1],2,21],[[9,-1],2,21],0,0,[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,23,[]],[-1,23,[]],[-1,23,[]],[-1,23,[]],[-1,23,[]],[-1,23,[]],[-1,23,[]],0,[[[4,[[6,[-1]]]]],[[2,[24,15]]],[]],[16,[[2,[24,15]]]],0,[[25,[4,[[6,[-1]]]]],[[18,[24]]],[]],[[[20,[19]],17],[[18,[26]]]],[[25,[20,[19]],[20,[19]],[20,[19]],[20,[19]]],[[18,[24]]]],[[25,16],[[18,[24]]]],[[[20,[19]],[20,[19]]],[[18,[24]]]],0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[27,24],[17,24],[27,27],[17,17],[[-1,-2],24,[],[]],[[-1,-2],24,[],[]],[[],27],[[],17],[27,28],[17,28],[[27,27],10],[[17,17],10],[[27,12],13],[[17,12],13],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,23,[]],[-1,23,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[29,30],0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[31,24],[32,24],[33,24],[34,24],[35,24],[36,24],[37,24],[38,24],[39,24],[40,24],[41,24],[42,24],[43,24],[44,24],[45,24],[46,24],[47,24],[48,24],[49,24],[50,24],[51,24],[52,24],[53,24],[54,24],[55,24],[56,24],[57,24],[58,24],[59,24],[60,24],[61,24],[62,24],[63,24],[31,31],[32,32],[33,33],[34,34],[35,35],[36,36],[37,37],[38,38],[39,39],[40,40],[41,41],[42,42],[43,43],[44,44],[29,29],[45,45],[46,46],[47,47],[48,48],[49,49],[50,50],[51,51],[52,52],[53,53],[54,54],[55,55],[56,56],[57,57],[58,58],[59,59],[60,60],[61,61],[62,62],[63,63],[[-1,-2],24,[],[]],[[-1,-2],24,[],[]],[[-1,-2],24,[],[]],[[-1,-2],24,[],[]],[[-1,-2],24,[],[]],[[-1,-2],24,[],[]],[[-1,-2],24,[],[]],[[-1,-2],24,[],[]],[[-1,-2],24,[],[]],[[-1,-2],24,[],[]],[[-1,-2],24,[],[]],[[-1,-2],24,[],[]],[[-1,-2],24,[],[]],[[-1,-2],24,[],[]],[[-1,-2],24,[],[]],[[-1,-2],24,[],[]],[[-1,-2],24,[],[]],[[-1,-2],24,[],[]],[[-1,-2],24,[],[]],[[-1,-2],24,[],[]],[[-1,-2],24,[],[]],[[-1,-2],24,[],[]],[[-1,-2],24,[],[]],[[-1,-2],24,[],[]],[[-1,-2],24,[],[]],[[-1,-2],24,[],[]],[[-1,-2],24,[],[]],[[-1,-2],24,[],[]],[[-1,-2],24,[],[]],[[-1,-2],24,[],[]],[[-1,-2],24,[],[]],[[-1,-2],24,[],[]],[[-1,-2],24,[],[]],[[-1,-2],24,[],[]],[[29,29],64],0,0,0,0,0,0,0,0,[[],31],[[],32],[[],33],[[],34],[[],35],[[],36],[[],37],[[],38],[[],39],[[],40],[[],41],[[],42],[[],43],[[],44],[[],29],[[],45],[[],46],[[],47],[[],48],[[],49],[[],50],[[],51],[[],52],[[],53],[[],54],[[],55],[[],56],[[],57],[[],58],[[],59],[[],60],[[],61],[[],62],[[],63],0,0,0,0,[31,28],[32,28],[33,28],[34,28],[35,28],[36,28],[37,28],[38,28],[39,28],[40,28],[41,28],[42,28],[43,28],[44,28],[45,28],[46,28],[47,28],[48,28],[49,28],[50,28],[51,28],[52,28],[53,28],[54,28],[55,28],[56,28],[57,28],[58,28],[59,28],[60,28],[61,28],[62,28],[63,28],0,0,0,0,0,0,[[31,31],10],[[32,32],10],[[33,33],10],[[34,34],10],[[35,35],10],[[36,36],10],[[37,37],10],[[38,38],10],[[39,39],10],[[40,40],10],[[41,41],10],[[42,42],10],[[43,43],10],[[44,44],10],[[29,29],10],[[45,45],10],[[46,46],10],[[47,47],10],[[48,48],10],[[49,49],10],[[50,50],10],[[51,51],10],[[52,52],10],[[53,53],10],[[54,54],10],[[55,55],10],[[56,56],10],[[57,57],10],[[58,58],10],[[59,59],10],[[60,60],10],[[61,61],10],[[62,62],10],[[63,63],10],0,0,[[31,12],13],[[32,12],13],[[33,12],13],[[34,12],13],[[35,12],13],[[36,12],13],[[37,12],13],[[38,12],13],[[39,12],13],[[40,12],13],[[41,12],13],[[42,12],13],[[43,12],13],[[44,12],13],[[29,12],13],[[45,12],13],[[46,12],13],[[47,12],13],[[48,12],13],[[49,12],13],[[50,12],13],[[51,12],13],[[52,12],13],[[53,12],13],[[54,12],13],[[55,12],13],[[56,12],13],[[57,12],13],[[58,12],13],[[59,12],13],[[60,12],13],[[61,12],13],[[62,12],13],[[63,12],13],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[18,[65]]],63],[-1,-1,[]],[66,[[67,[29]]]],[30,[[67,[29]]]],[[29,-1],24,68],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[66,10],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[29,29],[[67,[64]]]],0,[41,29],0,0,0,0,0,0,0,0,0,0,0,[[41,29],24],[[63,69],24],0,0,0,0,[63,69],0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],0,0,0,[-1,23,[]],[-1,23,[]],[-1,23,[]],[-1,23,[]],[-1,23,[]],[-1,23,[]],[-1,23,[]],[-1,23,[]],[-1,23,[]],[-1,23,[]],[-1,23,[]],[-1,23,[]],[-1,23,[]],[-1,23,[]],[-1,23,[]],[-1,23,[]],[-1,23,[]],[-1,23,[]],[-1,23,[]],[-1,23,[]],[-1,23,[]],[-1,23,[]],[-1,23,[]],[-1,23,[]],[-1,23,[]],[-1,23,[]],[-1,23,[]],[-1,23,[]],[-1,23,[]],[-1,23,[]],[-1,23,[]],[-1,23,[]],[-1,23,[]],[-1,23,[]],0,0,0,0,0,[69,30],[-1,-2,[],[]],[-1,-2,[],[]],[69,69],[[-1,-2],24,[],[]],[[69,69],64],[[],69],[[69,69],10],[[69,12],13],[-1,-1,[]],[66,[[67,[69]]]],[30,[[67,[69]]]],[[69,-1],24,68],[-1,-2,[],[]],[66,10],[[69,69],[[67,[64]]]],[-1,-2,[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,23,[]],0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[70,70],[[-1,-2],24,[],[]],[[70,-1],24,71],[70,28],[[70,70],10],[[70,12],13],[-1,-1,[]],[-1,-2,[],[]],[[[67,[70]],72,73,-1,74],[[2,[24,75]]],76],[-1,-2,[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,23,[]],0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[77,77],[[-1,-2],24,[],[]],[[77,-1],24,71],[77,28],[[77,77],10],[[77,12],13],[-1,-1,[]],[-1,-2,[],[]],[[[67,[77]],72,73,-1,74],[[2,[24,75]]],76],[-1,-2,[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,23,[]],0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[78,78],[[-1,-2],24,[],[]],[[78,-1],24,71],[78,28],[[78,78],10],[[78,12],13],[-1,-1,[]],[-1,-2,[],[]],[[[67,[78]],72,73,-1,74],[[2,[24,75]]],76],[-1,-2,[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,23,[]],0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,[-1,[[2,[79]]],3],[-1,[[2,[80]]],3],[-1,[[2,[81]]],3],[-1,[[2,[82]]],3],[-1,[[2,[83]]],3],[-1,[[2,[84]]],3],[-1,[[2,[85]]],3],[-1,[[2,[86]]],3],[[79,79],10],[[80,80],10],[[81,81],10],[[82,82],10],[[83,83],10],[[84,84],10],[[85,85],10],[[86,86],10],[[79,12],13],[[80,12],13],[[81,12],13],[[82,12],13],[[83,12],13],[[84,12],13],[[85,12],13],[[86,12],13],0,[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[20,[19]]],[[18,[80]]]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,[[79,-1],2,21],[[80,-1],2,21],[[81,-1],2,21],[[82,-1],2,21],[[83,-1],2,21],[[84,-1],2,21],[[85,-1],2,21],[[86,-1],2,21],0,0,0,0,[-1,[[2,[-2]]],[],[]],[79,[[18,[87]]]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,23,[]],[-1,23,[]],[-1,23,[]],[-1,23,[]],[-1,23,[]],[-1,23,[]],[-1,23,[]],[-1,23,[]],[-1,23,[]],0,0,[[80,[20,[19]]],[[18,[24]]]],[[[20,[19]],[20,[19]],[20,[19]]],[[18,[24]]]],[[[20,[19]],[20,[19]]],[[18,[24]]]],0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[30,[[18,[[88,[19]]]]]],[30,[[18,[89]]]],[[[20,[19]]],90],[[[20,[19]]],[[18,[89]]]],[[26,26],10],[[[20,[19]],[20,[19]]],[[18,[10]]]],[-1,-1,[]],[[[20,[19]]],[[91,[19]]]],[17,[[18,[27]]]],[-1,-2,[],[]],[[17,17],26],[[27,27],26],[30,10],[[[20,[19]]],27],[27,17],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,23,[]],[[[20,[19]],[20,[19]],[20,[19]]],[[18,[24]]]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-1,[]],[-1,-2,[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,23,[]],[[25,44,40,62],[[18,[65]]]]],"c":[],"p":[[3,"Subject",6],[4,"Result",1058],[8,"Deserializer",1059],[3,"Statement",6],[8,"Deserialize",1059],[3,"ClaimPredicate",6],[3,"ClaimValidity",6],[3,"ClaimEvidence",6],[3,"Claimless",6],[15,"bool"],[8,"PartialEq",1060],[3,"Formatter",1061],[6,"Result",1061],[8,"Debug",1061],[4,"InvalidClaimData",6],[6,"EndorsementStatement",6],[3,"HexDigest",126],[6,"Result",1062],[15,"u8"],[15,"slice"],[8,"Serializer",1063],[8,"Serialize",1063],[3,"TypeId",1064],[15,"tuple"],[15,"i64"],[4,"MatchResult",1024],[3,"RawDigest",126],[15,"usize"],[4,"TeePlatform",178],[15,"str"],[3,"TransparentReleaseEndorsement",178],[3,"RootLayerEndorsements",178],[3,"KernelLayerEndorsements",178],[3,"SystemLayerEndorsements",178],[3,"ApplicationLayerEndorsements",178],[3,"ContainerLayerEndorsements",178],[3,"OakRestrictedKernelEndorsements",178],[3,"OakContainersEndorsements",178],[3,"CbEndorsements",178],[3,"Endorsements",178],[3,"RootLayerEvidence",178],[3,"LayerEvidence",178],[3,"ApplicationKeys",178],[3,"Evidence",178],[3,"SkipVerification",178],[3,"EndorsementReferenceValue",178],[3,"BinaryReferenceValue",178],[3,"FileReferenceValue",178],[3,"StringReferenceValue",178],[3,"RootLayerReferenceValues",178],[3,"AmdSevReferenceValues",178],[3,"IntelTdxReferenceValues",178],[3,"Digests",178],[3,"KernelLayerReferenceValues",178],[3,"SystemLayerReferenceValues",178],[3,"ApplicationLayerReferenceValues",178],[3,"ContainerLayerReferenceValues",178],[3,"OakRestrictedKernelReferenceValues",178],[3,"OakContainersReferenceValues",178],[3,"CbLayerReferenceValues",178],[3,"CbReferenceValues",178],[3,"ReferenceValues",178],[3,"AttestationResults",178],[4,"Ordering",1060],[3,"DiceChainResult",1049],[15,"i32"],[4,"Option",1065],[8,"Hasher",1066],[4,"Status",814],[4,"Type",838],[8,"BufMut",1067],[15,"u32"],[4,"WireType",1068],[3,"DecodeContext",1068],[3,"DecodeError",1069],[8,"Buf",1070],[4,"Type",857],[4,"Type",876],[3,"LogEntry",895],[3,"Body",895],[3,"Spec",895],[3,"Data",895],[3,"Hash",895],[3,"GenericSignature",895],[3,"PublicKey",895],[3,"LogEntryVerification",895],[3,"RekorSignatureBundle",895],[3,"Vec",1071],[6,"VerifyingKey",1072],[3,"String",1073],[15,"array"]],"b":[]},\
"oak_channel":{"doc":"","t":"IIIAKKAKDDLLLLLLLLLLLLLLLLLLLF","n":["Channel","Read","Write","client","flush","read_exact","server","write_all","ClientChannelHandle","RequestEncoder","borrow","borrow","borrow_mut","borrow_mut","default","encode_request","from","from","into","into","new","read_response","try_from","try_from","try_into","try_into","type_id","type_id","write_request","start_blocking_server"],"q":[[0,"oak_channel"],[8,"oak_channel::client"],[29,"oak_channel::server"],[30,"anyhow"],[31,"alloc::boxed"],[32,"oak_core::timer"],[33,"core::result"],[34,"core::any"],[35,"oak_core::samplestore"],[36,"micro_rpc"]],"d":["","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","Starts a blocking server that listens for requests on the …"],"i":[0,0,0,0,15,16,0,15,0,0,8,5,8,5,5,5,8,5,8,5,8,8,8,5,8,5,8,5,8,0],"f":[0,0,0,0,[-1,[[2,[1]]],[]],[[-1,[4,[3]]],[[2,[1]]],[]],0,[[-1,[4,[3]]],[[2,[1]]],[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],5],0,[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[7,[6]]],8],[8,[[2,[[1,[0,9]]]]]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,11,[]],[-1,11,[]],0,[[[7,[6]],-1,12],[[2,[13]]],14]],"c":[],"p":[[15,"tuple"],[6,"Result",30],[15,"u8"],[15,"slice"],[3,"RequestEncoder",8],[8,"Channel",0],[3,"Box",31],[3,"ClientChannelHandle",8],[3,"Timer",32],[4,"Result",33],[3,"TypeId",34],[8,"SampleStore",35],[15,"never"],[8,"Transport",36],[8,"Write",0],[8,"Read",0]],"b":[]},\
"oak_client":{"doc":"","t":"DLLLLLLLAALLLALAAAAANDDDDDDDDNDDDDDDDEDNMMMLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMLLLLLLLLLLLLLLLLLLMMMLLLLLLLLLLLLLLLLMMMALLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMLLMMMMMMLMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNNELLLLLLLLLLLLLLLLLLADDDDDMLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMLMMLLLLLLLLLLLLLLLLLLLLLLLLLADDDDDDDDDDDDMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLMLLLLLLLLLLLLMMMMMMMLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMAMAMMAMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNELLLLLLLLLLLLLLLLLLNNELLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLLLLIDILLLKLLLKLLLLLLDDIDIMLLLLLLMLLLKLLLLLLLLLLLLLLLKLLLL","n":["OakClient","borrow","borrow_mut","create","from","into","into_request","invoke","proto","transport","try_from","try_into","type_id","verifier","vzip","oak","attestation","crypto","session","v1","AmdSevSnp","ApplicationKeys","ApplicationLayerEndorsements","CbEndorsements","CertificateAuthority","ContainerLayerEndorsements","DiceData","Endorsements","Evidence","IntelTdx","KernelLayerEndorsements","LayerEvidence","OakContainersEndorsements","OakRestrictedKernelEndorsements","RootLayerEndorsements","RootLayerEvidence","SystemLayerEndorsements","TeePlatform","TransparentReleaseEndorsement","Unspecified","acpi","application_keys","application_layer","as_str_name","binary","binary","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","certificate_authority","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","compare","configuration","configuration","container_layer","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","drop","eca_certificate","eca_private_key","eca_public_key","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encryption_public_key_certificate","endorsement","endorsement_signature","endorsements","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","evidence","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_i32","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_str_name","get_claims","hash","init_ram_fs","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","is_valid","kernel_cmd_line","kernel_image","kernel_layer","kernel_layer","kernel_setup_data","layers","memory_map","partial_cmp","platform","platform","rekor_log_entry","remote_attestation_report","root_layer","root_layer","root_layer","set_platform","signing_public_key_certificate","stage0","system_image","system_layer","tee_certificate","tee_certificate","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","Cb","OakContainers","OakRestrictedKernel","Type","borrow","borrow_mut","clone","clone_into","encode","encoded_len","eq","fmt","from","from_ref","into","into_request","merge","to_owned","try_from","try_into","type_id","vzip","v1","AeadEncryptedMessage","EncryptedRequest","EncryptedResponse","SessionKeys","Signature","associated_data","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","ciphertext","clear","clear","clear","clear","clear","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","default","default","default","default","default","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encrypted_message","encrypted_message","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from_ref","from_ref","from_ref","from_ref","from_ref","into","into","into","into","into","into_request","into_request","into_request","into_request","into_request","nonce","request_key","response_key","serialized_encapsulated_public_key","serialized_encapsulated_public_key","signature","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","v1","ApplicationData","AttestationBundle","AttestationEndorsement","AttestationEvidence","GetEncryptionKeyRequest","GetEncryptionKeyResponse","GetPublicKeyRequest","GetPublicKeyResponse","InvokeRequest","InvokeResponse","RequestWrapper","ResponseWrapper","application_data","attestation","attestation_bundle","attestation_endorsement","attestation_evidence","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","config","default","default","default","default","default","default","default","default","default","default","default","default","digest","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encrypted_attestation_bundle","encrypted_encryption_key","encrypted_request","encrypted_response","encryption_public_key","endorsed_evidence","endorsements","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","evidence","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","into","into","into","into","into","into","into","into","into","into","into","into","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","request","request_wrapper","response","response_wrapper","signed_application_data","signing_public_key","streaming_session_client","tee_certificates","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","GetPublicKeyRequest","InvokeRequest","Request","borrow","borrow_mut","clone","clone_into","encode","encoded_len","eq","fmt","from","from_ref","into","into_request","merge","to_owned","try_from","try_into","type_id","vzip","GetPublicKeyResponse","InvokeResponse","Response","borrow","borrow_mut","clone","clone_into","encode","encoded_len","eq","fmt","from","from_ref","into","into_request","merge","to_owned","try_from","try_into","type_id","vzip","StreamingSessionClient","accept_compressed","borrow","borrow_mut","clone","clone_into","connect","fmt","from","from_ref","into","into_request","max_decoding_message_size","max_encoding_message_size","new","send_compressed","stream","to_owned","try_from","try_into","type_id","vzip","with_interceptor","with_origin","EvidenceProvider","GrpcStreamingTransport","Transport","borrow","borrow_mut","from","get_evidence","get_evidence","into","into_request","invoke","invoke","new","try_from","try_into","type_id","vzip","AmdSevSnpVerifier","Evidence","EvidenceProvider","ReferenceValue","Verifier","binary_hash","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","enclave_public_key","from","from","from","get_evidence","into","into","into","into_request","into_request","into_request","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","verify","verify","vzip","vzip","vzip"],"q":[[0,"oak_client"],[15,"oak_client::proto"],[16,"oak_client::proto::oak"],[19,"oak_client::proto::oak::attestation"],[20,"oak_client::proto::oak::attestation::v1"],[405,"oak_client::proto::oak::attestation::v1::endorsements"],[427,"oak_client::proto::oak::crypto"],[428,"oak_client::proto::oak::crypto::v1"],[533,"oak_client::proto::oak::session"],[534,"oak_client::proto::oak::session::v1"],[785,"oak_client::proto::oak::session::v1::request_wrapper"],[806,"oak_client::proto::oak::session::v1::response_wrapper"],[827,"oak_client::proto::oak::session::v1::streaming_session_client"],[851,"oak_client::transport"],[868,"oak_client::verifier"],[905,"anyhow"],[906,"tonic::request"],[907,"alloc::vec"],[908,"core::result"],[909,"core::any"],[910,"core::cmp"],[911,"core::fmt"],[912,"core::fmt"],[913,"oak_attestation::dice"],[914,"core::option"],[915,"coset::cwt"],[916,"anyhow"],[917,"oak_dice::evidence"],[918,"prost::encoding"],[919,"prost::encoding"],[920,"bytes::buf::buf_impl"],[921,"core::fmt"],[922,"tonic::body"],[923,"tonic::client::service"],[924,"core::clone"],[925,"tonic::transport::channel"],[926,"tonic::transport::error"],[927,"tonic::transport::channel::endpoint"],[928,"core::convert"],[929,"core::fmt"],[930,"tonic::response"],[931,"tonic::status"],[932,"tonic::request"],[933,"http::request"],[934,"tower_service"],[935,"tonic::service::interceptor"],[936,"core::future::future"],[937,"alloc::boxed"],[938,"core::pin"]],"d":["Client for connecting to Oak. Represents a Relying Party …","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","Keys used by the application to derive encryption session …","","","Message for passing embedded certificate authority …","","Message that is sent between DICE layers.","Endorsement contains statements that some entity (e.g. a …","Attestation Evidence used by the client to the identity of …","","","DICE layer evidence containing a certificate signed by the …","","","","Evidence generated by the Layer0.","","This proto defines the layered DICE Attestation Evidence.","Endorsement for binaries from the Transparent Release …","","","Application keys signed by the penultimate layer’s ECA …","","String value of the enum field names used in the ProtoBuf …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Certificate signing current layer’s measurements and the …","ECA private key that will be used by a layer to sign a …","Serialized ECA public key for Layer0 that is signed by the …","","","","","","","","","","","","","","","","","Certificate signing the encryption public key.","JSON string comtaining the endorsement statement for the …","The signature for the endorsement.","Nested message and enum types in <code>Endorsements</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Converts an <code>i32</code> to a <code>TeePlatform</code>, or <code>None</code> if <code>value</code> is not …","","","","","","","","","","","","","","","","","","Creates an enum from field names used in the ProtoBuf …","Extracts the <code>ClaimsSet</code> encoded in the ECA certificate of …","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","Returns <code>true</code> if <code>value</code> is a variant of <code>TeePlatform</code>.","","","","","","Layer1..LayerN-1 attestation evidence.","","","Returns the enum value of <code>platform</code>, or the default if the …","The platform providing the attestation report.","The log entry as proof of inclusion of the endorsement …","TEE-specific attestation report acting as a non-standard …","Layer0 attestation evidence.","","","Sets <code>platform</code> to the provided enum value.","Certificate signing the signing public key.","Endorsement of the Stage0 binary.","","","The serialized TEE certificate(s). The details of the …","Serialized X.509 TEE certificate.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Encodes the message to a buffer.","Returns the encoded length of the message without a length …","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","Decodes an instance of the message from a buffer, and …","","","","","","","Message encrypted with Authenticated Encryption with …","Request message encrypted using Hybrid Public Key …","Response message encrypted Hybrid Public Key Encryption …","Envelope containing session keys required to …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Message encrypted with Authenticated Encryption with …","Message encrypted with Authenticated Encryption with …","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","AEAD key for encrypting/decrypting client requests.","AEAD key for encrypting/decrypting enclave responses.","Returns the value of <code>serialized_encapsulated_public_key</code>, …","Ephemeral Diffie-Hellman client public key that is needed …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","AttestationBundle contains the information that the …","AttestationEndorsement contains statements that some …","AttestationEvidence contains all the information that …","","","","","","","","","The optional application-specific data.","The serialized attestation report binding the public key.","The enclave’s signing and encryption public keys and …","Supporting evidence required for verifying the integrity …","Attestation evidence from the enclave.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The serialized application configuration. The format of …","","","","","","","","","","","","","The cryptographic digest of the application, of the form …","","","","","","","","","","","","","Encrypted attestation evidence of the dependent enclave.","Encrypted private key of the leader enclave.","Body of the request, encrypted using Hybrid Public Key …","Body of the request, encrypted using Hybrid Public Key …","The serialized public key part of the enclave encryption …","Attestation evidence and public key.","Thea attestation endorsements.","","","","","","","","","","","","","The DICE attestation evidence.","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","Nested message and enum types in <code>RequestWrapper</code>.","","Nested message and enum types in <code>ResponseWrapper</code>.","The signature over the application_data, signed by the …","The serialized public key part of the enclave signing key. …","Generated client implementations.","The serialized TEE certificate(s). The details of the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Encodes the message to a buffer.","Returns the encoded length of the message without a length …","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","Decodes an instance of the message from a buffer, and …","","","","","","","","","","","","","Encodes the message to a buffer.","Returns the encoded length of the message without a length …","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","Decodes an instance of the message from a buffer, and …","","","","","","Service definition for streaming communication with an Oak …","Enable decompressing responses.","","","","","Attempt to create a new client by connecting to a given …","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","Limits the maximum size of a decoded message.","Limits the maximum size of an encoded message.","","Compress requests with the given encoding.","Used to send a sequence of messages ensuring that they are …","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","Attestation evidence used to verify the validity of the …","","Reference values used by the verifier to appraise the …","Verifier that appraises the attestation evidence and …","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","",""],"i":[0,1,1,1,1,1,1,1,0,0,1,1,1,0,1,0,0,0,0,0,11,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,11,22,17,26,11,24,25,13,15,16,17,11,18,19,20,21,22,23,24,25,26,27,28,29,13,15,16,17,11,18,19,20,21,22,23,24,25,26,27,28,29,19,13,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,13,15,16,17,11,18,19,20,21,22,23,24,25,26,27,28,29,13,15,16,17,11,18,19,20,21,22,23,24,25,26,27,28,29,11,11,24,25,27,13,15,16,17,11,18,19,20,21,22,23,24,25,26,27,28,29,19,15,18,13,13,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,16,20,20,0,13,15,16,17,11,18,19,20,21,22,23,24,25,26,27,28,29,11,11,11,11,19,13,15,16,17,11,18,19,20,21,22,23,24,25,26,27,28,29,13,15,16,17,11,11,18,19,19,20,21,22,23,24,25,26,27,28,29,11,13,15,16,17,11,18,19,20,21,22,23,24,25,26,27,28,29,11,15,11,22,13,15,16,17,11,18,19,20,21,22,23,24,25,26,27,28,29,13,15,16,17,11,18,19,20,21,22,23,24,25,26,27,28,29,11,22,22,26,27,22,17,22,11,13,13,20,13,17,26,27,13,16,21,23,27,21,28,13,15,16,17,11,18,19,20,21,22,23,24,25,26,27,28,29,13,13,15,15,16,16,17,17,11,18,19,19,20,21,22,23,24,25,26,27,28,29,13,15,16,17,11,18,19,20,21,22,23,24,25,26,27,28,29,29,13,15,16,17,11,18,19,20,21,22,23,24,25,26,27,28,29,13,15,16,17,11,18,19,20,21,22,23,24,25,26,27,28,29,47,47,47,0,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,0,0,0,0,0,0,56,54,55,56,57,58,54,55,56,57,58,56,54,55,56,57,58,54,55,56,57,58,54,55,56,57,58,54,55,56,57,58,54,55,56,57,58,54,55,54,55,56,57,58,54,55,56,57,58,54,55,56,57,58,54,55,56,57,58,54,55,56,57,58,54,55,56,57,58,56,57,57,54,54,58,54,55,56,57,58,54,55,56,57,58,54,55,56,57,58,54,55,56,57,58,54,55,56,57,58,0,0,0,0,0,0,0,0,0,0,0,0,0,61,59,64,60,60,59,60,61,62,63,64,65,66,67,68,69,70,59,60,61,62,63,64,65,66,67,68,69,70,59,60,61,62,63,64,65,66,67,68,69,70,59,60,61,62,63,64,65,66,67,68,69,70,59,60,61,62,63,64,65,66,67,68,69,70,62,59,60,61,62,63,64,65,66,67,68,69,70,62,59,60,61,62,63,64,65,66,67,68,69,70,67,68,65,66,59,68,60,59,60,61,62,63,64,65,66,67,68,69,70,60,59,60,61,62,63,64,65,66,67,68,69,70,59,60,61,62,63,64,65,66,67,68,69,70,59,60,61,62,63,64,65,66,67,68,69,70,59,60,61,62,63,64,65,66,67,68,69,70,59,60,61,62,63,64,65,66,67,68,69,70,69,0,70,0,59,59,0,61,59,60,61,62,63,64,65,66,67,68,69,70,59,60,61,62,63,64,65,66,67,68,69,70,59,60,61,62,63,64,65,66,67,68,69,70,59,60,61,62,63,64,65,66,67,68,69,70,59,60,61,62,63,64,65,66,67,68,69,70,72,72,0,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,73,73,0,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,0,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,0,0,0,96,96,96,4,96,96,96,3,96,96,96,96,96,96,0,0,0,0,0,98,97,98,99,97,98,99,97,97,98,99,100,97,98,99,97,98,99,97,98,99,97,98,99,97,98,99,101,99,97,98,99],"f":[0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[2,[[1,[-1]]]]],[3,4]],[-1,-1,[]],[-1,-2,[],[]],[-1,[[5,[-2]]],[],[]],[[[1,[-1]],[7,[6]]],[[2,[[8,[6]]]]],[3,4]],0,0,[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,10,[]],0,[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[11,12],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[13,14],[15,14],[16,14],[17,14],[18,14],[19,14],[20,14],[21,14],[22,14],[23,14],[24,14],[25,14],[26,14],[27,14],[28,14],[29,14],[13,13],[15,15],[16,16],[17,17],[11,11],[18,18],[19,19],[20,20],[21,21],[22,22],[23,23],[24,24],[25,25],[26,26],[27,27],[28,28],[29,29],[[-1,-2],14,[],[]],[[-1,-2],14,[],[]],[[-1,-2],14,[],[]],[[-1,-2],14,[],[]],[[-1,-2],14,[],[]],[[-1,-2],14,[],[]],[[-1,-2],14,[],[]],[[-1,-2],14,[],[]],[[-1,-2],14,[],[]],[[-1,-2],14,[],[]],[[-1,-2],14,[],[]],[[-1,-2],14,[],[]],[[-1,-2],14,[],[]],[[-1,-2],14,[],[]],[[-1,-2],14,[],[]],[[-1,-2],14,[],[]],[[-1,-2],14,[],[]],[[11,11],30],[[-1,-2],30,[],[]],0,0,0,[[],13],[[],15],[[],16],[[],17],[[],11],[[],18],[[],19],[[],20],[[],21],[[],22],[[],23],[[],24],[[],25],[[],26],[[],27],[[],28],[[],29],[19,14],0,0,0,[13,31],[15,31],[16,31],[17,31],[18,31],[19,31],[20,31],[21,31],[22,31],[23,31],[24,31],[25,31],[26,31],[27,31],[28,31],[29,31],0,0,0,0,[[13,13],32],[[15,15],32],[[16,16],32],[[17,17],32],[[11,11],32],[[18,18],32],[[19,19],32],[[20,20],32],[[21,21],32],[[22,22],32],[[23,23],32],[[24,24],32],[[25,25],32],[[26,26],32],[[27,27],32],[[28,28],32],[[29,29],32],[[-1,-2],32,[],[]],[[-1,-2],32,[],[]],[[-1,-2],32,[],[]],[[-1,-2],32,[],[]],0,[[13,33],[[9,[14,34]]]],[[15,33],[[9,[14,34]]]],[[16,33],[[9,[14,34]]]],[[17,33],[[9,[14,34]]]],[[11,33],[[9,[14,34]]]],[[18,33],[[9,[14,34]]]],[[19,33],[[9,[14,34]]]],[[20,33],[[9,[14,34]]]],[[21,33],[[9,[14,34]]]],[[22,33],[[9,[14,34]]]],[[23,33],[[9,[14,34]]]],[[24,33],[[9,[14,34]]]],[[25,33],[[9,[14,34]]]],[[26,33],[[9,[14,34]]]],[[27,33],[[9,[14,34]]]],[[28,33],[[9,[14,34]]]],[[29,33],[[9,[14,34]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[35,11],[-1,-1,[]],[36,19],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[37,[[38,[11]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[12,[[38,[11]]]],[15,[[9,[39,40]]]],[[11,-1],14,41],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[37,32],0,0,0,0,0,0,0,[[11,11],[[38,[30]]]],[13,11],0,0,0,0,0,0,[[13,11],14],0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[42,[[9,[13,40]]]],[-1,[[9,[-2]]],[],[]],[43,[[9,[15,40]]]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[44,[[9,[16,40]]]],[45,[[9,[17,40]]]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[46,[[9,[19,40]]]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],0,[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[47,47],[[-1,-2],14,[],[]],[[47,-1],14,48],[47,31],[[47,47],32],[[47,33],[[9,[14,34]]]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,[[5,[-2]]],[],[]],[[[38,[47]],49,50,-1,51],[[9,[14,52]]],53],[-1,-2,[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,10,[]],[-1,-2,[],[]],0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[54,14],[55,14],[56,14],[57,14],[58,14],[54,54],[55,55],[56,56],[57,57],[58,58],[[-1,-2],14,[],[]],[[-1,-2],14,[],[]],[[-1,-2],14,[],[]],[[-1,-2],14,[],[]],[[-1,-2],14,[],[]],[[],54],[[],55],[[],56],[[],57],[[],58],[54,31],[55,31],[56,31],[57,31],[58,31],0,0,[[54,54],32],[[55,55],32],[[56,56],32],[[57,57],32],[[58,58],32],[[54,33],[[9,[14,34]]]],[[55,33],[[9,[14,34]]]],[[56,33],[[9,[14,34]]]],[[57,33],[[9,[14,34]]]],[[58,33],[[9,[14,34]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],0,0,0,[54,[[7,[6]]]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[59,14],[60,14],[61,14],[62,14],[63,14],[64,14],[65,14],[66,14],[67,14],[68,14],[69,14],[70,14],[59,59],[60,60],[61,61],[62,62],[63,63],[64,64],[65,65],[66,66],[67,67],[68,68],[69,69],[70,70],[[-1,-2],14,[],[]],[[-1,-2],14,[],[]],[[-1,-2],14,[],[]],[[-1,-2],14,[],[]],[[-1,-2],14,[],[]],[[-1,-2],14,[],[]],[[-1,-2],14,[],[]],[[-1,-2],14,[],[]],[[-1,-2],14,[],[]],[[-1,-2],14,[],[]],[[-1,-2],14,[],[]],[[-1,-2],14,[],[]],0,[[],59],[[],60],[[],61],[[],62],[[],63],[[],64],[[],65],[[],66],[[],67],[[],68],[[],69],[[],70],0,[59,31],[60,31],[61,31],[62,31],[63,31],[64,31],[65,31],[66,31],[67,31],[68,31],[69,31],[70,31],0,0,0,0,0,0,0,[[59,59],32],[[60,60],32],[[61,61],32],[[62,62],32],[[63,63],32],[[64,64],32],[[65,65],32],[[66,66],32],[[67,67],32],[[68,68],32],[[69,69],32],[[70,70],32],0,[[59,33],71],[[60,33],71],[[61,33],71],[[62,33],71],[[63,33],71],[[64,33],71],[[65,33],71],[[66,33],71],[[67,33],71],[[68,33],71],[[69,33],71],[[70,33],71],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[72,72],[[-1,-2],14,[],[]],[[72,-1],14,48],[72,31],[[72,72],32],[[72,33],71],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,[[5,[-2]]],[],[]],[[[38,[72]],49,50,-1,51],[[9,[14,52]]],53],[-1,-2,[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,10,[]],[-1,-2,[],[]],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[73,73],[[-1,-2],14,[],[]],[[73,-1],14,48],[73,31],[[73,73],32],[[73,33],71],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,[[5,[-2]]],[],[]],[[[38,[73]],49,50,-1,51],[[9,[14,52]]],53],[-1,-2,[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,10,[]],[-1,-2,[],[]],0,[[[74,[-1]],75],[[74,[-1]]],[[77,[76]]]],[-1,-2,[],[]],[-1,-2,[],[]],[[[74,[-1]]],[[74,[-1]]],78],[[-1,-2],14,[],[]],[-1,[[9,[[74,[79]],80]]],[[82,[81]]]],[[[74,[-1]],33],71,83],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,[[5,[-2]]],[],[]],[[[74,[-1]],31],[[74,[-1]]],[[77,[76]]]],[[[74,[-1]],31],[[74,[-1]]],[[77,[76]]]],[-1,[[74,[-1]]],[[77,[76]]]],[[[74,[-1]],75],[[74,[-1]]],[[77,[76]]]],[[[74,[-1]],-2],[[9,[[85,[[84,[70]]]],86]]],[[77,[76]]],87],[-1,-2,[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,10,[]],[-1,-2,[],[]],[[-1,-2],[[74,[[88,[-1,-2]]]]],[[90,[[89,[76]]]],[77,[76]]],91],[[-1,92],[[74,[-1]]],[[77,[76]]]],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-1,[]],[-1,[[95,[[94,[93]]]]],[]],[96,[[95,[[94,[93]]]]]],[-1,-2,[],[]],[-1,[[5,[-2]]],[],[]],[[-1,54],[[95,[[94,[93]]]]],[]],[[96,54],[[95,[[94,[93]]]]]],[[[74,[79]]],96],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,10,[]],[-1,-2,[],[]],0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,[[2,[97]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[[-1,97,98],[[2,[14]]],[]],[[99,97,98],[[2,[14]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]]],"c":[549,550],"p":[[3,"OakClient",0],[6,"Result",905],[8,"Transport",851],[8,"EvidenceProvider",851],[3,"Request",906],[15,"u8"],[15,"slice"],[3,"Vec",907],[4,"Result",908],[3,"TypeId",909],[4,"TeePlatform",20],[15,"str"],[3,"RootLayerEvidence",20],[15,"tuple"],[3,"LayerEvidence",20],[3,"ApplicationKeys",20],[3,"Evidence",20],[3,"CertificateAuthority",20],[3,"DiceData",20],[3,"TransparentReleaseEndorsement",20],[3,"RootLayerEndorsements",20],[3,"KernelLayerEndorsements",20],[3,"SystemLayerEndorsements",20],[3,"ApplicationLayerEndorsements",20],[3,"ContainerLayerEndorsements",20],[3,"OakRestrictedKernelEndorsements",20],[3,"OakContainersEndorsements",20],[3,"CbEndorsements",20],[3,"Endorsements",20],[4,"Ordering",910],[15,"usize"],[15,"bool"],[3,"Formatter",911],[3,"Error",911],[4,"TeePlatform",912],[3,"DiceBuilder",913],[15,"i32"],[4,"Option",914],[3,"ClaimsSet",915],[3,"Error",905],[8,"Hasher",916],[3,"RootLayerEvidence",912],[3,"LayerEvidence",912],[3,"ApplicationKeys",912],[3,"Evidence",912],[3,"Stage0DiceData",912],[4,"Type",405],[8,"BufMut",917],[15,"u32"],[4,"WireType",918],[3,"DecodeContext",918],[3,"DecodeError",919],[8,"Buf",920],[3,"EncryptedRequest",428],[3,"EncryptedResponse",428],[3,"AeadEncryptedMessage",428],[3,"SessionKeys",428],[3,"Signature",428],[3,"AttestationEvidence",534],[3,"AttestationBundle",534],[3,"AttestationEndorsement",534],[3,"ApplicationData",534],[3,"GetPublicKeyRequest",534],[3,"GetPublicKeyResponse",534],[3,"InvokeRequest",534],[3,"InvokeResponse",534],[3,"GetEncryptionKeyRequest",534],[3,"GetEncryptionKeyResponse",534],[3,"RequestWrapper",534],[3,"ResponseWrapper",534],[6,"Result",911],[4,"Request",785],[4,"Response",806],[3,"StreamingSessionClient",827],[4,"CompressionEncoding",921],[6,"BoxBody",922],[8,"GrpcService",923],[8,"Clone",924],[3,"Channel",925],[3,"Error",926],[3,"Endpoint",927],[8,"TryInto",928],[8,"Debug",911],[3,"Streaming",929],[3,"Response",930],[3,"Status",931],[8,"IntoStreamingRequest",906],[3,"InterceptedService",932],[3,"Request",933],[8,"Service",934],[8,"Interceptor",932],[3,"Uri",935],[8,"Future",936],[3,"Box",937],[3,"Pin",938],[3,"GrpcStreamingTransport",851],[3,"Evidence",868],[3,"ReferenceValue",868],[3,"AmdSevSnpVerifier",868],[8,"EvidenceProvider",868],[8,"Verifier",868]],"b":[]},\
"oak_containers_hello_world_trusted_app":{"doc":"","t":"AF","n":["app_service","create"],"q":[[0,"oak_containers_hello_world_trusted_app"],[1,"oak_containers_hello_world_trusted_app::app_service"],[2,"tokio::net::tcp::listener"],[3,"alloc::vec"],[4,"oak_containers_sdk::crypto"],[5,"anyhow"],[6,"core::result"]],"d":["",""],"i":[0,0],"f":[0,[[1,[3,[2]],4],[[7,[5,6]]]]],"c":[],"p":[[3,"TcpListener",2],[15,"u8"],[3,"Vec",3],[3,"InstanceEncryptionKeyHandle",4],[15,"tuple"],[3,"Error",5],[4,"Result",6]],"b":[]},\
"oak_containers_hello_world_untrusted_app":{"doc":"","t":"DLLLLLLLLLLLLL","n":["UntrustedApp","borrow","borrow_mut","create","from","get_endorsed_evidence","hello","into","into_request","kill","try_from","try_into","type_id","vzip"],"q":[[0,"oak_containers_hello_world_untrusted_app"],[14,"oak_containers_launcher"],[15,"core::error"],[16,"alloc::boxed"],[17,"core::result"],[18,"oak_attestation::proto::oak::session::v1"],[19,"anyhow"],[20,"oak_crypto::proto::oak::crypto::v1"],[21,"oak_crypto::proto::oak::crypto::v1"],[22,"core::any"]],"d":["","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","",""],"i":[0,2,2,2,2,2,2,2,2,2,2,2,2,2],"f":[0,[-1,-2,[],[]],[-1,-2,[],[]],[1,[[5,[2,[4,[3]]]]]],[-1,-1,[]],[2,[[7,[6]]]],[[2,8],[[7,[9]]]],[-1,-2,[],[]],[-1,[[10,[-2]]],[],[]],[2,11],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,12,[]],[-1,-2,[],[]]],"c":[],"p":[[3,"Args",14],[3,"UntrustedApp",0],[8,"Error",15],[3,"Box",16],[4,"Result",17],[3,"AttestationBundle",18],[6,"Result",19],[3,"EncryptedRequest",20],[3,"EncryptedResponse",20],[3,"Request",21],[15,"tuple"],[3,"TypeId",22]],"b":[]},\
"oak_containers_launcher":{"doc":"","t":"DDLLLLLLLLLLLLLLLLLLLLLLLFALLLLLLLLLLLAAAAAAANDDDDDDDDNDDDDDDDEDNMMMLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMLLLLLLLLLLLLLLLLLLMMMLLLLLLLLLLLLLLLLMMMALLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMLLMMMMMMLMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNNELLLLLLLLLLLLLLLLLLDDDLLLLLLLLLLLLLLLMLLLMLLLLLLMLLLLLLLLLMLLLLLLAALLLLLLLLLLLLALLLQQIDLLLLLLLLLLLKKKLLLLLLKLLKLLLLLLLIDLLLLLLLLLLLKLLLLLLKLLLLLLLLLNDDENNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLALLLLLLLLLMLLLLLLLLLLLLLLLLIDLLLLLLLLLLLKKLLLLLLLLLLLLLLLADDDDDMLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMLMMLLLLLLLLLLLLLLLLLLLLLLLLLADDDLLLLLLLLLLLLLLLLLLLLLMMLLLMLLLLLLLLLMLLLLLLALLLLLLLLLLLLLLLIDLLLLLLLLLLLKLLLLLLLLLLLLLLLADDDDDDDDDDMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLMLLLLLLLLLLMMMMMMMLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["Args","Launcher","augment_args","augment_args_for_update","borrow","borrow","borrow_mut","borrow_mut","command","command_for_update","create","default_for_test","fmt","from","from","from_arg_matches","from_arg_matches_mut","get_endorsed_evidence","get_trusted_app_address","group_id","into","into","into_request","into_request","kill","path_exists","proto","try_from","try_from","try_into","try_into","type_id","type_id","update_from_arg_matches","update_from_arg_matches_mut","vzip","vzip","wait","oak","attestation","containers","crypto","key_provisioning","session","v1","AmdSevSnp","ApplicationKeys","ApplicationLayerEndorsements","CbEndorsements","CertificateAuthority","ContainerLayerEndorsements","DiceData","Endorsements","Evidence","IntelTdx","KernelLayerEndorsements","LayerEvidence","OakContainersEndorsements","OakRestrictedKernelEndorsements","RootLayerEndorsements","RootLayerEvidence","SystemLayerEndorsements","TeePlatform","TransparentReleaseEndorsement","Unspecified","acpi","application_keys","application_layer","as_str_name","binary","binary","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","certificate_authority","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","compare","configuration","configuration","container_layer","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","drop","eca_certificate","eca_private_key","eca_public_key","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encryption_public_key_certificate","endorsement","endorsement_signature","endorsements","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","evidence","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_i32","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_str_name","get_claims","hash","init_ram_fs","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","is_valid","kernel_cmd_line","kernel_image","kernel_layer","kernel_layer","kernel_setup_data","layers","memory_map","partial_cmp","platform","platform","rekor_log_entry","remote_attestation_report","root_layer","root_layer","root_layer","set_platform","signing_public_key_certificate","stage0","system_image","system_layer","tee_certificate","tee_certificate","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","Cb","OakContainers","OakRestrictedKernel","Type","borrow","borrow_mut","clone","clone_into","encode","encoded_len","eq","fmt","from","from_ref","into","into_request","merge","to_owned","try_from","try_into","type_id","vzip","GetApplicationConfigResponse","GetImageResponse","SendAttestationEvidenceRequest","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clear","clear","clear","clone","clone","clone","clone_into","clone_into","clone_into","config","default","default","default","dice_evidence","encoded_len","encoded_len","encoded_len","eq","eq","eq","evidence","fmt","fmt","fmt","from","from","from","from_ref","from_ref","from_ref","image_chunk","into","into","into","into_request","into_request","into_request","launcher_server","orchestrator_server","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","v1","vzip","vzip","vzip","GetContainerBundleStream","GetOakSystemImageStream","Launcher","LauncherServer","accept_compressed","borrow","borrow_mut","call","call","clone","clone_into","fmt","from","from_arc","from_ref","get_application_config","get_container_bundle","get_oak_system_image","into","into_make_service","into_request","max_decoding_message_size","max_encoding_message_size","new","notify_app_ready","poll_ready","poll_ready","send_attestation_evidence","send_compressed","to_owned","try_from","try_into","type_id","vzip","with_interceptor","Orchestrator","OrchestratorServer","accept_compressed","borrow","borrow_mut","call","call","clone","clone_into","fmt","from","from_arc","from_ref","get_application_config","into","into_make_service","into_request","max_decoding_message_size","max_encoding_message_size","new","notify_app_ready","poll_ready","poll_ready","send_compressed","to_owned","try_from","try_into","type_id","vzip","with_interceptor","Dependant","GetGroupKeysResponse","GetKeyProvisioningRoleResponse","KeyProvisioningRole","Leader","Unspecified","as_str_name","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clear","clear","clone","clone","clone","clone_into","clone_into","clone_into","cmp","compare","default","default","default","encoded_len","encoded_len","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","from","from","from","from_i32","from_ref","from_ref","from_ref","from_str_name","group_keys","hash","hostlib_key_provisioning_server","into","into","into","into_request","into_request","into_request","is_valid","partial_cmp","role","role","set_role","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","HostlibKeyProvisioning","HostlibKeyProvisioningServer","accept_compressed","borrow","borrow_mut","call","call","clone","clone_into","fmt","from","from_arc","from_ref","get_group_keys","get_key_provisioning_role","into","into_make_service","into_request","max_decoding_message_size","max_encoding_message_size","new","poll_ready","poll_ready","send_compressed","to_owned","try_from","try_into","type_id","vzip","with_interceptor","v1","AeadEncryptedMessage","EncryptedRequest","EncryptedResponse","SessionKeys","Signature","associated_data","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","ciphertext","clear","clear","clear","clear","clear","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","default","default","default","default","default","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encrypted_message","encrypted_message","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from_ref","from_ref","from_ref","from_ref","from_ref","into","into","into","into","into","into_request","into_request","into_request","into_request","into_request","nonce","request_key","response_key","serialized_encapsulated_public_key","serialized_encapsulated_public_key","signature","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","v1","GetGroupKeysRequest","GetGroupKeysResponse","GroupKeys","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clear","clear","clear","clone","clone","clone","clone_into","clone_into","clone_into","default","default","default","encoded_len","encoded_len","encoded_len","encrypted_encryption_private_key","endorsements","eq","eq","eq","evidence","fmt","fmt","fmt","from","from","from","from_ref","from_ref","from_ref","group_keys","into","into","into","into_request","into_request","into_request","key_provisioning_server","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","KeyProvisioning","KeyProvisioningServer","accept_compressed","borrow","borrow_mut","call","call","clone","clone_into","fmt","from","from_arc","from_ref","get_group_keys","into","into_make_service","into_request","max_decoding_message_size","max_encoding_message_size","new","poll_ready","poll_ready","send_compressed","to_owned","try_from","try_into","type_id","vzip","with_interceptor","v1","ApplicationData","AttestationBundle","AttestationEndorsement","AttestationEvidence","GetEncryptionKeyRequest","GetEncryptionKeyResponse","GetPublicKeyRequest","GetPublicKeyResponse","InvokeRequest","InvokeResponse","application_data","attestation","attestation_bundle","attestation_endorsement","attestation_evidence","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","config","default","default","default","default","default","default","default","default","default","default","digest","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encrypted_attestation_bundle","encrypted_encryption_key","encrypted_request","encrypted_response","encryption_public_key","endorsed_evidence","endorsements","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","evidence","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","into","into","into","into","into","into","into","into","into","into","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","signed_application_data","signing_public_key","tee_certificates","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip"],"q":[[0,"oak_containers_launcher"],[38,"oak_containers_launcher::proto"],[39,"oak_containers_launcher::proto::oak"],[44,"oak_containers_launcher::proto::oak::attestation"],[45,"oak_containers_launcher::proto::oak::attestation::v1"],[430,"oak_containers_launcher::proto::oak::attestation::v1::endorsements"],[452,"oak_containers_launcher::proto::oak::containers"],[516,"oak_containers_launcher::proto::oak::containers::launcher_server"],[551,"oak_containers_launcher::proto::oak::containers::orchestrator_server"],[581,"oak_containers_launcher::proto::oak::containers::v1"],[656,"oak_containers_launcher::proto::oak::containers::v1::hostlib_key_provisioning_server"],[686,"oak_containers_launcher::proto::oak::crypto"],[687,"oak_containers_launcher::proto::oak::crypto::v1"],[792,"oak_containers_launcher::proto::oak::key_provisioning"],[793,"oak_containers_launcher::proto::oak::key_provisioning::v1"],[855,"oak_containers_launcher::proto::oak::key_provisioning::v1::key_provisioning_server"],[884,"oak_containers_launcher::proto::oak::session"],[885,"oak_containers_launcher::proto::oak::session::v1"],[1093,"clap_builder::builder::command"],[1094,"anyhow"],[1095,"core::result"],[1096,"core::fmt"],[1097,"core::fmt"],[1098,"clap_builder"],[1099,"anyhow"],[1100,"clap_builder::util::id"],[1101,"core::option"],[1102,"tonic::request"],[1103,"std::path"],[1104,"alloc::string"],[1105,"core::any"],[1106,"core::cmp"],[1107,"core::fmt"],[1108,"oak_attestation::dice"],[1109,"coset::cwt"],[1110,"core::hash"],[1111,"oak_dice::evidence"],[1112,"prost::encoding"],[1113,"prost::encoding"],[1114,"bytes::buf::buf_impl"],[1115,"tonic::codec::compression"],[1116,"http::request"],[1117,"http_body"],[1118,"core::marker"],[1119,"core::fmt"],[1120,"core::future::future"],[1121,"alloc::boxed"],[1122,"core::pin"],[1123,"axum::routing::into_make_service"],[1124,"core::task::wake"],[1125,"core::task::poll"],[1126,"tonic::service::interceptor"],[1127,"tonic::service::interceptor"]],"d":["","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Gets the endorsed attestation evidence that the untrusted …","Gets the address that the untrusted application can use to …","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","Keys used by the application to derive encryption session …","","","Message for passing embedded certificate authority …","","Message that is sent between DICE layers.","Endorsement contains statements that some entity (e.g. a …","Attestation Evidence used by the client to the identity of …","","","DICE layer evidence containing a certificate signed by the …","","","","Evidence generated by the Layer0.","","This proto defines the layered DICE Attestation Evidence.","Endorsement for binaries from the Transparent Release …","","","Application keys signed by the penultimate layer’s ECA …","","String value of the enum field names used in the ProtoBuf …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Certificate signing current layer’s measurements and the …","ECA private key that will be used by a layer to sign a …","Serialized ECA public key for Layer0 that is signed by the …","","","","","","","","","","","","","","","","","Certificate signing the encryption public key.","JSON string comtaining the endorsement statement for the …","The signature for the endorsement.","Nested message and enum types in <code>Endorsements</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Converts an <code>i32</code> to a <code>TeePlatform</code>, or <code>None</code> if <code>value</code> is not …","","","","","","","","","","","","","","","","","","Creates an enum from field names used in the ProtoBuf …","Extracts the <code>ClaimsSet</code> encoded in the ECA certificate of …","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","Returns <code>true</code> if <code>value</code> is a variant of <code>TeePlatform</code>.","","","","","","Layer1..LayerN-1 attestation evidence.","","","Returns the enum value of <code>platform</code>, or the default if the …","The platform providing the attestation report.","The log entry as proof of inclusion of the endorsement …","TEE-specific attestation report acting as a non-standard …","Layer0 attestation evidence.","","","Sets <code>platform</code> to the provided enum value.","Certificate signing the signing public key.","Endorsement of the Stage0 binary.","","","The serialized TEE certificate(s). The details of the …","Serialized X.509 TEE certificate.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Encodes the message to a buffer.","Returns the encoded length of the message without a length …","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","Decodes an instance of the message from a buffer, and …","","","","","","","As images can be large (hundreds of megabytes), the …","","","","","","","","","","","","","","","","","Arbitrary config that the container can retrieve from the …","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Generated server implementations.","Generated server implementations.","","","","","","","","","","","","","","","","","Server streaming response type for the GetContainerBundle …","Server streaming response type for the GetOakSystemImage …","Generated trait containing gRPC methods that should be …","Defines the service exposed by the launcher, that can be …","Enable decompressing requests with the given encoding.","","","","","","","","Returns the argument unchanged.","","","This method is used by the orchestrator to load and …","Provides orchestrator with the trusted container image.","Provides stage1 with the Oak system image (which contains …","Calls <code>U::from(self)</code>.","","","Limits the maximum size of a decoded message.","Limits the maximum size of an encoded message.","","Notifies the launcher that the trusted app is ready to …","","","Sends Attestation Evidence containing the Attestation …","Compress responses with the given encoding, if the client …","","","","","","","Generated trait containing gRPC methods that should be …","Defines the service exposed by the orchestrator, that can …","Enable decompressing requests with the given encoding.","","","","","","","","Returns the argument unchanged.","","","Exposes the previously loaded trusted application config …","Calls <code>U::from(self)</code>.","","","Limits the maximum size of a decoded message.","Limits the maximum size of an encoded message.","","Notifies the orchestrator that the trusted app is ready to …","","","Compress responses with the given encoding, if the client …","","","","","","","","","","","","","String value of the enum field names used in the ProtoBuf …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Converts an <code>i32</code> to a <code>KeyProvisioningRole</code>, or <code>None</code> if <code>value</code> …","","","","Creates an enum from field names used in the ProtoBuf …","","","Generated server implementations.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Returns <code>true</code> if <code>value</code> is a variant of <code>KeyProvisioningRole</code>.","","Returns the enum value of <code>role</code>, or the default if the …","","Sets <code>role</code> to the provided enum value.","","","","","","","","","","","","","","","","Generated trait containing gRPC methods that should be …","Defines the service exposed by the Hostlib that is used …","Enable decompressing requests with the given encoding.","","","","","","","","Returns the argument unchanged.","","","Get enclave group keys to the enclave as part of Key …","Get the enclave role for Key Provisioning. Could be one of …","Calls <code>U::from(self)</code>.","","","Limits the maximum size of a decoded message.","Limits the maximum size of an encoded message.","","","","Compress responses with the given encoding, if the client …","","","","","","","","Message encrypted with Authenticated Encryption with …","Request message encrypted using Hybrid Public Key …","Response message encrypted Hybrid Public Key Encryption …","Envelope containing session keys required to …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Message encrypted with Authenticated Encryption with …","Message encrypted with Authenticated Encryption with …","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","AEAD key for encrypting/decrypting client requests.","AEAD key for encrypting/decrypting enclave responses.","Returns the value of <code>serialized_encapsulated_public_key</code>, …","Ephemeral Diffie-Hellman client public key that is needed …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Encryption private key that was encrypted with HPKE using …","","","","","Evidence contains the encryption public key for encrypting …","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Generated server implementations.","","","","","","","","","","","","","","","","Generated trait containing gRPC methods that should be …","Defines the Key Provisioning Service that distributes keys …","Enable decompressing requests with the given encoding.","","","","","","","","Returns the argument unchanged.","","","Request enclave group keys from for other enclaves as part …","Calls <code>U::from(self)</code>.","","","Limits the maximum size of a decoded message.","Limits the maximum size of an encoded message.","","","","Compress responses with the given encoding, if the client …","","","","","","","","","AttestationBundle contains the information that the …","AttestationEndorsement contains statements that some …","AttestationEvidence contains all the information that …","","","","","","","The optional application-specific data.","The serialized attestation report binding the public key.","The enclave’s signing and encryption public keys and …","Supporting evidence required for verifying the integrity …","Attestation evidence from the enclave.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The serialized application configuration. The format of …","","","","","","","","","","","The cryptographic digest of the application, of the form …","","","","","","","","","","","Encrypted attestation evidence of the dependent enclave.","Encrypted private key of the leader enclave.","Body of the request, encrypted using Hybrid Public Key …","Body of the request, encrypted using Hybrid Public Key …","The serialized public key part of the enclave encryption …","Attestation evidence and public key.","Thea attestation endorsements.","","","","","","","","","","","The DICE attestation evidence.","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","The signature over the application_data, signed by the …","The serialized public key part of the enclave signing key. …","The serialized TEE certificate(s). The details of the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,2,2,3,2,3,2,2,2,3,2,2,3,2,2,2,3,3,2,3,2,3,2,3,0,0,3,2,3,2,3,2,2,2,3,2,3,0,0,0,0,0,0,0,21,0,0,0,0,0,0,0,0,21,0,0,0,0,0,0,0,0,0,21,30,25,34,21,32,33,22,23,24,25,21,26,27,28,29,30,31,32,33,34,35,36,37,22,23,24,25,21,26,27,28,29,30,31,32,33,34,35,36,37,27,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,22,23,24,25,21,26,27,28,29,30,31,32,33,34,35,36,37,22,23,24,25,21,26,27,28,29,30,31,32,33,34,35,36,37,21,21,32,33,35,22,23,24,25,21,26,27,28,29,30,31,32,33,34,35,36,37,27,23,26,22,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,24,28,28,0,22,23,24,25,21,26,27,28,29,30,31,32,33,34,35,36,37,21,21,21,21,27,22,23,24,25,21,26,27,28,29,30,31,32,33,34,35,36,37,22,23,24,25,21,21,26,27,27,28,29,30,31,32,33,34,35,36,37,21,22,23,24,25,21,26,27,28,29,30,31,32,33,34,35,36,37,21,23,21,30,22,23,24,25,21,26,27,28,29,30,31,32,33,34,35,36,37,22,23,24,25,21,26,27,28,29,30,31,32,33,34,35,36,37,21,30,30,34,35,30,25,30,21,22,22,28,22,25,34,35,22,24,29,31,35,29,36,22,23,24,25,21,26,27,28,29,30,31,32,33,34,35,36,37,22,22,23,23,24,24,25,25,21,26,27,27,28,29,30,31,32,33,34,35,36,37,22,23,24,25,21,26,27,28,29,30,31,32,33,34,35,36,37,37,22,23,24,25,21,26,27,28,29,30,31,32,33,34,35,36,37,22,23,24,25,21,26,27,28,29,30,31,32,33,34,35,36,37,52,52,52,0,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,0,0,0,59,60,61,59,60,61,59,60,61,59,60,61,59,60,61,60,59,60,61,61,59,60,61,59,60,61,61,59,60,61,59,60,61,59,60,61,59,59,60,61,59,60,61,0,0,59,60,61,59,60,61,59,60,61,59,60,61,0,59,60,61,64,64,0,0,62,62,62,62,62,62,62,62,62,62,62,64,64,64,62,62,62,62,62,62,64,62,62,64,62,62,62,62,62,62,62,0,0,78,78,78,78,78,78,78,78,78,78,78,79,78,78,78,78,78,78,79,78,78,78,78,78,78,78,78,78,80,0,0,0,80,80,80,81,82,80,81,82,80,81,82,81,82,80,81,82,80,80,80,81,82,80,81,82,81,82,80,80,80,80,80,81,82,80,81,82,80,80,81,82,80,80,82,80,0,81,82,80,81,82,80,80,80,81,81,81,81,82,80,81,82,80,81,82,80,81,82,80,81,82,80,0,0,83,83,83,83,83,83,83,83,83,83,83,84,84,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,0,0,0,0,0,0,87,85,86,87,88,89,85,86,87,88,89,87,85,86,87,88,89,85,86,87,88,89,85,86,87,88,89,85,86,87,88,89,85,86,87,88,89,85,86,85,86,87,88,89,85,86,87,88,89,85,86,87,88,89,85,86,87,88,89,85,86,87,88,89,85,86,87,88,89,87,88,88,85,85,89,85,86,87,88,89,85,86,87,88,89,85,86,87,88,89,85,86,87,88,89,85,86,87,88,89,0,0,0,0,92,93,94,92,93,94,92,93,94,92,93,94,92,93,94,92,93,94,92,93,94,92,93,92,93,94,93,92,93,94,92,93,94,92,93,94,94,92,93,94,92,93,94,0,92,93,94,92,93,94,92,93,94,92,93,94,92,93,94,0,0,95,95,95,95,95,95,95,95,95,95,95,96,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,0,0,0,0,0,0,0,0,0,0,0,98,97,101,10,10,97,10,98,99,100,101,102,103,104,105,97,10,98,99,100,101,102,103,104,105,97,10,98,99,100,101,102,103,104,105,97,10,98,99,100,101,102,103,104,105,97,10,98,99,100,101,102,103,104,105,99,97,10,98,99,100,101,102,103,104,105,99,97,10,98,99,100,101,102,103,104,105,104,105,102,103,97,105,10,97,10,98,99,100,101,102,103,104,105,10,97,10,98,99,100,101,102,103,104,105,97,10,98,99,100,101,102,103,104,105,97,10,98,99,100,101,102,103,104,105,97,10,98,99,100,101,102,103,104,105,97,10,98,99,100,101,102,103,104,105,97,97,98,97,10,98,99,100,101,102,103,104,105,97,10,98,99,100,101,102,103,104,105,97,10,98,99,100,101,102,103,104,105,97,10,98,99,100,101,102,103,104,105,97,10,98,99,100,101,102,103,104,105],"f":[0,0,[1,1],[1,1],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],1],[[],1],[2,[[5,[3,4]]]],[[],2],[[2,6],7],[-1,-1,[]],[-1,-1,[]],[8,[[5,[2,9]]]],[8,[[5,[2,9]]]],[3,[[11,[10]]]],[3,[[5,[12,4]]]],[[],[[14,[13]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[3,16],[17,[[5,[18,19]]]],0,[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,20,[]],[-1,20,[]],[[2,8],[[5,[16,9]]]],[[2,8],[[5,[16,9]]]],[-1,-2,[],[]],[-1,-2,[],[]],[3,[[5,[16,4]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[21,17],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[22,16],[23,16],[24,16],[25,16],[26,16],[27,16],[28,16],[29,16],[30,16],[31,16],[32,16],[33,16],[34,16],[35,16],[36,16],[37,16],[22,22],[23,23],[24,24],[25,25],[21,21],[26,26],[27,27],[28,28],[29,29],[30,30],[31,31],[32,32],[33,33],[34,34],[35,35],[36,36],[37,37],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[[21,21],38],[[-1,-2],38,[],[]],0,0,0,[[],22],[[],23],[[],24],[[],25],[[],21],[[],26],[[],27],[[],28],[[],29],[[],30],[[],31],[[],32],[[],33],[[],34],[[],35],[[],36],[[],37],[27,16],0,0,0,[22,39],[23,39],[24,39],[25,39],[26,39],[27,39],[28,39],[29,39],[30,39],[31,39],[32,39],[33,39],[34,39],[35,39],[36,39],[37,39],0,0,0,0,[[22,22],40],[[23,23],40],[[24,24],40],[[25,25],40],[[21,21],40],[[26,26],40],[[27,27],40],[[28,28],40],[[29,29],40],[[30,30],40],[[31,31],40],[[32,32],40],[[33,33],40],[[34,34],40],[[35,35],40],[[36,36],40],[[37,37],40],[[-1,-2],40,[],[]],[[-1,-2],40,[],[]],[[-1,-2],40,[],[]],[[-1,-2],40,[],[]],0,[[22,6],[[5,[16,41]]]],[[23,6],[[5,[16,41]]]],[[24,6],[[5,[16,41]]]],[[25,6],[[5,[16,41]]]],[[21,6],[[5,[16,41]]]],[[26,6],[[5,[16,41]]]],[[27,6],[[5,[16,41]]]],[[28,6],[[5,[16,41]]]],[[29,6],[[5,[16,41]]]],[[30,6],[[5,[16,41]]]],[[31,6],[[5,[16,41]]]],[[32,6],[[5,[16,41]]]],[[33,6],[[5,[16,41]]]],[[34,6],[[5,[16,41]]]],[[35,6],[[5,[16,41]]]],[[36,6],[[5,[16,41]]]],[[37,6],[[5,[16,41]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[42,21],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[43,27],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[44,[[14,[21]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[17,[[14,[21]]]],[23,[[5,[45,4]]]],[[21,-1],16,46],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[44,40],0,0,0,0,0,0,0,[[21,21],[[14,[38]]]],[22,21],0,0,0,0,0,0,[[22,21],16],0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[47,[[5,[22,4]]]],[-1,[[5,[-2]]],[],[]],[48,[[5,[23,4]]]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[49,[[5,[24,4]]]],[50,[[5,[25,4]]]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[51,[[5,[27,4]]]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],0,[-1,20,[]],[-1,20,[]],[-1,20,[]],[-1,20,[]],[-1,20,[]],[-1,20,[]],[-1,20,[]],[-1,20,[]],[-1,20,[]],[-1,20,[]],[-1,20,[]],[-1,20,[]],[-1,20,[]],[-1,20,[]],[-1,20,[]],[-1,20,[]],[-1,20,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[52,52],[[-1,-2],16,[],[]],[[52,-1],16,53],[52,39],[[52,52],40],[[52,6],[[5,[16,41]]]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,[[15,[-2]]],[],[]],[[[14,[52]],54,55,-1,56],[[5,[16,57]]],58],[-1,-2,[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,20,[]],[-1,-2,[],[]],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[59,16],[60,16],[61,16],[59,59],[60,60],[61,61],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],0,[[],59],[[],60],[[],61],0,[59,39],[60,39],[61,39],[[59,59],40],[[60,60],40],[[61,61],40],0,[[59,6],7],[[60,6],7],[[61,6],7],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,20,[]],[-1,20,[]],[-1,20,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,[[[62,[-1]],63],[[62,[-1]]],64],[-1,-2,[],[]],[-1,-2,[],[]],[[[62,[-1]],[65,[-2]]],[],64,[66,67]],[[-1,[65,[-2]]],[],[],[]],[[[62,[-1]]],[[62,[-1]]],64],[[-1,-2],16,[],[]],[[[62,[-1]],6],7,[68,64]],[-1,-1,[]],[[[69,[-1]]],[[62,[-1]]],64],[-1,-1,[]],[[-1,[15,[16]]],[[72,[[71,[70]]]]],[]],[[-1,[15,[16]]],[[72,[[71,[70]]]]],[]],[[-1,[15,[16]]],[[72,[[71,[70]]]]],[]],[-1,-2,[],[]],[-1,[[73,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[[[62,[-1]],39],[[62,[-1]]],64],[[[62,[-1]],39],[[62,[-1]]],64],[-1,[[62,[-1]]],64],[[-1,[15,[16]]],[[72,[[71,[70]]]]],[]],[[-1,74],[[75,[[5,[16]]]]],[]],[[[62,[-1]],74],[[75,[[5,[16]]]]],64],[[-1,[15,[61]]],[[72,[[71,[70]]]]],[]],[[[62,[-1]],63],[[62,[-1]]],64],[-1,-2,[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,20,[]],[-1,-2,[],[]],[[-1,-2],[[76,[[62,[-1]],-2]]],64,77],0,0,[[[78,[-1]],63],[[78,[-1]]],79],[-1,-2,[],[]],[-1,-2,[],[]],[[[78,[-1]],[65,[-2]]],[],79,[66,67]],[[-1,[65,[-2]]],[],[],[]],[[[78,[-1]]],[[78,[-1]]],79],[[-1,-2],16,[],[]],[[[78,[-1]],6],7,[68,79]],[-1,-1,[]],[[[69,[-1]]],[[78,[-1]]],79],[-1,-1,[]],[[-1,[15,[16]]],[[72,[[71,[70]]]]],[]],[-1,-2,[],[]],[-1,[[73,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[[[78,[-1]],39],[[78,[-1]]],79],[[[78,[-1]],39],[[78,[-1]]],79],[-1,[[78,[-1]]],79],[[-1,[15,[16]]],[[72,[[71,[70]]]]],[]],[[[78,[-1]],74],[[75,[[5,[16]]]]],79],[[-1,74],[[75,[[5,[16]]]]],[]],[[[78,[-1]],63],[[78,[-1]]],79],[-1,-2,[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,20,[]],[-1,-2,[],[]],[[-1,-2],[[76,[[78,[-1]],-2]]],79,77],0,0,0,0,0,0,[80,17],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[81,16],[82,16],[81,81],[82,82],[80,80],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[[80,80],38],[[-1,-2],38,[],[]],[[],81],[[],82],[[],80],[81,39],[82,39],[[81,81],40],[[82,82],40],[[80,80],40],[[-1,-2],40,[],[]],[[-1,-2],40,[],[]],[[-1,-2],40,[],[]],[[-1,-2],40,[],[]],[[81,6],7],[[82,6],7],[[80,6],7],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[44,[[14,[80]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[17,[[14,[80]]]],0,[[80,-1],16,46],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[44,40],[[80,80],[[14,[38]]]],[81,80],0,[[81,80],16],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,20,[]],[-1,20,[]],[-1,20,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[[[83,[-1]],63],[[83,[-1]]],84],[-1,-2,[],[]],[-1,-2,[],[]],[[[83,[-1]],[65,[-2]]],[],84,[66,67]],[[-1,[65,[-2]]],[],[],[]],[[[83,[-1]]],[[83,[-1]]],84],[[-1,-2],16,[],[]],[[[83,[-1]],6],7,[68,84]],[-1,-1,[]],[[[69,[-1]]],[[83,[-1]]],84],[-1,-1,[]],[[-1,[15,[16]]],[[72,[[71,[70]]]]],[]],[[-1,[15,[16]]],[[72,[[71,[70]]]]],[]],[-1,-2,[],[]],[-1,[[73,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[[[83,[-1]],39],[[83,[-1]]],84],[[[83,[-1]],39],[[83,[-1]]],84],[-1,[[83,[-1]]],84],[[[83,[-1]],74],[[75,[[5,[16]]]]],84],[[-1,74],[[75,[[5,[16]]]]],[]],[[[83,[-1]],63],[[83,[-1]]],84],[-1,-2,[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,20,[]],[-1,-2,[],[]],[[-1,-2],[[76,[[83,[-1]],-2]]],84,77],0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[85,16],[86,16],[87,16],[88,16],[89,16],[85,85],[86,86],[87,87],[88,88],[89,89],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[[],85],[[],86],[[],87],[[],88],[[],89],[85,39],[86,39],[87,39],[88,39],[89,39],0,0,[[85,85],40],[[86,86],40],[[87,87],40],[[88,88],40],[[89,89],40],[[85,6],[[5,[16,41]]]],[[86,6],[[5,[16,41]]]],[[87,6],[[5,[16,41]]]],[[88,6],[[5,[16,41]]]],[[89,6],[[5,[16,41]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],0,0,0,[85,[[91,[90]]]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,20,[]],[-1,20,[]],[-1,20,[]],[-1,20,[]],[-1,20,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[92,16],[93,16],[94,16],[92,92],[93,93],[94,94],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[[],92],[[],93],[[],94],[92,39],[93,39],[94,39],0,0,[[92,92],40],[[93,93],40],[[94,94],40],0,[[92,6],7],[[93,6],7],[[94,6],7],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,20,[]],[-1,20,[]],[-1,20,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[[[95,[-1]],63],[[95,[-1]]],96],[-1,-2,[],[]],[-1,-2,[],[]],[[-1,[65,[-2]]],[],[],[]],[[[95,[-1]],[65,[-2]]],[],96,[66,67]],[[[95,[-1]]],[[95,[-1]]],96],[[-1,-2],16,[],[]],[[[95,[-1]],6],7,[68,96]],[-1,-1,[]],[[[69,[-1]]],[[95,[-1]]],96],[-1,-1,[]],[[-1,[15,[93]]],[[72,[[71,[70]]]]],[]],[-1,-2,[],[]],[-1,[[73,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[[[95,[-1]],39],[[95,[-1]]],96],[[[95,[-1]],39],[[95,[-1]]],96],[-1,[[95,[-1]]],96],[[-1,74],[[75,[[5,[16]]]]],[]],[[[95,[-1]],74],[[75,[[5,[16]]]]],96],[[[95,[-1]],63],[[95,[-1]]],96],[-1,-2,[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,20,[]],[-1,-2,[],[]],[[-1,-2],[[76,[[95,[-1]],-2]]],96,77],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[97,16],[10,16],[98,16],[99,16],[100,16],[101,16],[102,16],[103,16],[104,16],[105,16],[97,97],[10,10],[98,98],[99,99],[100,100],[101,101],[102,102],[103,103],[104,104],[105,105],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],0,[[],97],[[],10],[[],98],[[],99],[[],100],[[],101],[[],102],[[],103],[[],104],[[],105],0,[97,39],[10,39],[98,39],[99,39],[100,39],[101,39],[102,39],[103,39],[104,39],[105,39],0,0,0,0,0,0,0,[[97,97],40],[[10,10],40],[[98,98],40],[[99,99],40],[[100,100],40],[[101,101],40],[[102,102],40],[[103,103],40],[[104,104],40],[[105,105],40],0,[[97,6],[[5,[16,41]]]],[[10,6],[[5,[16,41]]]],[[98,6],[[5,[16,41]]]],[[99,6],[[5,[16,41]]]],[[100,6],[[5,[16,41]]]],[[101,6],[[5,[16,41]]]],[[102,6],[[5,[16,41]]]],[[103,6],[[5,[16,41]]]],[[104,6],[[5,[16,41]]]],[[105,6],[[5,[16,41]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,20,[]],[-1,20,[]],[-1,20,[]],[-1,20,[]],[-1,20,[]],[-1,20,[]],[-1,20,[]],[-1,20,[]],[-1,20,[]],[-1,20,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]]],"c":[481,898,899],"p":[[3,"Command",1093],[3,"Args",0],[3,"Launcher",0],[3,"Error",1094],[4,"Result",1095],[3,"Formatter",1096],[6,"Result",1096],[3,"ArgMatches",1097],[6,"Error",1098],[3,"AttestationBundle",885],[6,"Result",1094],[4,"SocketAddr",1099],[3,"Id",1100],[4,"Option",1101],[3,"Request",1102],[15,"tuple"],[15,"str"],[3,"PathBuf",1103],[3,"String",1104],[3,"TypeId",1105],[4,"TeePlatform",45],[3,"RootLayerEvidence",45],[3,"LayerEvidence",45],[3,"ApplicationKeys",45],[3,"Evidence",45],[3,"CertificateAuthority",45],[3,"DiceData",45],[3,"TransparentReleaseEndorsement",45],[3,"RootLayerEndorsements",45],[3,"KernelLayerEndorsements",45],[3,"SystemLayerEndorsements",45],[3,"ApplicationLayerEndorsements",45],[3,"ContainerLayerEndorsements",45],[3,"OakRestrictedKernelEndorsements",45],[3,"OakContainersEndorsements",45],[3,"CbEndorsements",45],[3,"Endorsements",45],[4,"Ordering",1106],[15,"usize"],[15,"bool"],[3,"Error",1096],[4,"TeePlatform",1107],[3,"DiceBuilder",1108],[15,"i32"],[3,"ClaimsSet",1109],[8,"Hasher",1110],[3,"RootLayerEvidence",1107],[3,"LayerEvidence",1107],[3,"ApplicationKeys",1107],[3,"Evidence",1107],[3,"Stage0DiceData",1107],[4,"Type",430],[8,"BufMut",1111],[15,"u32"],[4,"WireType",1112],[3,"DecodeContext",1112],[3,"DecodeError",1113],[8,"Buf",1114],[3,"GetImageResponse",452],[3,"GetApplicationConfigResponse",452],[3,"SendAttestationEvidenceRequest",452],[3,"LauncherServer",516],[4,"CompressionEncoding",1115],[8,"Launcher",516],[3,"Request",1116],[8,"Body",1117],[8,"Send",1118],[8,"Debug",1096],[3,"Arc",1119],[8,"Future",1120],[3,"Box",1121],[3,"Pin",1122],[3,"IntoMakeService",1123],[3,"Context",1124],[4,"Poll",1125],[3,"InterceptedService",1126],[8,"Interceptor",1126],[3,"OrchestratorServer",551],[8,"Orchestrator",551],[4,"KeyProvisioningRole",581],[3,"GetKeyProvisioningRoleResponse",581],[3,"GetGroupKeysResponse",581],[3,"HostlibKeyProvisioningServer",656],[8,"HostlibKeyProvisioning",656],[3,"EncryptedRequest",687],[3,"EncryptedResponse",687],[3,"AeadEncryptedMessage",687],[3,"SessionKeys",687],[3,"Signature",687],[15,"u8"],[15,"slice"],[3,"GroupKeys",793],[3,"GetGroupKeysRequest",793],[3,"GetGroupKeysResponse",793],[3,"KeyProvisioningServer",855],[8,"KeyProvisioning",855],[3,"AttestationEvidence",885],[3,"AttestationEndorsement",885],[3,"ApplicationData",885],[3,"GetPublicKeyRequest",885],[3,"GetPublicKeyResponse",885],[3,"InvokeRequest",885],[3,"InvokeResponse",885],[3,"GetEncryptionKeyRequest",885],[3,"GetEncryptionKeyResponse",885]],"b":[]},\
"oak_containers_orchestrator":{"doc":"","t":"AAAAAAAAAFDDLLLLLLLLLLLLLLLLLLLLLLLLLFFDLLFLLLLLLLLLDLLLLLLLLLLLLLLLLLFDLLLLLFLLLLAAAAAAANDDDDDDDDNDDDDDDDEDNMMMLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMLLLLLLLLLLLLLLLLLLMMMLLLLLLLLLLLLLLLLMMMALLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMLLMMMMMMLMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNNELLLLLLLLLLLLLLLLLLDDDLLLLLLLLLLLLLLLMLLLMLLLLLLMLLLLLLLLLMLLLLLLAAAALLLLLLLLLLLLALLLDLLLLLLLLLLLLLLLLLLLLLLLLLLLQQIDLLLLLLLLLLLKKKLLLLLLKLLKLLLLLLLDLLLLLLLLLLLLLLLLLLLLLLLLIDLLLLLLLLLLLKLLLLLLKLLLLLLLLLNDDDDNNEENDDNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLAALLLLLLLLLLLLLLLLLLLLMMMAALLLMMMLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLLLLLIDLLLLLLLLLLLKKLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLLLLLIDLLLLLLLKLLLLLLLLLLLLLKLLLLLLADDDDDMLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMLMMLLLLLLLLLLLLLLLLLLLLLLLLLADDDLLLLLLLLLLLLLLLLLLLLLMMLLLMLLLLLLLLLMLLLLLLAALLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLLLLIDLLLLLLLLLLLKLLLLLLLLLLLLLLLADDDDDDDDDDMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLMLLLLLLLLLLMMMMMMMLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["container_runtime","crypto","dice","ipc_server","key_provisioning","launcher_client","logging","metrics","proto","run","InstanceKeyStore","KeyStore","borrow","borrow","borrow_mut","borrow_mut","default","from","from","generate_group_keys","instance_encryption_key","instance_encryption_key","instance_encryption_public_key","into","into","into_request","into_request","new","provide_group_keys","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","load_stage1_dice_data","measure_container_and_config","ServiceImplementation","borrow","borrow_mut","create","from","get_application_config","into","into_request","notify_app_ready","try_from","try_into","type_id","vzip","LauncherClient","borrow","borrow_mut","create","from","get_application_config","get_container_bundle","get_group_keys","get_key_provisioning_role","into","into_request","notify_app_ready","openmetrics_builder","send_attestation_evidence","try_from","try_into","type_id","vzip","setup","SystemMetrics","borrow","borrow_mut","from","into","into_request","run","try_from","try_into","type_id","vzip","oak","attestation","containers","crypto","key_provisioning","session","v1","AmdSevSnp","ApplicationKeys","ApplicationLayerEndorsements","CbEndorsements","CertificateAuthority","ContainerLayerEndorsements","DiceData","Endorsements","Evidence","IntelTdx","KernelLayerEndorsements","LayerEvidence","OakContainersEndorsements","OakRestrictedKernelEndorsements","RootLayerEndorsements","RootLayerEvidence","SystemLayerEndorsements","TeePlatform","TransparentReleaseEndorsement","Unspecified","acpi","application_keys","application_layer","as_str_name","binary","binary","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","certificate_authority","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","compare","configuration","configuration","container_layer","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","drop","eca_certificate","eca_private_key","eca_public_key","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encryption_public_key_certificate","endorsement","endorsement_signature","endorsements","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","evidence","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_i32","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_str_name","get_claims","hash","init_ram_fs","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","is_valid","kernel_cmd_line","kernel_image","kernel_layer","kernel_layer","kernel_setup_data","layers","memory_map","partial_cmp","platform","platform","rekor_log_entry","remote_attestation_report","root_layer","root_layer","root_layer","set_platform","signing_public_key_certificate","stage0","system_image","system_layer","tee_certificate","tee_certificate","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","Cb","OakContainers","OakRestrictedKernel","Type","borrow","borrow_mut","clone","clone_into","encode","encoded_len","eq","fmt","from","from_ref","into","into_request","merge","to_owned","try_from","try_into","type_id","vzip","GetApplicationConfigResponse","GetImageResponse","SendAttestationEvidenceRequest","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clear","clear","clear","clone","clone","clone","clone_into","clone_into","clone_into","config","default","default","default","dice_evidence","encoded_len","encoded_len","encoded_len","eq","eq","eq","evidence","fmt","fmt","fmt","from","from","from","from_ref","from_ref","from_ref","image_chunk","into","into","into","into_request","into_request","into_request","launcher_client","launcher_server","orchestrator_client","orchestrator_server","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","v1","vzip","vzip","vzip","LauncherClient","accept_compressed","borrow","borrow_mut","clone","clone_into","connect","fmt","from","from_ref","get_application_config","get_container_bundle","get_oak_system_image","into","into_request","max_decoding_message_size","max_encoding_message_size","new","notify_app_ready","send_attestation_evidence","send_compressed","to_owned","try_from","try_into","type_id","vzip","with_interceptor","with_origin","GetContainerBundleStream","GetOakSystemImageStream","Launcher","LauncherServer","accept_compressed","borrow","borrow_mut","call","call","clone","clone_into","fmt","from","from_arc","from_ref","get_application_config","get_container_bundle","get_oak_system_image","into","into_make_service","into_request","max_decoding_message_size","max_encoding_message_size","new","notify_app_ready","poll_ready","poll_ready","send_attestation_evidence","send_compressed","to_owned","try_from","try_into","type_id","vzip","with_interceptor","OrchestratorClient","accept_compressed","borrow","borrow_mut","clone","clone_into","connect","fmt","from","from_ref","get_application_config","into","into_request","max_decoding_message_size","max_encoding_message_size","new","notify_app_ready","send_compressed","to_owned","try_from","try_into","type_id","vzip","with_interceptor","with_origin","Orchestrator","OrchestratorServer","accept_compressed","borrow","borrow_mut","call","call","clone","clone_into","fmt","from","from_arc","from_ref","get_application_config","into","into_make_service","into_request","max_decoding_message_size","max_encoding_message_size","new","notify_app_ready","poll_ready","poll_ready","send_compressed","to_owned","try_from","try_into","type_id","vzip","with_interceptor","Dependant","DeriveSessionKeysRequest","DeriveSessionKeysResponse","GetGroupKeysResponse","GetKeyProvisioningRoleResponse","Group","Instance","KeyOrigin","KeyProvisioningRole","Leader","SignRequest","SignResponse","Unspecified","Unspecified","as_str_name","as_str_name","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clear","clear","clear","clear","clear","clear","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","compare","compare","default","default","default","default","default","default","default","default","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from_i32","from_i32","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_str_name","from_str_name","group_keys","hash","hash","hostlib_key_provisioning_client","hostlib_key_provisioning_server","into","into","into","into","into","into","into","into","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","is_valid","is_valid","key_origin","key_origin","key_origin","key_origin","message","orchestrator_crypto_client","orchestrator_crypto_server","partial_cmp","partial_cmp","role","role","serialized_encapsulated_public_key","session_keys","set_key_origin","set_key_origin","set_role","signature","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","HostlibKeyProvisioningClient","accept_compressed","borrow","borrow_mut","clone","clone_into","connect","fmt","from","from_ref","get_group_keys","get_key_provisioning_role","into","into_request","max_decoding_message_size","max_encoding_message_size","new","send_compressed","to_owned","try_from","try_into","type_id","vzip","with_interceptor","with_origin","HostlibKeyProvisioning","HostlibKeyProvisioningServer","accept_compressed","borrow","borrow_mut","call","call","clone","clone_into","fmt","from","from_arc","from_ref","get_group_keys","get_key_provisioning_role","into","into_make_service","into_request","max_decoding_message_size","max_encoding_message_size","new","poll_ready","poll_ready","send_compressed","to_owned","try_from","try_into","type_id","vzip","with_interceptor","OrchestratorCryptoClient","accept_compressed","borrow","borrow_mut","clone","clone_into","connect","derive_session_keys","fmt","from","from_ref","into","into_request","max_decoding_message_size","max_encoding_message_size","new","send_compressed","sign","to_owned","try_from","try_into","type_id","vzip","with_interceptor","with_origin","OrchestratorCrypto","OrchestratorCryptoServer","accept_compressed","borrow","borrow_mut","call","call","clone","clone_into","derive_session_keys","fmt","from","from_arc","from_ref","into","into_make_service","into_request","max_decoding_message_size","max_encoding_message_size","new","poll_ready","poll_ready","send_compressed","sign","to_owned","try_from","try_into","type_id","vzip","with_interceptor","v1","AeadEncryptedMessage","EncryptedRequest","EncryptedResponse","SessionKeys","Signature","associated_data","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","ciphertext","clear","clear","clear","clear","clear","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","default","default","default","default","default","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encrypted_message","encrypted_message","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from_ref","from_ref","from_ref","from_ref","from_ref","into","into","into","into","into","into_request","into_request","into_request","into_request","into_request","nonce","request_key","response_key","serialized_encapsulated_public_key","serialized_encapsulated_public_key","signature","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","v1","GetGroupKeysRequest","GetGroupKeysResponse","GroupKeys","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clear","clear","clear","clone","clone","clone","clone_into","clone_into","clone_into","default","default","default","encoded_len","encoded_len","encoded_len","encrypted_encryption_private_key","endorsements","eq","eq","eq","evidence","fmt","fmt","fmt","from","from","from","from_ref","from_ref","from_ref","group_keys","into","into","into","into_request","into_request","into_request","key_provisioning_client","key_provisioning_server","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","KeyProvisioningClient","accept_compressed","borrow","borrow_mut","clone","clone_into","connect","fmt","from","from_ref","get_group_keys","into","into_request","max_decoding_message_size","max_encoding_message_size","new","send_compressed","to_owned","try_from","try_into","type_id","vzip","with_interceptor","with_origin","KeyProvisioning","KeyProvisioningServer","accept_compressed","borrow","borrow_mut","call","call","clone","clone_into","fmt","from","from_arc","from_ref","get_group_keys","into","into_make_service","into_request","max_decoding_message_size","max_encoding_message_size","new","poll_ready","poll_ready","send_compressed","to_owned","try_from","try_into","type_id","vzip","with_interceptor","v1","ApplicationData","AttestationBundle","AttestationEndorsement","AttestationEvidence","GetEncryptionKeyRequest","GetEncryptionKeyResponse","GetPublicKeyRequest","GetPublicKeyResponse","InvokeRequest","InvokeResponse","application_data","attestation","attestation_bundle","attestation_endorsement","attestation_evidence","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","config","default","default","default","default","default","default","default","default","default","default","digest","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encrypted_attestation_bundle","encrypted_encryption_key","encrypted_request","encrypted_response","encryption_public_key","endorsed_evidence","endorsements","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","evidence","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","into","into","into","into","into","into","into","into","into","into","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","signed_application_data","signing_public_key","tee_certificates","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip"],"q":[[0,"oak_containers_orchestrator"],[9,"oak_containers_orchestrator::container_runtime"],[10,"oak_containers_orchestrator::crypto"],[37,"oak_containers_orchestrator::dice"],[39,"oak_containers_orchestrator::ipc_server"],[52,"oak_containers_orchestrator::launcher_client"],[70,"oak_containers_orchestrator::logging"],[71,"oak_containers_orchestrator::metrics"],[82,"oak_containers_orchestrator::proto"],[83,"oak_containers_orchestrator::proto::oak"],[88,"oak_containers_orchestrator::proto::oak::attestation"],[89,"oak_containers_orchestrator::proto::oak::attestation::v1"],[474,"oak_containers_orchestrator::proto::oak::attestation::v1::endorsements"],[496,"oak_containers_orchestrator::proto::oak::containers"],[562,"oak_containers_orchestrator::proto::oak::containers::launcher_client"],[590,"oak_containers_orchestrator::proto::oak::containers::launcher_server"],[625,"oak_containers_orchestrator::proto::oak::containers::orchestrator_client"],[650,"oak_containers_orchestrator::proto::oak::containers::orchestrator_server"],[680,"oak_containers_orchestrator::proto::oak::containers::v1"],[876,"oak_containers_orchestrator::proto::oak::containers::v1::hostlib_key_provisioning_client"],[901,"oak_containers_orchestrator::proto::oak::containers::v1::hostlib_key_provisioning_server"],[931,"oak_containers_orchestrator::proto::oak::containers::v1::orchestrator_crypto_client"],[956,"oak_containers_orchestrator::proto::oak::containers::v1::orchestrator_crypto_server"],[986,"oak_containers_orchestrator::proto::oak::crypto"],[987,"oak_containers_orchestrator::proto::oak::crypto::v1"],[1092,"oak_containers_orchestrator::proto::oak::key_provisioning"],[1093,"oak_containers_orchestrator::proto::oak::key_provisioning::v1"],[1156,"oak_containers_orchestrator::proto::oak::key_provisioning::v1::key_provisioning_client"],[1180,"oak_containers_orchestrator::proto::oak::key_provisioning::v1::key_provisioning_server"],[1209,"oak_containers_orchestrator::proto::oak::session"],[1210,"oak_containers_orchestrator::proto::oak::session::v1"],[1418,"std::path"],[1419,"nix::unistd"],[1420,"nix::unistd"],[1421,"anyhow"],[1422,"core::result"],[1423,"oak_crypto::encryptor"],[1424,"alloc::sync"],[1425,"alloc::vec"],[1426,"tonic::request"],[1427,"anyhow"],[1428,"oak_attestation::dice"],[1429,"coset::cwt"],[1430,"ciborium::value"],[1431,"core::convert"],[1432,"core::clone"],[1433,"core::future::future"],[1434,"alloc::boxed"],[1435,"core::pin"],[1436,"http::uri"],[1437,"core::error"],[1438,"opentelemetry_otlp::exporter::tonic"],[1439,"core::cmp"],[1440,"core::fmt"],[1441,"core::fmt"],[1442,"core::option"],[1443,"coset::cwt"],[1444,"oak_dice::evidence"],[1445,"prost::encoding"],[1446,"prost::encoding"],[1447,"bytes::buf::buf_impl"],[1448,"core::fmt"],[1449,"tonic::body"],[1450,"tonic::client::service"],[1451,"tonic::transport::channel"],[1452,"tonic::transport::error"],[1453,"tonic::transport::channel::endpoint"],[1454,"core::convert"],[1455,"tonic::status"],[1456,"tonic::request"],[1457,"tonic::service::interceptor"],[1458,"http::request"],[1459,"tower_service"],[1460,"tonic::service::interceptor"],[1461,"core::marker"],[1462,"axum::routing::into_make_service"],[1463,"core::task::wake"],[1464,"core::task::poll"]],"d":["","","","","","","","","","","An implementation of the Key Store without group keys.","An implementation of the Key Store with initialized group …","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","Loads the DICE data from the file provided by Stage 1.","Measures the downloaded container image bytes and …","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","Utility struct used to interface with the launcher","","","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","Setup logging to syslog.","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","Keys used by the application to derive encryption session …","","","Message for passing embedded certificate authority …","","Message that is sent between DICE layers.","Endorsement contains statements that some entity (e.g. a …","Attestation Evidence used by the client to the identity of …","","","DICE layer evidence containing a certificate signed by the …","","","","Evidence generated by the Layer0.","","This proto defines the layered DICE Attestation Evidence.","Endorsement for binaries from the Transparent Release …","","","Application keys signed by the penultimate layer’s ECA …","","String value of the enum field names used in the ProtoBuf …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Certificate signing current layer’s measurements and the …","ECA private key that will be used by a layer to sign a …","Serialized ECA public key for Layer0 that is signed by the …","","","","","","","","","","","","","","","","","Certificate signing the encryption public key.","JSON string comtaining the endorsement statement for the …","The signature for the endorsement.","Nested message and enum types in <code>Endorsements</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Converts an <code>i32</code> to a <code>TeePlatform</code>, or <code>None</code> if <code>value</code> is not …","","","","","","","","","","","","","","","","","","Creates an enum from field names used in the ProtoBuf …","Extracts the <code>ClaimsSet</code> encoded in the ECA certificate of …","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","Returns <code>true</code> if <code>value</code> is a variant of <code>TeePlatform</code>.","","","","","","Layer1..LayerN-1 attestation evidence.","","","Returns the enum value of <code>platform</code>, or the default if the …","The platform providing the attestation report.","The log entry as proof of inclusion of the endorsement …","TEE-specific attestation report acting as a non-standard …","Layer0 attestation evidence.","","","Sets <code>platform</code> to the provided enum value.","Certificate signing the signing public key.","Endorsement of the Stage0 binary.","","","The serialized TEE certificate(s). The details of the …","Serialized X.509 TEE certificate.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Encodes the message to a buffer.","Returns the encoded length of the message without a length …","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","Decodes an instance of the message from a buffer, and …","","","","","","","As images can be large (hundreds of megabytes), the …","","","","","","","","","","","","","","","","","Arbitrary config that the container can retrieve from the …","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Generated client implementations.","Generated server implementations.","Generated client implementations.","Generated server implementations.","","","","","","","","","","","","","","","","","Defines the service exposed by the launcher, that can be …","Enable decompressing responses.","","","","","Attempt to create a new client by connecting to a given …","","Returns the argument unchanged.","","This method is used by the orchestrator to load and …","Provides orchestrator with the trusted container image.","Provides stage1 with the Oak system image (which contains …","Calls <code>U::from(self)</code>.","","Limits the maximum size of a decoded message.","Limits the maximum size of an encoded message.","","Notifies the launcher that the trusted app is ready to …","Sends Attestation Evidence containing the Attestation …","Compress requests with the given encoding.","","","","","","","","Server streaming response type for the GetContainerBundle …","Server streaming response type for the GetOakSystemImage …","Generated trait containing gRPC methods that should be …","Defines the service exposed by the launcher, that can be …","Enable decompressing requests with the given encoding.","","","","","","","","Returns the argument unchanged.","","","This method is used by the orchestrator to load and …","Provides orchestrator with the trusted container image.","Provides stage1 with the Oak system image (which contains …","Calls <code>U::from(self)</code>.","","","Limits the maximum size of a decoded message.","Limits the maximum size of an encoded message.","","Notifies the launcher that the trusted app is ready to …","","","Sends Attestation Evidence containing the Attestation …","Compress responses with the given encoding, if the client …","","","","","","","Defines the service exposed by the orchestrator, that can …","Enable decompressing responses.","","","","","Attempt to create a new client by connecting to a given …","","Returns the argument unchanged.","","Exposes the previously loaded trusted application config …","Calls <code>U::from(self)</code>.","","Limits the maximum size of a decoded message.","Limits the maximum size of an encoded message.","","Notifies the orchestrator that the trusted app is ready to …","Compress requests with the given encoding.","","","","","","","","Generated trait containing gRPC methods that should be …","Defines the service exposed by the orchestrator, that can …","Enable decompressing requests with the given encoding.","","","","","","","","Returns the argument unchanged.","","","Exposes the previously loaded trusted application config …","Calls <code>U::from(self)</code>.","","","Limits the maximum size of a decoded message.","Limits the maximum size of an encoded message.","","Notifies the orchestrator that the trusted app is ready to …","","","Compress responses with the given encoding, if the client …","","","","","","","","","","","","","","Choice between a key generated by the enclave instance and …","","","","","","","String value of the enum field names used in the ProtoBuf …","String value of the enum field names used in the ProtoBuf …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Converts an <code>i32</code> to a <code>KeyOrigin</code>, or <code>None</code> if <code>value</code> is not a …","Converts an <code>i32</code> to a <code>KeyProvisioningRole</code>, or <code>None</code> if <code>value</code> …","","","","","","","","","Creates an enum from field names used in the ProtoBuf …","Creates an enum from field names used in the ProtoBuf …","","","","Generated client implementations.","Generated server implementations.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","Returns <code>true</code> if <code>value</code> is a variant of <code>KeyOrigin</code>.","Returns <code>true</code> if <code>value</code> is a variant of <code>KeyProvisioningRole</code>.","Returns the enum value of <code>key_origin</code>, or the default if …","Returns the enum value of <code>key_origin</code>, or the default if …","","","","Generated client implementations.","Generated server implementations.","","","Returns the enum value of <code>role</code>, or the default if the …","","Ephemeral Diffie-Hellman client public key that is needed …","Session keys for decrypting client requests and encrypting …","Sets <code>key_origin</code> to the provided enum value.","Sets <code>key_origin</code> to the provided enum value.","Sets <code>role</code> to the provided enum value.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Defines the service exposed by the Hostlib that is used …","Enable decompressing responses.","","","","","Attempt to create a new client by connecting to a given …","","Returns the argument unchanged.","","Get enclave group keys to the enclave as part of Key …","Get the enclave role for Key Provisioning. Could be one of …","Calls <code>U::from(self)</code>.","","Limits the maximum size of a decoded message.","Limits the maximum size of an encoded message.","","Compress requests with the given encoding.","","","","","","","","Generated trait containing gRPC methods that should be …","Defines the service exposed by the Hostlib that is used …","Enable decompressing requests with the given encoding.","","","","","","","","Returns the argument unchanged.","","","Get enclave group keys to the enclave as part of Key …","Get the enclave role for Key Provisioning. Could be one of …","Calls <code>U::from(self)</code>.","","","Limits the maximum size of a decoded message.","Limits the maximum size of an encoded message.","","","","Compress responses with the given encoding, if the client …","","","","","","","RPC service that is exposed to an enclave application and …","Enable decompressing responses.","","","","","Attempt to create a new client by connecting to a given …","Derives session keys for decrypting client requests and …","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","Limits the maximum size of a decoded message.","Limits the maximum size of an encoded message.","","Compress requests with the given encoding.","Signs the provided message using the hardware rooted …","","","","","","","","Generated trait containing gRPC methods that should be …","RPC service that is exposed to an enclave application and …","Enable decompressing requests with the given encoding.","","","","","","","Derives session keys for decrypting client requests and …","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","Limits the maximum size of a decoded message.","Limits the maximum size of an encoded message.","","","","Compress responses with the given encoding, if the client …","Signs the provided message using the hardware rooted …","","","","","","","","Message encrypted with Authenticated Encryption with …","Request message encrypted using Hybrid Public Key …","Response message encrypted Hybrid Public Key Encryption …","Envelope containing session keys required to …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Message encrypted with Authenticated Encryption with …","Message encrypted with Authenticated Encryption with …","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","AEAD key for encrypting/decrypting client requests.","AEAD key for encrypting/decrypting enclave responses.","Returns the value of <code>serialized_encapsulated_public_key</code>, …","Ephemeral Diffie-Hellman client public key that is needed …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Encryption private key that was encrypted with HPKE using …","","","","","Evidence contains the encryption public key for encrypting …","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Generated client implementations.","Generated server implementations.","","","","","","","","","","","","","","","","Defines the Key Provisioning Service that distributes keys …","Enable decompressing responses.","","","","","Attempt to create a new client by connecting to a given …","","Returns the argument unchanged.","","Request enclave group keys from for other enclaves as part …","Calls <code>U::from(self)</code>.","","Limits the maximum size of a decoded message.","Limits the maximum size of an encoded message.","","Compress requests with the given encoding.","","","","","","","","Generated trait containing gRPC methods that should be …","Defines the Key Provisioning Service that distributes keys …","Enable decompressing requests with the given encoding.","","","","","","","","Returns the argument unchanged.","","","Request enclave group keys from for other enclaves as part …","Calls <code>U::from(self)</code>.","","","Limits the maximum size of a decoded message.","Limits the maximum size of an encoded message.","","","","Compress responses with the given encoding, if the client …","","","","","","","","","AttestationBundle contains the information that the …","AttestationEndorsement contains statements that some …","AttestationEvidence contains all the information that …","","","","","","","The optional application-specific data.","The serialized attestation report binding the public key.","The enclave’s signing and encryption public keys and …","Supporting evidence required for verifying the integrity …","Attestation evidence from the enclave.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The serialized application configuration. The format of …","","","","","","","","","","","The cryptographic digest of the application, of the form …","","","","","","","","","","","Encrypted attestation evidence of the dependent enclave.","Encrypted private key of the leader enclave.","Body of the request, encrypted using Hybrid Public Key …","Body of the request, encrypted using Hybrid Public Key …","The serialized public key part of the enclave encryption …","Attestation evidence and public key.","Thea attestation endorsements.","","","","","","","","","","","The DICE attestation evidence.","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","The signature over the application_data, signed by the …","The serialized public key part of the enclave signing key. …","The serialized TEE certificate(s). The details of the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,10,11,10,11,10,10,11,10,10,11,10,10,11,10,11,10,10,10,11,10,11,10,11,10,11,0,0,0,25,25,0,25,25,25,25,25,25,25,25,25,0,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,0,0,35,35,35,35,35,0,35,35,35,35,0,0,0,0,0,0,0,36,0,0,0,0,0,0,0,0,36,0,0,0,0,0,0,0,0,0,36,45,34,49,36,47,48,38,39,40,34,36,41,42,43,44,45,46,47,48,49,50,51,52,38,39,40,34,36,41,42,43,44,45,46,47,48,49,50,51,52,42,38,39,40,34,41,42,43,44,45,46,47,48,49,50,51,52,38,39,40,34,36,41,42,43,44,45,46,47,48,49,50,51,52,38,39,40,34,36,41,42,43,44,45,46,47,48,49,50,51,52,36,36,47,48,50,38,39,40,34,36,41,42,43,44,45,46,47,48,49,50,51,52,42,39,41,38,38,39,40,34,41,42,43,44,45,46,47,48,49,50,51,52,40,43,43,0,38,39,40,34,36,41,42,43,44,45,46,47,48,49,50,51,52,36,36,36,36,42,38,39,40,34,36,41,42,43,44,45,46,47,48,49,50,51,52,38,39,40,34,36,36,41,42,42,43,44,45,46,47,48,49,50,51,52,36,38,39,40,34,36,41,42,43,44,45,46,47,48,49,50,51,52,36,39,36,45,38,39,40,34,36,41,42,43,44,45,46,47,48,49,50,51,52,38,39,40,34,36,41,42,43,44,45,46,47,48,49,50,51,52,36,45,45,49,50,45,34,45,36,38,38,43,38,34,49,50,38,40,44,46,50,44,51,38,39,40,34,36,41,42,43,44,45,46,47,48,49,50,51,52,38,38,39,39,40,40,34,34,36,41,42,42,43,44,45,46,47,48,49,50,51,52,38,39,40,34,36,41,42,43,44,45,46,47,48,49,50,51,52,52,38,39,40,34,36,41,42,43,44,45,46,47,48,49,50,51,52,38,39,40,34,36,41,42,43,44,45,46,47,48,49,50,51,52,68,68,68,0,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,0,0,0,75,76,77,75,76,77,75,76,77,75,76,77,75,76,77,76,75,76,77,77,75,76,77,75,76,77,77,75,76,77,75,76,77,75,76,77,75,75,76,77,75,76,77,0,0,0,0,75,76,77,75,76,77,75,76,77,75,76,77,0,75,76,77,0,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,97,97,0,0,96,96,96,96,96,96,96,96,96,96,96,97,97,97,96,96,96,96,96,96,97,96,96,97,96,96,96,96,96,96,96,0,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,0,0,104,104,104,104,104,104,104,104,104,104,104,105,104,104,104,104,104,104,105,104,104,104,104,104,104,104,104,104,31,0,0,0,0,106,106,0,0,31,0,0,106,31,106,31,107,108,109,110,106,111,112,31,107,108,109,110,106,111,112,31,107,108,109,110,111,112,107,108,109,110,106,111,112,31,107,108,109,110,106,111,112,31,106,31,106,31,107,108,109,110,106,111,112,31,107,108,109,110,111,112,107,108,109,110,106,111,112,31,106,106,106,106,31,31,31,31,107,108,109,110,106,111,112,31,107,108,109,110,106,111,112,31,106,31,107,108,109,110,106,111,112,31,106,31,112,106,31,0,0,107,108,109,110,106,111,112,31,107,108,109,110,106,111,112,31,106,31,107,109,107,109,109,0,0,106,31,111,111,107,108,107,109,111,110,107,108,109,110,106,111,112,31,107,108,109,110,106,111,112,31,107,108,109,110,106,111,112,31,107,108,109,110,106,111,112,31,107,108,109,110,106,111,112,31,0,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,0,0,114,114,114,114,114,114,114,114,114,114,114,115,115,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,0,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,0,0,117,117,117,117,117,117,117,118,117,117,117,117,117,117,117,117,117,117,117,117,117,118,117,117,117,117,117,117,0,0,0,0,0,0,121,119,120,121,122,123,119,120,121,122,123,121,119,120,121,122,123,119,120,121,122,123,119,120,121,122,123,119,120,121,122,123,119,120,121,122,123,119,120,119,120,121,122,123,119,120,121,122,123,119,120,121,122,123,119,120,121,122,123,119,120,121,122,123,119,120,121,122,123,121,122,122,119,119,123,119,120,121,122,123,119,120,121,122,123,119,120,121,122,123,119,120,121,122,123,119,120,121,122,123,0,0,0,0,16,124,125,16,124,125,16,124,125,16,124,125,16,124,125,16,124,125,16,124,125,16,124,16,124,125,124,16,124,125,16,124,125,16,124,125,125,16,124,125,16,124,125,0,0,16,124,125,16,124,125,16,124,125,16,124,125,16,124,125,0,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,0,0,127,127,127,127,127,127,127,127,127,127,127,128,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,0,0,0,0,0,0,0,0,0,0,0,130,33,133,129,129,33,129,130,131,132,133,134,135,136,137,33,129,130,131,132,133,134,135,136,137,33,129,130,131,132,133,134,135,136,137,33,129,130,131,132,133,134,135,136,137,33,129,130,131,132,133,134,135,136,137,131,33,129,130,131,132,133,134,135,136,137,131,33,129,130,131,132,133,134,135,136,137,136,137,134,135,33,137,129,33,129,130,131,132,133,134,135,136,137,129,33,129,130,131,132,133,134,135,136,137,33,129,130,131,132,133,134,135,136,137,33,129,130,131,132,133,134,135,136,137,33,129,130,131,132,133,134,135,136,137,33,129,130,131,132,133,134,135,136,137,33,33,130,33,129,130,131,132,133,134,135,136,137,33,129,130,131,132,133,134,135,136,137,33,129,130,131,132,133,134,135,136,137,33,129,130,131,132,133,134,135,136,137,33,129,130,131,132,133,134,135,136,137],"f":[0,0,0,0,0,0,0,0,0,[[[2,[1]],3,4,5,3,6],[[9,[7,8]]]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],10],[-1,-1,[]],[-1,-1,[]],[10,11],[10,[[13,[12]]]],[11,[[13,[12]]]],[10,[[14,[1]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[[],10],[[10,16],[[17,[11]]]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,18,[]],[-1,18,[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],[[17,[19]]]],[[[2,[1]],[2,[1]]],[[14,[[7,[20,21]]]]]],0,[-1,-2,[],[]],[-1,-2,[],[]],[[-1,[13,[11]],[14,[1]],[13,[22]],6],[[9,[7,8]]],[[23,[3]],24]],[-1,-1,[]],[[25,[15,[7]]],[[28,[[27,[26]]]]]],[-1,-2,[],[]],[-1,[[15,[-2]]],[],[]],[[25,[15,[7]]],[[28,[[27,[26]]]]]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,18,[]],[-1,-2,[],[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[29,[[9,[22,[27,[30]]]]]],[-1,-1,[]],[22,[[9,[[14,[1]],[27,[30]]]]]],[22,[[9,[[14,[1]],[27,[30]]]]]],[22,[[17,[16]]]],[22,[[17,[31]]]],[-1,-2,[],[]],[-1,[[15,[-2]]],[],[]],[22,[[9,[7,[27,[30]]]]]],[22,32],[[22,33,34],[[9,[7,[27,[30]]]]]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,18,[]],[-1,-2,[],[]],[[],[[17,[7]]]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-1,[]],[-1,-2,[],[]],[-1,[[15,[-2]]],[],[]],[[[13,[22]]],[[17,[35]]]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,18,[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[36,37],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[38,7],[39,7],[40,7],[34,7],[41,7],[42,7],[43,7],[44,7],[45,7],[46,7],[47,7],[48,7],[49,7],[50,7],[51,7],[52,7],[38,38],[39,39],[40,40],[34,34],[36,36],[41,41],[42,42],[43,43],[44,44],[45,45],[46,46],[47,47],[48,48],[49,49],[50,50],[51,51],[52,52],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[36,36],53],[[-1,-2],53,[],[]],0,0,0,[[],38],[[],39],[[],40],[[],34],[[],36],[[],41],[[],42],[[],43],[[],44],[[],45],[[],46],[[],47],[[],48],[[],49],[[],50],[[],51],[[],52],[42,7],0,0,0,[38,54],[39,54],[40,54],[34,54],[41,54],[42,54],[43,54],[44,54],[45,54],[46,54],[47,54],[48,54],[49,54],[50,54],[51,54],[52,54],0,0,0,0,[[38,38],55],[[39,39],55],[[40,40],55],[[34,34],55],[[36,36],55],[[41,41],55],[[42,42],55],[[43,43],55],[[44,44],55],[[45,45],55],[[46,46],55],[[47,47],55],[[48,48],55],[[49,49],55],[[50,50],55],[[51,51],55],[[52,52],55],[[-1,-2],55,[],[]],[[-1,-2],55,[],[]],[[-1,-2],55,[],[]],[[-1,-2],55,[],[]],0,[[38,56],[[9,[7,57]]]],[[39,56],[[9,[7,57]]]],[[40,56],[[9,[7,57]]]],[[34,56],[[9,[7,57]]]],[[36,56],[[9,[7,57]]]],[[41,56],[[9,[7,57]]]],[[42,56],[[9,[7,57]]]],[[43,56],[[9,[7,57]]]],[[44,56],[[9,[7,57]]]],[[45,56],[[9,[7,57]]]],[[46,56],[[9,[7,57]]]],[[47,56],[[9,[7,57]]]],[[48,56],[[9,[7,57]]]],[[49,56],[[9,[7,57]]]],[[50,56],[[9,[7,57]]]],[[51,56],[[9,[7,57]]]],[[52,56],[[9,[7,57]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[58,36],[-1,-1,[]],[19,42],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[59,[[60,[36]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[37,[[60,[36]]]],[39,[[9,[61,8]]]],[[36,-1],7,62],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[59,55],0,0,0,0,0,0,0,[[36,36],[[60,[53]]]],[38,36],0,0,0,0,0,0,[[38,36],7],0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[9,[-2]]],[],[]],[63,[[9,[38,8]]]],[-1,[[9,[-2]]],[],[]],[64,[[9,[39,8]]]],[-1,[[9,[-2]]],[],[]],[65,[[9,[40,8]]]],[-1,[[9,[-2]]],[],[]],[66,[[9,[34,8]]]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[67,[[9,[42,8]]]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],0,[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[68,68],[[-1,-2],7,[],[]],[[68,-1],7,69],[68,54],[[68,68],55],[[68,56],[[9,[7,57]]]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,[[15,[-2]]],[],[]],[[[60,[68]],70,71,-1,72],[[9,[7,73]]],74],[-1,-2,[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,18,[]],[-1,-2,[],[]],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[75,7],[76,7],[77,7],[75,75],[76,76],[77,77],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],0,[[],75],[[],76],[[],77],0,[75,54],[76,54],[77,54],[[75,75],55],[[76,76],55],[[77,77],55],0,[[75,56],78],[[76,56],78],[[77,56],78],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[[79,[-1]],80],[[79,[-1]]],[[82,[81]]]],[-1,-2,[],[]],[-1,-2,[],[]],[[[79,[-1]]],[[79,[-1]]],24],[[-1,-2],7,[],[]],[-1,[[9,[[79,[83]],84]]],[[86,[85]]]],[[[79,[-1]],56],78,87],[-1,-1,[]],[-1,-1,[]],[[[79,[-1]],-2],[[9,[[88,[76]],89]]],[[82,[81]]],[[90,[7]]]],[[[79,[-1]],-2],[[9,[[88,[[91,[75]]]],89]]],[[82,[81]]],[[90,[7]]]],[[[79,[-1]],-2],[[9,[[88,[[91,[75]]]],89]]],[[82,[81]]],[[90,[7]]]],[-1,-2,[],[]],[-1,[[15,[-2]]],[],[]],[[[79,[-1]],54],[[79,[-1]]],[[82,[81]]]],[[[79,[-1]],54],[[79,[-1]]],[[82,[81]]]],[-1,[[79,[-1]]],[[82,[81]]]],[[[79,[-1]],-2],[[9,[[88,[7]],89]]],[[82,[81]]],[[90,[7]]]],[[[79,[-1]],-2],[[9,[[88,[7]],89]]],[[82,[81]]],[[90,[77]]]],[[[79,[-1]],80],[[79,[-1]]],[[82,[81]]]],[-1,-2,[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,18,[]],[-1,-2,[],[]],[[-1,-2],[[79,[[92,[-1,-2]]]]],[[94,[[93,[81]]]],[82,[81]]],95],[[-1,29],[[79,[-1]]],[[82,[81]]]],0,0,0,0,[[[96,[-1]],80],[[96,[-1]]],97],[-1,-2,[],[]],[-1,-2,[],[]],[[-1,[93,[-2]]],[],[],[]],[[[96,[-1]],[93,[-2]]],[],97,[98,99]],[[[96,[-1]]],[[96,[-1]]],97],[[-1,-2],7,[],[]],[[[96,[-1]],56],78,[87,97]],[-1,-1,[]],[[[13,[-1]]],[[96,[-1]]],97],[-1,-1,[]],[[-1,[15,[7]]],[[28,[[27,[26]]]]],[]],[[-1,[15,[7]]],[[28,[[27,[26]]]]],[]],[[-1,[15,[7]]],[[28,[[27,[26]]]]],[]],[-1,-2,[],[]],[-1,[[100,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[[[96,[-1]],54],[[96,[-1]]],97],[[[96,[-1]],54],[[96,[-1]]],97],[-1,[[96,[-1]]],97],[[-1,[15,[7]]],[[28,[[27,[26]]]]],[]],[[[96,[-1]],101],[[102,[[9,[7]]]]],97],[[-1,101],[[102,[[9,[7]]]]],[]],[[-1,[15,[77]]],[[28,[[27,[26]]]]],[]],[[[96,[-1]],80],[[96,[-1]]],97],[-1,-2,[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,18,[]],[-1,-2,[],[]],[[-1,-2],[[92,[[96,[-1]],-2]]],97,95],0,[[[103,[-1]],80],[[103,[-1]]],[[82,[81]]]],[-1,-2,[],[]],[-1,-2,[],[]],[[[103,[-1]]],[[103,[-1]]],24],[[-1,-2],7,[],[]],[-1,[[9,[[103,[83]],84]]],[[86,[85]]]],[[[103,[-1]],56],78,87],[-1,-1,[]],[-1,-1,[]],[[[103,[-1]],-2],[[9,[[88,[76]],89]]],[[82,[81]]],[[90,[7]]]],[-1,-2,[],[]],[-1,[[15,[-2]]],[],[]],[[[103,[-1]],54],[[103,[-1]]],[[82,[81]]]],[[[103,[-1]],54],[[103,[-1]]],[[82,[81]]]],[-1,[[103,[-1]]],[[82,[81]]]],[[[103,[-1]],-2],[[9,[[88,[7]],89]]],[[82,[81]]],[[90,[7]]]],[[[103,[-1]],80],[[103,[-1]]],[[82,[81]]]],[-1,-2,[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,18,[]],[-1,-2,[],[]],[[-1,-2],[[103,[[92,[-1,-2]]]]],[[94,[[93,[81]]]],[82,[81]]],95],[[-1,29],[[103,[-1]]],[[82,[81]]]],0,0,[[[104,[-1]],80],[[104,[-1]]],105],[-1,-2,[],[]],[-1,-2,[],[]],[[[104,[-1]],[93,[-2]]],[],105,[98,99]],[[-1,[93,[-2]]],[],[],[]],[[[104,[-1]]],[[104,[-1]]],105],[[-1,-2],7,[],[]],[[[104,[-1]],56],78,[87,105]],[-1,-1,[]],[[[13,[-1]]],[[104,[-1]]],105],[-1,-1,[]],[[-1,[15,[7]]],[[28,[[27,[26]]]]],[]],[-1,-2,[],[]],[-1,[[100,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[[[104,[-1]],54],[[104,[-1]]],105],[[[104,[-1]],54],[[104,[-1]]],105],[-1,[[104,[-1]]],105],[[-1,[15,[7]]],[[28,[[27,[26]]]]],[]],[[-1,101],[[102,[[9,[7]]]]],[]],[[[104,[-1]],101],[[102,[[9,[7]]]]],105],[[[104,[-1]],80],[[104,[-1]]],105],[-1,-2,[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,18,[]],[-1,-2,[],[]],[[-1,-2],[[92,[[104,[-1]],-2]]],105,95],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[106,37],[31,37],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[107,7],[108,7],[109,7],[110,7],[111,7],[112,7],[107,107],[108,108],[109,109],[110,110],[106,106],[111,111],[112,112],[31,31],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[106,106],53],[[31,31],53],[[-1,-2],53,[],[]],[[-1,-2],53,[],[]],[[],107],[[],108],[[],109],[[],110],[[],106],[[],111],[[],112],[[],31],[107,54],[108,54],[109,54],[110,54],[111,54],[112,54],[[107,107],55],[[108,108],55],[[109,109],55],[[110,110],55],[[106,106],55],[[111,111],55],[[112,112],55],[[31,31],55],[[-1,-2],55,[],[]],[[-1,-2],55,[],[]],[[-1,-2],55,[],[]],[[-1,-2],55,[],[]],[[-1,-2],55,[],[]],[[-1,-2],55,[],[]],[[-1,-2],55,[],[]],[[-1,-2],55,[],[]],[[107,56],78],[[108,56],78],[[109,56],78],[[110,56],78],[[106,56],78],[[111,56],78],[[112,56],78],[[31,56],78],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[59,[[60,[106]]]],[59,[[60,[31]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[37,[[60,[106]]]],[37,[[60,[31]]]],0,[[106,-1],7,62],[[31,-1],7,62],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[59,55],[59,55],[107,106],[109,106],0,0,0,0,0,[[106,106],[[60,[53]]]],[[31,31],[[60,[53]]]],[111,31],0,0,0,[[107,106],7],[[109,106],7],[[111,31],7],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[[113,[-1]],80],[[113,[-1]]],[[82,[81]]]],[-1,-2,[],[]],[-1,-2,[],[]],[[[113,[-1]]],[[113,[-1]]],24],[[-1,-2],7,[],[]],[-1,[[9,[[113,[83]],84]]],[[86,[85]]]],[[[113,[-1]],56],78,87],[-1,-1,[]],[-1,-1,[]],[[[113,[-1]],-2],[[9,[[88,[112]],89]]],[[82,[81]]],[[90,[7]]]],[[[113,[-1]],-2],[[9,[[88,[111]],89]]],[[82,[81]]],[[90,[7]]]],[-1,-2,[],[]],[-1,[[15,[-2]]],[],[]],[[[113,[-1]],54],[[113,[-1]]],[[82,[81]]]],[[[113,[-1]],54],[[113,[-1]]],[[82,[81]]]],[-1,[[113,[-1]]],[[82,[81]]]],[[[113,[-1]],80],[[113,[-1]]],[[82,[81]]]],[-1,-2,[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,18,[]],[-1,-2,[],[]],[[-1,-2],[[113,[[92,[-1,-2]]]]],[[94,[[93,[81]]]],[82,[81]]],95],[[-1,29],[[113,[-1]]],[[82,[81]]]],0,0,[[[114,[-1]],80],[[114,[-1]]],115],[-1,-2,[],[]],[-1,-2,[],[]],[[[114,[-1]],[93,[-2]]],[],115,[98,99]],[[-1,[93,[-2]]],[],[],[]],[[[114,[-1]]],[[114,[-1]]],115],[[-1,-2],7,[],[]],[[[114,[-1]],56],78,[87,115]],[-1,-1,[]],[[[13,[-1]]],[[114,[-1]]],115],[-1,-1,[]],[[-1,[15,[7]]],[[28,[[27,[26]]]]],[]],[[-1,[15,[7]]],[[28,[[27,[26]]]]],[]],[-1,-2,[],[]],[-1,[[100,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[[[114,[-1]],54],[[114,[-1]]],115],[[[114,[-1]],54],[[114,[-1]]],115],[-1,[[114,[-1]]],115],[[[114,[-1]],101],[[102,[[9,[7]]]]],115],[[-1,101],[[102,[[9,[7]]]]],[]],[[[114,[-1]],80],[[114,[-1]]],115],[-1,-2,[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,18,[]],[-1,-2,[],[]],[[-1,-2],[[92,[[114,[-1]],-2]]],115,95],0,[[[116,[-1]],80],[[116,[-1]]],[[82,[81]]]],[-1,-2,[],[]],[-1,-2,[],[]],[[[116,[-1]]],[[116,[-1]]],24],[[-1,-2],7,[],[]],[-1,[[9,[[116,[83]],84]]],[[86,[85]]]],[[[116,[-1]],-2],[[9,[[88,[108]],89]]],[[82,[81]]],[[90,[107]]]],[[[116,[-1]],56],78,87],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,[[15,[-2]]],[],[]],[[[116,[-1]],54],[[116,[-1]]],[[82,[81]]]],[[[116,[-1]],54],[[116,[-1]]],[[82,[81]]]],[-1,[[116,[-1]]],[[82,[81]]]],[[[116,[-1]],80],[[116,[-1]]],[[82,[81]]]],[[[116,[-1]],-2],[[9,[[88,[110]],89]]],[[82,[81]]],[[90,[109]]]],[-1,-2,[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,18,[]],[-1,-2,[],[]],[[-1,-2],[[116,[[92,[-1,-2]]]]],[[94,[[93,[81]]]],[82,[81]]],95],[[-1,29],[[116,[-1]]],[[82,[81]]]],0,0,[[[117,[-1]],80],[[117,[-1]]],118],[-1,-2,[],[]],[-1,-2,[],[]],[[-1,[93,[-2]]],[],[],[]],[[[117,[-1]],[93,[-2]]],[],118,[98,99]],[[[117,[-1]]],[[117,[-1]]],118],[[-1,-2],7,[],[]],[[-1,[15,[107]]],[[28,[[27,[26]]]]],[]],[[[117,[-1]],56],78,[87,118]],[-1,-1,[]],[[[13,[-1]]],[[117,[-1]]],118],[-1,-1,[]],[-1,-2,[],[]],[-1,[[100,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[[[117,[-1]],54],[[117,[-1]]],118],[[[117,[-1]],54],[[117,[-1]]],118],[-1,[[117,[-1]]],118],[[[117,[-1]],101],[[102,[[9,[7]]]]],118],[[-1,101],[[102,[[9,[7]]]]],[]],[[[117,[-1]],80],[[117,[-1]]],118],[[-1,[15,[109]]],[[28,[[27,[26]]]]],[]],[-1,-2,[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,18,[]],[-1,-2,[],[]],[[-1,-2],[[92,[[117,[-1]],-2]]],118,95],0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[119,7],[120,7],[121,7],[122,7],[123,7],[119,119],[120,120],[121,121],[122,122],[123,123],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[],119],[[],120],[[],121],[[],122],[[],123],[119,54],[120,54],[121,54],[122,54],[123,54],0,0,[[119,119],55],[[120,120],55],[[121,121],55],[[122,122],55],[[123,123],55],[[119,56],[[9,[7,57]]]],[[120,56],[[9,[7,57]]]],[[121,56],[[9,[7,57]]]],[[122,56],[[9,[7,57]]]],[[123,56],[[9,[7,57]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],0,0,0,[119,[[2,[1]]]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[16,7],[124,7],[125,7],[16,16],[124,124],[125,125],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[],16],[[],124],[[],125],[16,54],[124,54],[125,54],0,0,[[16,16],55],[[124,124],55],[[125,125],55],0,[[16,56],78],[[124,56],78],[[125,56],78],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[[126,[-1]],80],[[126,[-1]]],[[82,[81]]]],[-1,-2,[],[]],[-1,-2,[],[]],[[[126,[-1]]],[[126,[-1]]],24],[[-1,-2],7,[],[]],[-1,[[9,[[126,[83]],84]]],[[86,[85]]]],[[[126,[-1]],56],78,87],[-1,-1,[]],[-1,-1,[]],[[[126,[-1]],-2],[[9,[[88,[125]],89]]],[[82,[81]]],[[90,[124]]]],[-1,-2,[],[]],[-1,[[15,[-2]]],[],[]],[[[126,[-1]],54],[[126,[-1]]],[[82,[81]]]],[[[126,[-1]],54],[[126,[-1]]],[[82,[81]]]],[-1,[[126,[-1]]],[[82,[81]]]],[[[126,[-1]],80],[[126,[-1]]],[[82,[81]]]],[-1,-2,[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,18,[]],[-1,-2,[],[]],[[-1,-2],[[126,[[92,[-1,-2]]]]],[[94,[[93,[81]]]],[82,[81]]],95],[[-1,29],[[126,[-1]]],[[82,[81]]]],0,0,[[[127,[-1]],80],[[127,[-1]]],128],[-1,-2,[],[]],[-1,-2,[],[]],[[[127,[-1]],[93,[-2]]],[],128,[98,99]],[[-1,[93,[-2]]],[],[],[]],[[[127,[-1]]],[[127,[-1]]],128],[[-1,-2],7,[],[]],[[[127,[-1]],56],78,[87,128]],[-1,-1,[]],[[[13,[-1]]],[[127,[-1]]],128],[-1,-1,[]],[[-1,[15,[124]]],[[28,[[27,[26]]]]],[]],[-1,-2,[],[]],[-1,[[100,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[[[127,[-1]],54],[[127,[-1]]],128],[[[127,[-1]],54],[[127,[-1]]],128],[-1,[[127,[-1]]],128],[[-1,101],[[102,[[9,[7]]]]],[]],[[[127,[-1]],101],[[102,[[9,[7]]]]],128],[[[127,[-1]],80],[[127,[-1]]],128],[-1,-2,[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,18,[]],[-1,-2,[],[]],[[-1,-2],[[92,[[127,[-1]],-2]]],128,95],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[33,7],[129,7],[130,7],[131,7],[132,7],[133,7],[134,7],[135,7],[136,7],[137,7],[33,33],[129,129],[130,130],[131,131],[132,132],[133,133],[134,134],[135,135],[136,136],[137,137],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],0,[[],33],[[],129],[[],130],[[],131],[[],132],[[],133],[[],134],[[],135],[[],136],[[],137],0,[33,54],[129,54],[130,54],[131,54],[132,54],[133,54],[134,54],[135,54],[136,54],[137,54],0,0,0,0,0,0,0,[[33,33],55],[[129,129],55],[[130,130],55],[[131,131],55],[[132,132],55],[[133,133],55],[[134,134],55],[[135,135],55],[[136,136],55],[[137,137],55],0,[[33,56],[[9,[7,57]]]],[[129,56],[[9,[7,57]]]],[[130,56],[[9,[7,57]]]],[[131,56],[[9,[7,57]]]],[[132,56],[[9,[7,57]]]],[[133,56],[[9,[7,57]]]],[[134,56],[[9,[7,57]]]],[[135,56],[[9,[7,57]]]],[[136,56],[[9,[7,57]]]],[[137,56],[[9,[7,57]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]]],"c":[525,1223,1224],"p":[[15,"u8"],[15,"slice"],[3,"Path",1418],[3,"Uid",1419],[3,"Gid",1419],[3,"CancellationToken",1420],[15,"tuple"],[3,"Error",1421],[4,"Result",1422],[3,"InstanceKeyStore",10],[3,"KeyStore",10],[3,"EncryptionKeyProvider",1423],[3,"Arc",1424],[3,"Vec",1425],[3,"Request",1426],[3,"GroupKeys",1093],[6,"Result",1421],[3,"TypeId",1427],[3,"DiceBuilder",1428],[6,"ClaimName",1429],[4,"Value",1430],[3,"LauncherClient",52],[8,"AsRef",1431],[8,"Clone",1432],[3,"ServiceImplementation",39],[8,"Future",1433],[3,"Box",1434],[3,"Pin",1435],[3,"Uri",1436],[8,"Error",1437],[4,"KeyProvisioningRole",680],[3,"TonicExporterBuilder",1438],[3,"AttestationEvidence",1210],[3,"Evidence",89],[3,"SystemMetrics",71],[4,"TeePlatform",89],[15,"str"],[3,"RootLayerEvidence",89],[3,"LayerEvidence",89],[3,"ApplicationKeys",89],[3,"CertificateAuthority",89],[3,"DiceData",89],[3,"TransparentReleaseEndorsement",89],[3,"RootLayerEndorsements",89],[3,"KernelLayerEndorsements",89],[3,"SystemLayerEndorsements",89],[3,"ApplicationLayerEndorsements",89],[3,"ContainerLayerEndorsements",89],[3,"OakRestrictedKernelEndorsements",89],[3,"OakContainersEndorsements",89],[3,"CbEndorsements",89],[3,"Endorsements",89],[4,"Ordering",1439],[15,"usize"],[15,"bool"],[3,"Formatter",1440],[3,"Error",1440],[4,"TeePlatform",1441],[15,"i32"],[4,"Option",1442],[3,"ClaimsSet",1429],[8,"Hasher",1443],[3,"RootLayerEvidence",1441],[3,"LayerEvidence",1441],[3,"ApplicationKeys",1441],[3,"Evidence",1441],[3,"Stage0DiceData",1441],[4,"Type",474],[8,"BufMut",1444],[15,"u32"],[4,"WireType",1445],[3,"DecodeContext",1445],[3,"DecodeError",1446],[8,"Buf",1447],[3,"GetImageResponse",496],[3,"GetApplicationConfigResponse",496],[3,"SendAttestationEvidenceRequest",496],[6,"Result",1440],[3,"LauncherClient",562],[4,"CompressionEncoding",1448],[6,"BoxBody",1449],[8,"GrpcService",1450],[3,"Channel",1451],[3,"Error",1452],[3,"Endpoint",1453],[8,"TryInto",1431],[8,"Debug",1440],[3,"Response",1454],[3,"Status",1455],[8,"IntoRequest",1426],[3,"Streaming",1456],[3,"InterceptedService",1457],[3,"Request",1458],[8,"Service",1459],[8,"Interceptor",1457],[3,"LauncherServer",590],[8,"Launcher",590],[8,"Body",1460],[8,"Send",1461],[3,"IntoMakeService",1462],[3,"Context",1463],[4,"Poll",1464],[3,"OrchestratorClient",625],[3,"OrchestratorServer",650],[8,"Orchestrator",650],[4,"KeyOrigin",680],[3,"DeriveSessionKeysRequest",680],[3,"DeriveSessionKeysResponse",680],[3,"SignRequest",680],[3,"SignResponse",680],[3,"GetKeyProvisioningRoleResponse",680],[3,"GetGroupKeysResponse",680],[3,"HostlibKeyProvisioningClient",876],[3,"HostlibKeyProvisioningServer",901],[8,"HostlibKeyProvisioning",901],[3,"OrchestratorCryptoClient",931],[3,"OrchestratorCryptoServer",956],[8,"OrchestratorCrypto",956],[3,"EncryptedRequest",987],[3,"EncryptedResponse",987],[3,"AeadEncryptedMessage",987],[3,"SessionKeys",987],[3,"Signature",987],[3,"GetGroupKeysRequest",1093],[3,"GetGroupKeysResponse",1093],[3,"KeyProvisioningClient",1156],[3,"KeyProvisioningServer",1180],[8,"KeyProvisioning",1180],[3,"AttestationBundle",1210],[3,"AttestationEndorsement",1210],[3,"ApplicationData",1210],[3,"GetPublicKeyRequest",1210],[3,"GetPublicKeyResponse",1210],[3,"InvokeRequest",1210],[3,"InvokeResponse",1210],[3,"GetEncryptionKeyRequest",1210],[3,"GetEncryptionKeyResponse",1210]],"b":[]},\
"oak_containers_sdk":{"doc":"","t":"CCCAAIDLLLKLLLLLLLLLDLLLLLLLLLLLLLLLL","n":["EncryptionKeyHandle","InstanceEncryptionKeyHandle","OrchestratorClient","crypto","orchestrator_client","EncryptionKeyHandle","InstanceEncryptionKeyHandle","borrow","borrow_mut","create","derive_session_keys","derive_session_keys","from","generate_recipient_context","into","into_request","try_from","try_into","type_id","vzip","OrchestratorClient","borrow","borrow_mut","clone","clone_into","create","from","from_ref","get_application_config","into","into_request","notify_app_ready","to_owned","try_from","try_into","type_id","vzip"],"q":[[0,"oak_containers_sdk"],[5,"oak_containers_sdk::crypto"],[20,"oak_containers_sdk::orchestrator_client"],[37,"anyhow"],[38,"core::future::future"],[39,"alloc::boxed"],[40,"core::pin"],[41,"tonic::request"],[42,"core::result"],[43,"core::any"],[44,"alloc::vec"]],"d":["","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","Utility struct used to interface with the launcher","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","",""],"i":[0,0,0,0,0,0,0,1,1,1,14,1,1,1,1,1,1,1,1,1,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"f":[0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[[],[[2,[1]]]],[[-1,[4,[3]]],[[7,[[6,[5]]]]],[]],[[-1,[4,[3]]],[[7,[[6,[5]]]]],[]],[-1,-1,[]],[[1,[4,[3]]],[[7,[[6,[5]]]]]],[-1,-2,[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,10,[]],[-1,-2,[],[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[11,11],[[-1,-2],12,[],[]],[[],[[2,[11]]]],[-1,-1,[]],[-1,-1,[]],[11,[[2,[[13,[3]]]]]],[-1,-2,[],[]],[-1,[[8,[-2]]],[],[]],[11,[[2,[12]]]],[-1,-2,[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,10,[]],[-1,-2,[],[]]],"c":[],"p":[[3,"InstanceEncryptionKeyHandle",5],[6,"Result",37],[15,"u8"],[15,"slice"],[8,"Future",38],[3,"Box",39],[3,"Pin",40],[3,"Request",41],[4,"Result",42],[3,"TypeId",43],[3,"OrchestratorClient",20],[15,"tuple"],[3,"Vec",44],[8,"EncryptionKeyHandle",5]],"b":[]},\
"oak_containers_stage1":{"doc":"","t":"DLLLLALLAMLLLLLAMLLMFLLFLLLLDLLLLMLLLALLLLAAAAANDDDDDDDDNDDDDDDDEDNMMMLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMLLLLLLLLLLLLLLLLLLMMMLLLLLLLLLLLLLLLLMMMALLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMLLMMMMMMLMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNNELLLLLLLLLLLLLLLLLLDDDLLLLLLLLLLLLLLLMLLLMLLLLLLMLLLLLLLLLMLLLLLLAALLLLLLLLLLLLLLLDLLLLLLLLLLLLMLLLLLLLLLLLLLLLDLLLLLLLLLLMLLLLLLLLLLLLLLADDDDDDDDDDMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLMLLLLLLLLLLMMMMMMMLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLRRDRLLMFLLLLFFFMLLMLLFF","n":["Args","augment_args","augment_args_for_update","borrow","borrow_mut","client","command","command_for_update","dice","dice_addr","fmt","from","from_arg_matches","from_arg_matches_mut","group_id","image","init","into","into_request","launcher_addr","main","try_from","try_into","try_parse_phys_addr","type_id","update_from_arg_matches","update_from_arg_matches_mut","vzip","LauncherClient","borrow","borrow_mut","from","get_oak_system_image","inner","into","into_request","new","proto","try_from","try_into","type_id","vzip","oak","attestation","containers","session","v1","AmdSevSnp","ApplicationKeys","ApplicationLayerEndorsements","CbEndorsements","CertificateAuthority","ContainerLayerEndorsements","DiceData","Endorsements","Evidence","IntelTdx","KernelLayerEndorsements","LayerEvidence","OakContainersEndorsements","OakRestrictedKernelEndorsements","RootLayerEndorsements","RootLayerEvidence","SystemLayerEndorsements","TeePlatform","TransparentReleaseEndorsement","Unspecified","acpi","application_keys","application_layer","as_str_name","binary","binary","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","certificate_authority","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","compare","configuration","configuration","container_layer","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","drop","eca_certificate","eca_private_key","eca_public_key","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encryption_public_key_certificate","endorsement","endorsement_signature","endorsements","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","evidence","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_i32","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_str_name","get_claims","hash","init_ram_fs","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","is_valid","kernel_cmd_line","kernel_image","kernel_layer","kernel_layer","kernel_setup_data","layers","memory_map","partial_cmp","platform","platform","rekor_log_entry","remote_attestation_report","root_layer","root_layer","root_layer","set_platform","signing_public_key_certificate","stage0","system_image","system_layer","tee_certificate","tee_certificate","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","Cb","OakContainers","OakRestrictedKernel","Type","borrow","borrow_mut","clone","clone_into","encode","encoded_len","eq","fmt","from","from_ref","into","into_request","merge","to_owned","try_from","try_into","type_id","vzip","GetApplicationConfigResponse","GetImageResponse","SendAttestationEvidenceRequest","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clear","clear","clear","clone","clone","clone","clone_into","clone_into","clone_into","config","default","default","default","dice_evidence","encoded_len","encoded_len","encoded_len","eq","eq","eq","evidence","fmt","fmt","fmt","from","from","from","from_ref","from_ref","from_ref","image_chunk","into","into","into","into_request","into_request","into_request","launcher_client","orchestrator_client","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","LauncherClient","accept_compressed","borrow","borrow_mut","clone","clone_into","connect","fmt","from","from_ref","get_application_config","get_container_bundle","get_oak_system_image","inner","into","into_request","max_decoding_message_size","max_encoding_message_size","new","notify_app_ready","send_attestation_evidence","send_compressed","to_owned","try_from","try_into","type_id","vzip","with_interceptor","with_origin","OrchestratorClient","accept_compressed","borrow","borrow_mut","clone","clone_into","connect","fmt","from","from_ref","get_application_config","inner","into","into_request","max_decoding_message_size","max_encoding_message_size","new","notify_app_ready","send_compressed","to_owned","try_from","try_into","type_id","vzip","with_interceptor","with_origin","v1","ApplicationData","AttestationBundle","AttestationEndorsement","AttestationEvidence","GetEncryptionKeyRequest","GetEncryptionKeyResponse","GetPublicKeyRequest","GetPublicKeyResponse","InvokeRequest","InvokeResponse","application_data","attestation","attestation_bundle","attestation_endorsement","attestation_evidence","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","config","default","default","default","default","default","default","default","default","default","default","digest","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encrypted_attestation_bundle","encrypted_encryption_key","encrypted_request","encrypted_response","encryption_public_key","endorsed_evidence","endorsements","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","evidence","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","into","into","into","into","into","into","into","into","into","into","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","signed_application_data","signing_public_key","tee_certificates","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","EXPECTED_E820_TYPE","MEMMAP_PATH","MemoryRange","PHYS_MEM_PATH","borrow","borrow_mut","end","extract_stage0_dice_data","fmt","from","into","into_request","measure_system_image","read_memory_ranges","read_stage0_dice_data","start","try_from","try_into","type_description","type_id","vzip","extract","switch"],"q":[[0,"oak_containers_stage1"],[28,"oak_containers_stage1::client"],[42,"oak_containers_stage1::client::proto"],[43,"oak_containers_stage1::client::proto::oak"],[46,"oak_containers_stage1::client::proto::oak::attestation"],[47,"oak_containers_stage1::client::proto::oak::attestation::v1"],[432,"oak_containers_stage1::client::proto::oak::attestation::v1::endorsements"],[454,"oak_containers_stage1::client::proto::oak::containers"],[517,"oak_containers_stage1::client::proto::oak::containers::launcher_client"],[546,"oak_containers_stage1::client::proto::oak::containers::orchestrator_client"],[572,"oak_containers_stage1::client::proto::oak::session"],[573,"oak_containers_stage1::client::proto::oak::session::v1"],[781,"oak_containers_stage1::dice"],[802,"oak_containers_stage1::image"],[804,"clap_builder::builder::command"],[805,"core::fmt"],[806,"core::fmt"],[807,"clap_builder"],[808,"core::result"],[809,"clap_builder::util::id"],[810,"core::option"],[811,"tonic::request"],[812,"core::error"],[813,"alloc::boxed"],[814,"x86_64::addr"],[815,"anyhow"],[816,"core::any"],[817,"alloc::vec"],[818,"http::uri"],[819,"core::cmp"],[820,"core::fmt"],[821,"oak_attestation::dice"],[822,"coset::cwt"],[823,"anyhow"],[824,"oak_dice::evidence"],[825,"prost::encoding"],[826,"prost::encoding"],[827,"bytes::buf::buf_impl"],[828,"tonic::codec::compression"],[829,"tonic::body"],[830,"tonic::client::service"],[831,"core::clone"],[832,"tonic::transport::channel"],[833,"tonic::transport::error"],[834,"tonic::transport::channel::endpoint"],[835,"core::convert"],[836,"core::fmt"],[837,"tonic::status"],[838,"tonic::request"],[839,"tonic::service::interceptor"],[840,"http::request"],[841,"tower_service"],[842,"tonic::service::interceptor"],[843,"std::path"]],"d":["","","","","","","","","","","","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","","","","","","Tries to parse a string slice as an address.","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","Keys used by the application to derive encryption session …","","","Message for passing embedded certificate authority …","","Message that is sent between DICE layers.","Endorsement contains statements that some entity (e.g. a …","Attestation Evidence used by the client to the identity of …","","","DICE layer evidence containing a certificate signed by the …","","","","Evidence generated by the Layer0.","","This proto defines the layered DICE Attestation Evidence.","Endorsement for binaries from the Transparent Release …","","","Application keys signed by the penultimate layer’s ECA …","","String value of the enum field names used in the ProtoBuf …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Certificate signing current layer’s measurements and the …","ECA private key that will be used by a layer to sign a …","Serialized ECA public key for Layer0 that is signed by the …","","","","","","","","","","","","","","","","","Certificate signing the encryption public key.","JSON string comtaining the endorsement statement for the …","The signature for the endorsement.","Nested message and enum types in <code>Endorsements</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Converts an <code>i32</code> to a <code>TeePlatform</code>, or <code>None</code> if <code>value</code> is not …","","","","","","","","","","","","","","","","","","Creates an enum from field names used in the ProtoBuf …","Extracts the <code>ClaimsSet</code> encoded in the ECA certificate of …","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","Returns <code>true</code> if <code>value</code> is a variant of <code>TeePlatform</code>.","","","","","","Layer1..LayerN-1 attestation evidence.","","","Returns the enum value of <code>platform</code>, or the default if the …","The platform providing the attestation report.","The log entry as proof of inclusion of the endorsement …","TEE-specific attestation report acting as a non-standard …","Layer0 attestation evidence.","","","Sets <code>platform</code> to the provided enum value.","Certificate signing the signing public key.","Endorsement of the Stage0 binary.","","","The serialized TEE certificate(s). The details of the …","Serialized X.509 TEE certificate.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Encodes the message to a buffer.","Returns the encoded length of the message without a length …","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","Decodes an instance of the message from a buffer, and …","","","","","","","As images can be large (hundreds of megabytes), the …","","","","","","","","","","","","","","","","","Arbitrary config that the container can retrieve from the …","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Generated client implementations.","Generated client implementations.","","","","","","","","","","","","","","","","Defines the service exposed by the launcher, that can be …","Enable decompressing responses.","","","","","Attempt to create a new client by connecting to a given …","","Returns the argument unchanged.","","This method is used by the orchestrator to load and …","Provides orchestrator with the trusted container image.","Provides stage1 with the Oak system image (which contains …","","Calls <code>U::from(self)</code>.","","Limits the maximum size of a decoded message.","Limits the maximum size of an encoded message.","","Notifies the launcher that the trusted app is ready to …","Sends Attestation Evidence containing the Attestation …","Compress requests with the given encoding.","","","","","","","","Defines the service exposed by the orchestrator, that can …","Enable decompressing responses.","","","","","Attempt to create a new client by connecting to a given …","","Returns the argument unchanged.","","Exposes the previously loaded trusted application config …","","Calls <code>U::from(self)</code>.","","Limits the maximum size of a decoded message.","Limits the maximum size of an encoded message.","","Notifies the orchestrator that the trusted app is ready to …","Compress requests with the given encoding.","","","","","","","","","","AttestationBundle contains the information that the …","AttestationEndorsement contains statements that some …","AttestationEvidence contains all the information that …","","","","","","","The optional application-specific data.","The serialized attestation report binding the public key.","The enclave’s signing and encryption public keys and …","Supporting evidence required for verifying the integrity …","Attestation evidence from the enclave.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The serialized application configuration. The format of …","","","","","","","","","","","The cryptographic digest of the application, of the form …","","","","","","","","","","","Encrypted attestation evidence of the dependent enclave.","Encrypted private key of the leader enclave.","Body of the request, encrypted using Hybrid Public Key …","Body of the request, encrypted using Hybrid Public Key …","The serialized public key part of the enclave encryption …","Attestation evidence and public key.","Thea attestation endorsements.","","","","","","","","","","","The DICE attestation evidence.","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","The signature over the application_data, signed by the …","The serialized public key part of the enclave signing key. …","The serialized TEE certificate(s). The details of the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The expected string representation of the custom type for …","The path for reading the memory map from the sysfs …","","The path for reading the physical memory from the mem …","","","","Extracts the DICE evidence and ECA key from the Stage 0 …","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","Measures the downloaded system image bytes and returns it …","Reads the memory ranges which supplied by the firmware to …","Reads the DICE data from the physical memory range …","","","","","","","",""],"i":[0,2,2,2,2,0,2,2,0,2,2,2,2,2,2,0,2,2,2,2,0,2,2,0,2,2,2,2,0,18,18,18,18,18,18,18,18,0,18,18,18,18,0,0,0,0,0,22,0,0,0,0,0,0,0,0,22,0,0,0,0,0,0,0,0,0,22,31,26,35,22,33,34,23,24,25,26,22,27,28,29,30,31,32,33,34,35,36,37,38,23,24,25,26,22,27,28,29,30,31,32,33,34,35,36,37,38,28,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,23,24,25,26,22,27,28,29,30,31,32,33,34,35,36,37,38,23,24,25,26,22,27,28,29,30,31,32,33,34,35,36,37,38,22,22,33,34,36,23,24,25,26,22,27,28,29,30,31,32,33,34,35,36,37,38,28,24,27,23,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,25,29,29,0,23,24,25,26,22,27,28,29,30,31,32,33,34,35,36,37,38,22,22,22,22,28,23,24,25,26,22,27,28,29,30,31,32,33,34,35,36,37,38,23,24,25,26,22,22,27,28,28,29,30,31,32,33,34,35,36,37,38,22,23,24,25,26,22,27,28,29,30,31,32,33,34,35,36,37,38,22,24,22,31,23,24,25,26,22,27,28,29,30,31,32,33,34,35,36,37,38,23,24,25,26,22,27,28,29,30,31,32,33,34,35,36,37,38,22,31,31,35,36,31,26,31,22,23,23,29,23,26,35,36,23,25,30,32,36,30,37,23,24,25,26,22,27,28,29,30,31,32,33,34,35,36,37,38,23,23,24,24,25,25,26,26,22,27,28,28,29,30,31,32,33,34,35,36,37,38,23,24,25,26,22,27,28,29,30,31,32,33,34,35,36,37,38,38,23,24,25,26,22,27,28,29,30,31,32,33,34,35,36,37,38,23,24,25,26,22,27,28,29,30,31,32,33,34,35,36,37,38,54,54,54,0,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,0,0,0,61,62,63,61,62,63,61,62,63,61,62,63,61,62,63,62,61,62,63,63,61,62,63,61,62,63,63,61,62,63,61,62,63,61,62,63,61,61,62,63,61,62,63,0,0,61,62,63,61,62,63,61,62,63,61,62,63,61,62,63,0,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,0,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,0,0,0,0,0,0,0,0,0,0,0,85,83,88,84,84,83,84,85,86,87,88,89,90,91,92,83,84,85,86,87,88,89,90,91,92,83,84,85,86,87,88,89,90,91,92,83,84,85,86,87,88,89,90,91,92,83,84,85,86,87,88,89,90,91,92,86,83,84,85,86,87,88,89,90,91,92,86,83,84,85,86,87,88,89,90,91,92,91,92,89,90,83,92,84,83,84,85,86,87,88,89,90,91,92,84,83,84,85,86,87,88,89,90,91,92,83,84,85,86,87,88,89,90,91,92,83,84,85,86,87,88,89,90,91,92,83,84,85,86,87,88,89,90,91,92,83,84,85,86,87,88,89,90,91,92,83,83,85,83,84,85,86,87,88,89,90,91,92,83,84,85,86,87,88,89,90,91,92,83,84,85,86,87,88,89,90,91,92,83,84,85,86,87,88,89,90,91,92,83,84,85,86,87,88,89,90,91,92,0,0,0,0,93,93,93,0,93,93,93,93,0,0,0,93,93,93,93,93,93,0,0],"f":[0,[1,1],[1,1],[-1,-2,[],[]],[-1,-2,[],[]],0,[[],1],[[],1],0,0,[[2,3],4],[-1,-1,[]],[5,[[7,[2,6]]]],[5,[[7,[2,6]]]],[[],[[9,[8]]]],0,0,[-1,-2,[],[]],[-1,[[10,[-2]]],[],[]],0,[[],[[7,[11,[13,[12]]]]]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[14,[[16,[15]]]],[-1,17,[]],[[2,5],[[7,[11,6]]]],[[2,5],[[7,[11,6]]]],[-1,-2,[],[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-1,[]],[18,[[16,[[20,[19]]]]]],0,[-1,-2,[],[]],[-1,[[10,[-2]]],[],[]],[21,[[16,[18]]]],0,[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,17,[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[22,14],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[23,11],[24,11],[25,11],[26,11],[27,11],[28,11],[29,11],[30,11],[31,11],[32,11],[33,11],[34,11],[35,11],[36,11],[37,11],[38,11],[23,23],[24,24],[25,25],[26,26],[22,22],[27,27],[28,28],[29,29],[30,30],[31,31],[32,32],[33,33],[34,34],[35,35],[36,36],[37,37],[38,38],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[22,22],39],[[-1,-2],39,[],[]],0,0,0,[[],23],[[],24],[[],25],[[],26],[[],22],[[],27],[[],28],[[],29],[[],30],[[],31],[[],32],[[],33],[[],34],[[],35],[[],36],[[],37],[[],38],[28,11],0,0,0,[23,40],[24,40],[25,40],[26,40],[27,40],[28,40],[29,40],[30,40],[31,40],[32,40],[33,40],[34,40],[35,40],[36,40],[37,40],[38,40],0,0,0,0,[[23,23],41],[[24,24],41],[[25,25],41],[[26,26],41],[[22,22],41],[[27,27],41],[[28,28],41],[[29,29],41],[[30,30],41],[[31,31],41],[[32,32],41],[[33,33],41],[[34,34],41],[[35,35],41],[[36,36],41],[[37,37],41],[[38,38],41],[[-1,-2],41,[],[]],[[-1,-2],41,[],[]],[[-1,-2],41,[],[]],[[-1,-2],41,[],[]],0,[[23,3],[[7,[11,42]]]],[[24,3],[[7,[11,42]]]],[[25,3],[[7,[11,42]]]],[[26,3],[[7,[11,42]]]],[[22,3],[[7,[11,42]]]],[[27,3],[[7,[11,42]]]],[[28,3],[[7,[11,42]]]],[[29,3],[[7,[11,42]]]],[[30,3],[[7,[11,42]]]],[[31,3],[[7,[11,42]]]],[[32,3],[[7,[11,42]]]],[[33,3],[[7,[11,42]]]],[[34,3],[[7,[11,42]]]],[[35,3],[[7,[11,42]]]],[[36,3],[[7,[11,42]]]],[[37,3],[[7,[11,42]]]],[[38,3],[[7,[11,42]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[43,22],[-1,-1,[]],[-1,-1,[]],[44,28],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[45,[[9,[22]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[14,[[9,[22]]]],[24,[[7,[46,47]]]],[[22,-1],11,48],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[45,41],0,0,0,0,0,0,0,[[22,22],[[9,[39]]]],[23,22],0,0,0,0,0,0,[[23,22],11],0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[49,[[7,[23,47]]]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[50,[[7,[24,47]]]],[-1,[[7,[-2]]],[],[]],[51,[[7,[25,47]]]],[-1,[[7,[-2]]],[],[]],[52,[[7,[26,47]]]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[53,[[7,[28,47]]]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],0,[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[54,54],[[-1,-2],11,[],[]],[[54,-1],11,55],[54,40],[[54,54],41],[[54,3],[[7,[11,42]]]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,[[10,[-2]]],[],[]],[[[9,[54]],56,57,-1,58],[[7,[11,59]]],60],[-1,-2,[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,17,[]],[-1,-2,[],[]],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[61,11],[62,11],[63,11],[61,61],[62,62],[63,63],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],0,[[],61],[[],62],[[],63],0,[61,40],[62,40],[63,40],[[61,61],41],[[62,62],41],[[63,63],41],0,[[61,3],4],[[62,3],4],[[63,3],4],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[[64,[-1]],65],[[64,[-1]]],[[67,[66]]]],[-1,-2,[],[]],[-1,-2,[],[]],[[[64,[-1]]],[[64,[-1]]],68],[[-1,-2],11,[],[]],[-1,[[7,[[64,[69]],70]]],[[72,[71]]]],[[[64,[-1]],3],4,73],[-1,-1,[]],[-1,-1,[]],[[[64,[-1]],-2],[[7,[[74,[62]],75]]],[[67,[66]]],[[76,[11]]]],[[[64,[-1]],-2],[[7,[[74,[[77,[61]]]],75]]],[[67,[66]]],[[76,[11]]]],[[[64,[-1]],-2],[[7,[[74,[[77,[61]]]],75]]],[[67,[66]]],[[76,[11]]]],0,[-1,-2,[],[]],[-1,[[10,[-2]]],[],[]],[[[64,[-1]],40],[[64,[-1]]],[[67,[66]]]],[[[64,[-1]],40],[[64,[-1]]],[[67,[66]]]],[-1,[[64,[-1]]],[[67,[66]]]],[[[64,[-1]],-2],[[7,[[74,[11]],75]]],[[67,[66]]],[[76,[11]]]],[[[64,[-1]],-2],[[7,[[74,[11]],75]]],[[67,[66]]],[[76,[63]]]],[[[64,[-1]],65],[[64,[-1]]],[[67,[66]]]],[-1,-2,[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,17,[]],[-1,-2,[],[]],[[-1,-2],[[64,[[78,[-1,-2]]]]],[[80,[[79,[66]]]],[67,[66]]],81],[[-1,21],[[64,[-1]]],[[67,[66]]]],0,[[[82,[-1]],65],[[82,[-1]]],[[67,[66]]]],[-1,-2,[],[]],[-1,-2,[],[]],[[[82,[-1]]],[[82,[-1]]],68],[[-1,-2],11,[],[]],[-1,[[7,[[82,[69]],70]]],[[72,[71]]]],[[[82,[-1]],3],4,73],[-1,-1,[]],[-1,-1,[]],[[[82,[-1]],-2],[[7,[[74,[62]],75]]],[[67,[66]]],[[76,[11]]]],0,[-1,-2,[],[]],[-1,[[10,[-2]]],[],[]],[[[82,[-1]],40],[[82,[-1]]],[[67,[66]]]],[[[82,[-1]],40],[[82,[-1]]],[[67,[66]]]],[-1,[[82,[-1]]],[[67,[66]]]],[[[82,[-1]],-2],[[7,[[74,[11]],75]]],[[67,[66]]],[[76,[11]]]],[[[82,[-1]],65],[[82,[-1]]],[[67,[66]]]],[-1,-2,[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,17,[]],[-1,-2,[],[]],[[-1,-2],[[82,[[78,[-1,-2]]]]],[[80,[[79,[66]]]],[67,[66]]],81],[[-1,21],[[82,[-1]]],[[67,[66]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[83,11],[84,11],[85,11],[86,11],[87,11],[88,11],[89,11],[90,11],[91,11],[92,11],[83,83],[84,84],[85,85],[86,86],[87,87],[88,88],[89,89],[90,90],[91,91],[92,92],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],0,[[],83],[[],84],[[],85],[[],86],[[],87],[[],88],[[],89],[[],90],[[],91],[[],92],0,[83,40],[84,40],[85,40],[86,40],[87,40],[88,40],[89,40],[90,40],[91,40],[92,40],0,0,0,0,0,0,0,[[83,83],41],[[84,84],41],[[85,85],41],[[86,86],41],[[87,87],41],[[88,88],41],[[89,89],41],[[90,90],41],[[91,91],41],[[92,92],41],0,[[83,3],[[7,[11,42]]]],[[84,3],[[7,[11,42]]]],[[85,3],[[7,[11,42]]]],[[86,3],[[7,[11,42]]]],[[87,3],[[7,[11,42]]]],[[88,3],[[7,[11,42]]]],[[89,3],[[7,[11,42]]]],[[90,3],[[7,[11,42]]]],[[91,3],[[7,[11,42]]]],[[92,3],[[7,[11,42]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],0,[15,[[16,[44]]]],[[93,3],4],[-1,-1,[]],[-1,-2,[],[]],[-1,[[10,[-2]]],[],[]],[[[94,[19]]],[[20,[[11,[95,96]]]]]],[[],[[16,[[20,[93]]]]]],[15,[[16,[53]]]],0,[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],0,[-1,17,[]],[-1,-2,[],[]],[[[94,[19]],97],[[16,[11]]]],[14,[[16,[98]]]]],"c":[483,586,587],"p":[[3,"Command",804],[3,"Args",0],[3,"Formatter",805],[6,"Result",805],[3,"ArgMatches",806],[6,"Error",807],[4,"Result",808],[3,"Id",809],[4,"Option",810],[3,"Request",811],[15,"tuple"],[8,"Error",812],[3,"Box",813],[15,"str"],[3,"PhysAddr",814],[6,"Result",815],[3,"TypeId",816],[3,"LauncherClient",28],[15,"u8"],[3,"Vec",817],[3,"Uri",818],[4,"TeePlatform",47],[3,"RootLayerEvidence",47],[3,"LayerEvidence",47],[3,"ApplicationKeys",47],[3,"Evidence",47],[3,"CertificateAuthority",47],[3,"DiceData",47],[3,"TransparentReleaseEndorsement",47],[3,"RootLayerEndorsements",47],[3,"KernelLayerEndorsements",47],[3,"SystemLayerEndorsements",47],[3,"ApplicationLayerEndorsements",47],[3,"ContainerLayerEndorsements",47],[3,"OakRestrictedKernelEndorsements",47],[3,"OakContainersEndorsements",47],[3,"CbEndorsements",47],[3,"Endorsements",47],[4,"Ordering",819],[15,"usize"],[15,"bool"],[3,"Error",805],[4,"TeePlatform",820],[3,"DiceBuilder",821],[15,"i32"],[3,"ClaimsSet",822],[3,"Error",815],[8,"Hasher",823],[3,"RootLayerEvidence",820],[3,"LayerEvidence",820],[3,"ApplicationKeys",820],[3,"Evidence",820],[3,"Stage0DiceData",820],[4,"Type",432],[8,"BufMut",824],[15,"u32"],[4,"WireType",825],[3,"DecodeContext",825],[3,"DecodeError",826],[8,"Buf",827],[3,"GetImageResponse",454],[3,"GetApplicationConfigResponse",454],[3,"SendAttestationEvidenceRequest",454],[3,"LauncherClient",517],[4,"CompressionEncoding",828],[6,"BoxBody",829],[8,"GrpcService",830],[8,"Clone",831],[3,"Channel",832],[3,"Error",833],[3,"Endpoint",834],[8,"TryInto",835],[8,"Debug",805],[3,"Response",836],[3,"Status",837],[8,"IntoRequest",811],[3,"Streaming",838],[3,"InterceptedService",839],[3,"Request",840],[8,"Service",841],[8,"Interceptor",839],[3,"OrchestratorClient",546],[3,"AttestationEvidence",573],[3,"AttestationBundle",573],[3,"AttestationEndorsement",573],[3,"ApplicationData",573],[3,"GetPublicKeyRequest",573],[3,"GetPublicKeyResponse",573],[3,"InvokeRequest",573],[3,"InvokeResponse",573],[3,"GetEncryptionKeyRequest",573],[3,"GetEncryptionKeyResponse",573],[3,"MemoryRange",781],[15,"slice"],[6,"ClaimName",822],[4,"Value",842],[3,"Path",843],[15,"never"]],"b":[]},\
"oak_containers_syslogd":{"doc":"","t":"DLLLLLLLLLLLLLMAFFALLLLLLFSSSDDSSSSSLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLAMLLLLLLLLLLLMMLLLLLDFFFFFFLLLL","n":["Args","augment_args","augment_args_for_update","borrow","borrow_mut","command","command_for_update","fmt","from","from_arg_matches","from_arg_matches_mut","group_id","into","into_request","launcher_addr","log_relay","main","signal_handler","systemd_journal","try_from","try_into","type_id","update_from_arg_matches","update_from_arg_matches_mut","vzip","run","ALL_NAMESPACES","CURRENT_USER","INCLUDE_DEFAULT_NAMESPACE","Journal","JournalOpenFlags","LOCAL_ONLY","OS_ROOT","RUNTIME_ONLY","SYSTEM","TAKE_DIRECTORY_FD","all","bitand","bitand_assign","bitor","bitor_assign","bits","bits","bitxor","bitxor_assign","borrow","borrow","borrow_mut","borrow_mut","complement","contains","difference","drop","empty","extend","fmt","fmt","fmt","fmt","from","from","from_bits","from_bits_retain","from_bits_retain","from_bits_truncate","from_iter","from_name","insert","intersection","intersects","into","into","into_iter","into_iter","into_request","into_request","is_all","is_empty","iter","iter_names","journal","new","next","next","next_data","not","remove","seek_head","set","sub","sub_assign","symmetric_difference","systemd_sys","terminate","toggle","try_from","try_from","try_into","try_into","type_id","type_id","union","vzip","vzip","wait","_data","_marker","borrow","borrow_mut","from","into","into_request","sd_journal","sd_journal_close","sd_journal_enumerate_data","sd_journal_next","sd_journal_open","sd_journal_seek_head","sd_journal_wait","try_from","try_into","type_id","vzip"],"q":[[0,"oak_containers_syslogd"],[25,"oak_containers_syslogd::log_relay"],[26,"oak_containers_syslogd::systemd_journal"],[105,"oak_containers_syslogd::systemd_journal::systemd_sys"],[123,"clap_builder::builder::command"],[124,"core::fmt"],[125,"core::fmt"],[126,"clap_builder"],[127,"core::result"],[128,"clap_builder::util::id"],[129,"core::option"],[130,"tonic::request"],[131,"core::error"],[132,"alloc::boxed"],[133,"signal_hook_tokio"],[134,"tokio::sync::once_cell"],[135,"alloc::sync"],[136,"core::any"],[137,"oak_containers_orchestrator::launcher_client"],[138,"anyhow"],[139,"core::ffi"],[140,"core::iter::traits::collect"],[141,"bitflags::iter"],[142,"bitflags::iter"],[143,"alloc::string"],[144,"std::collections::hash::map"]],"d":["","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","Simple wrapper around libsystemd for reading entries from …","","","","","","","Get a flags value with all known bits set.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","","Get the underlying bits value.","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","","","","The bitwise negation (<code>!</code>) of the bits in a flags value, …","Whether all set bits in a source flags value are also set …","The intersection of a source flags value with the …","","Get a flags value with all bits unset.","The bitwise or (<code>|</code>) of the bits in each flags value.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Convert from a bits value.","Convert from a bits value exactly.","","Convert from a bits value, unsetting any unknown bits.","The bitwise or (<code>|</code>) of the bits in each flags value.","Get a flags value with the bits of a flag with the given …","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","Whether any set bits in a source flags value are also set …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","Whether all known bits in this flags value are set.","Whether all bits in this flags value are unset.","Yield a set of contained flags values.","Yield a set of contained named flags values.","","","Reads the next entry from the journal; returns None if …","","","The bitwise negation (<code>!</code>) of the bits in a flags value, …","The intersection of a source flags value with the …","Moves the cursor to before the first record in the journal.","Call <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","","","","","","The bitwise or (<code>|</code>) of the bits in two flags values.","","","Blocks until something is added to the journal.","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","Opaque type representing the systemd journal obtained via …","","","","","","","","","",""],"i":[0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,2,2,2,2,2,2,0,20,20,20,0,0,20,20,20,20,20,20,20,20,20,20,20,20,20,20,23,20,23,20,20,20,20,23,20,20,20,20,20,20,23,20,20,20,20,20,20,20,20,20,20,23,20,23,20,23,20,20,20,20,20,23,23,23,23,23,20,20,23,20,20,20,20,0,23,20,23,20,23,20,23,20,20,23,20,23,33,33,33,33,33,33,33,0,0,0,0,0,0,0,33,33,33,33],"f":[0,[1,1],[1,1],[-1,-2,[],[]],[-1,-2,[],[]],[[],1],[[],1],[[2,3],4],[-1,-1,[]],[5,[[7,[2,6]]]],[5,[[7,[2,6]]]],[[],[[9,[8]]]],[-1,-2,[],[]],[-1,[[10,[-2]]],[],[]],0,0,[[],[[7,[11,[13,[12]]]]]],[[14,[16,[[15,[11]]]]],11],0,[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,17,[]],[[2,5],[[7,[11,6]]]],[[2,5],[[7,[11,6]]]],[-1,-2,[],[]],[[18,[16,[[15,[11]]]]],[[19,[11]]]],0,0,0,0,0,0,0,0,0,0,[[],20],[[20,20],20],[[20,20],11],[[20,20],20],[[20,20],11],[20,21],[20,21],[[20,20],20],[[20,20],11],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[20,20],[[20,20],22],[[20,20],20],[23,11],[[],20],[[20,-1],11,24],[[20,3],4],[[20,3],4],[[20,3],4],[[20,3],4],[-1,-1,[]],[-1,-1,[]],[21,[[9,[20]]]],[21,20],[21,20],[21,20],[-1,20,24],[25,[[9,[20]]]],[[20,20],11],[[20,20],20],[[20,20],22],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[20],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[20,22],[20,22],[20,[[26,[20]]]],[20,[[27,[20]]]],0,[[20,[16,[[15,[11]]]]],[[7,[23,28]]]],[23,[[7,[[9,[[30,[29,29]]]],28]]]],[23,9],[23,[[7,[[9,[[32,[31]]]],28]]]],[20,20],[[20,20],11],[23,[[7,[11,28]]]],[[20,20,22],11],[[20,20],20],[[20,20],11],[[20,20],20],0,0,[[20,20],11],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,17,[]],[-1,17,[]],[[20,20],20],[-1,-2,[],[]],[-1,-2,[],[]],[23,[[7,[22,28]]]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-1,[]],[-1,-2,[],[]],[-1,[[10,[-2]]],[],[]],0,0,0,0,0,0,0,[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,17,[]],[-1,-2,[],[]]],"c":[],"p":[[3,"Command",123],[3,"Args",0],[3,"Formatter",124],[6,"Result",124],[3,"ArgMatches",125],[6,"Error",126],[4,"Result",127],[3,"Id",128],[4,"Option",129],[3,"Request",130],[15,"tuple"],[8,"Error",131],[3,"Box",132],[6,"Signals",133],[3,"OnceCell",134],[3,"Arc",135],[3,"TypeId",136],[3,"LauncherClient",137],[6,"Result",138],[3,"JournalOpenFlags",26],[6,"c_int",139],[15,"bool"],[3,"Journal",26],[8,"IntoIterator",140],[15,"str"],[3,"Iter",141],[3,"IterNames",141],[4,"Errno",142],[3,"String",143],[3,"HashMap",144],[15,"u8"],[15,"slice"],[3,"sd_journal",105]],"b":[[41,"impl-Flags-for-JournalOpenFlags"],[42,"impl-JournalOpenFlags"],[55,"impl-Octal-for-JournalOpenFlags"],[56,"impl-Binary-for-JournalOpenFlags"],[57,"impl-UpperHex-for-JournalOpenFlags"],[58,"impl-LowerHex-for-JournalOpenFlags"],[62,"impl-JournalOpenFlags"],[63,"impl-Flags-for-JournalOpenFlags"],[82,"impl-Journal"],[83,"impl-Iterator-for-Journal"]]},\
"oak_core":{"doc":"","t":"AAAIDLLLLLLLKLKLLLLDLLLLLLLLLLDLLLLLLLLFLLLL","n":["samplestore","sync","timer","SampleStore","StaticSampleStore","borrow","borrow_mut","eq","fmt","from","into","new","percentile","percentile","record","record","try_from","try_into","type_id","OnceCell","borrow","borrow_mut","from","get","into","new","set","try_from","try_into","type_id","Timer","borrow","borrow_mut","elapsed","fmt","from","into","new","new_rdtsc","rdtsc","timed","try_from","try_into","type_id"],"q":[[0,"oak_core"],[3,"oak_core::samplestore"],[19,"oak_core::sync"],[30,"oak_core::timer"],[44,"core::fmt"],[45,"core::fmt"],[46,"core::result"],[47,"core::any"],[48,"core::ops::function"]],"d":["","","","","Basic probabilisting sample store to compute percentiles …","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","Gets the n-th percentile. n needs to be between 0 and 100, …","","Records a new data point value.","","","","","A synchronised implementation of a cell that can be …","","","Returns the argument unchanged.","Gets a reference to the inner value if the cell has been …","Calls <code>U::from(self)</code>.","","Sets the inner value of the cell if it has not been …","","","","Measures the number of clock cycles between <code>new()</code> and …","","","Returns the approximate number of clock cycles elapsed …","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","Constructs a new timer, recording the current tick counter …","Read the timestamp counter register from the CPU.","Returns the approximate number of clock cycles it took to …","","",""],"i":[0,0,0,0,0,1,1,1,1,1,1,1,14,1,14,1,1,1,1,0,11,11,11,11,11,11,11,11,11,11,0,12,12,12,12,12,12,12,12,0,12,12,12,12],"f":[0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[[1,1],2],[[1,3],4],[-1,-1,[]],[-1,-2,[],[]],[[],[[5,[1]]]],[[-1,6],[[5,[7]]],[]],[[1,6],[[5,[7]]]],[[-1,7],8,[]],[[1,7],8],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,10,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-1,[]],[[[11,[-1]]],[[5,[-1]]],[]],[-1,-2,[],[]],[[],[[11,[-1]]],[]],[[[11,[-1]],-1],[[9,[8,-1]]],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,10,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[12,7],[[12,3],4],[-1,-1,[]],[-1,-2,[],[]],[7,12],[[],12],[[],7],[-1,7,13],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,10,[]]],"c":[],"p":[[3,"StaticSampleStore",3],[15,"bool"],[3,"Formatter",44],[6,"Result",44],[4,"Option",45],[15,"f64"],[15,"u64"],[15,"tuple"],[4,"Result",46],[3,"TypeId",47],[3,"OnceCell",19],[3,"Timer",30],[8,"FnOnce",48],[8,"SampleStore",3]],"b":[]},\
"oak_crypto":{"doc":"","t":"AAAAIDDIDIDLLLLLLLLLLLLLLLLLLLLLLKKLLKLLLLLLLLLLLLLLLLLLLLLLIDQGGDDILLLLLLLLLLKFLLLLLLLLLKLLLLLLLLLAAADDDDDMLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLMMMLMMLLLLLLLLLLLLLLLLLLLLCIK","n":["encryptor","hpke","proto","signer","AsyncRecipientContextGenerator","AsyncServerEncryptor","ClientEncryptor","EncryptionKeyHandle","EncryptionKeyProvider","RecipientContextGenerator","ServerEncryptor","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","create","create","decrypt","decrypt","decrypt","default","encrypt","encrypt","encrypt","from","from","from","from","generate","generate_recipient_context","generate_recipient_context","generate_recipient_context","generate_recipient_context","generate_session_keys","get_private_key","get_serialized_public_key","into","into","into","into","new","new","new","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","Deserializable","KeyPair","OutputSize","PrivateKey","PublicKey","RecipientContext","SenderContext","Serializable","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","deserialize","from","from","from","from_bytes","gen_kem_keypair","generate","get_private_key","get_serialized_public_key","into","into","into","new","serialize","size","to_bytes","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","oak","crypto","v1","AeadEncryptedMessage","EncryptedRequest","EncryptedResponse","SessionKeys","Signature","associated_data","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","ciphertext","clear","clear","clear","clear","clear","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","default","default","default","default","default","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encrypted_message","encrypted_message","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","into","into","into","into","into","nonce","request_key","response_key","serialized_encapsulated_public_key","serialized_encapsulated_public_key","signature","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","Signature","Signer","sign"],"q":[[0,"oak_crypto"],[4,"oak_crypto::encryptor"],[60,"oak_crypto::hpke"],[99,"oak_crypto::proto"],[100,"oak_crypto::proto::oak"],[101,"oak_crypto::proto::oak::crypto"],[102,"oak_crypto::proto::oak::crypto::v1"],[192,"oak_crypto::signer"],[195,"anyhow"],[196,"alloc::sync"],[197,"alloc::vec"],[198,"core::marker"],[199,"core::marker"],[200,"alloc::boxed"],[201,"core::pin"],[202,"oak_dice::evidence"],[203,"core::result"],[204,"core::any"],[205,"hpke"],[206,"generic_array"],[207,"core::fmt"],[208,"core::fmt"]],"d":["Implementation of the Bidirectional Hybrid Public Key …","","","","","Encryptor object for decrypting client requests that are …","Encryptor object for encrypting client requests that will …","Generate <code>SessionKeys</code> for the provided public key.","","","Encryptor object for decrypting client requests that are …","","","","","","","","","Creates an HPKE crypto context by generating an new …","","Decrypts a <code>EncryptedResponse</code> proto message using AEAD. …","Decrypts a <code>EncryptedRequest</code> proto message using AEAD. …","Decrypts a <code>EncryptedRequest</code> proto message using AEAD. …","","Encrypts <code>plaintext</code> and authenticates <code>associated_data</code> using …","Encrypts <code>plaintext</code> and authenticates <code>associated_data</code> using …","Encrypts <code>plaintext</code> and authenticates <code>associated_data</code> using …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Creates a crypto provider with a newly generated key pair.","","","","","","","Returns a NIST P-256 SEC1 encoded point public key. …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","Implemented by types that can be deserialized from byte …","","","","","","","Implemented by types that have a fixed-length byte …","","","","","","","Deserializes recipient context from a <code>SessionKeys</code> Protobuf …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Randomly generates a key pair.","","Returns a NIST P-256 SEC1 encoded point public key. …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Serializes recipient context into a <code>SessionKeys</code> Protobuf …","Returns the size (in bytes) of this type when serialized","","","","","","","","","","","","","","Message encrypted with Authenticated Encryption with …","Request message encrypted using Hybrid Public Key …","Response message encrypted Hybrid Public Key Encryption …","Envelope containing session keys required to …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Message encrypted with Authenticated Encryption with …","Message encrypted with Authenticated Encryption with …","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","AEAD key for encrypting/decrypting client requests.","AEAD key for encrypting/decrypting enclave responses.","Returns the value of <code>serialized_encapsulated_public_key</code>, …","Ephemeral Diffie-Hellman client public key that is needed …","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,16,3,7,12,16,3,7,12,3,7,3,7,12,16,3,7,12,16,3,7,12,16,5,13,16,16,36,16,16,16,3,7,12,16,7,12,16,16,3,7,12,16,3,7,12,16,3,7,12,0,0,37,0,0,0,0,0,28,38,17,28,38,17,17,28,38,17,39,0,28,28,28,28,38,17,28,17,37,37,28,38,17,28,38,17,28,38,17,0,0,0,0,0,0,0,0,31,11,8,31,26,32,11,8,31,26,32,31,11,8,31,26,32,11,8,31,26,32,11,8,31,26,32,11,8,31,26,32,11,8,31,26,32,11,8,11,8,31,26,32,11,8,31,26,32,11,8,31,26,32,11,8,31,26,32,31,26,26,11,11,32,11,8,31,26,32,11,8,31,26,32,11,8,31,26,32,11,8,31,26,32,0,0,40],"f":[0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[2,[1]]],[[4,[3]]]],[[[2,[1]],[6,[5]]],[[4,[7]]]],[[3,8],[[4,[[10,[[9,[1]],[9,[1]]]]]]]],[[7,11],[[4,[[10,[[9,[1]],[9,[1]]]]]]]],[[[12,[-1]],11],[[4,[[10,[[9,[1]],[9,[1]]]]]]],[13,14,15]],[[],16],[[3,[2,[1]],[2,[1]]],[[4,[11]]]],[[7,[2,[1]],[2,[1]]],[[4,[8]]]],[[[12,[-1]],[2,[1]],[2,[1]]],[[4,[8]]],[13,14,15]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[],16],[[-1,[2,[1]]],[[4,[17]]],[]],[[-1,[2,[1]]],[[20,[[19,[18]]]]],[]],[[16,[2,[1]]],[[4,[17]]]],[[16,[2,[1]]],[[20,[[19,[18]]]]]],[[-1,[2,[1]]],[[4,[17]]],[]],[16,[[9,[1]]]],[16,[[9,[1]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[21,22],16],[17,7],[-1,[[12,[-1]]],[13,14,15]],[23,[[24,[16]]]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[26,[[4,[17]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[2,[1]]],[[24,[-1,27]]],[]],[[],[[10,[21,22]]]],[[],28],[28,[[9,[1]]]],[28,[[9,[1]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[21,22],28],[17,[[4,[26]]]],[[],29],[-1,[[30,[1]]],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[11,10],[8,10],[31,10],[26,10],[32,10],[11,11],[8,8],[31,31],[26,26],[32,32],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[],11],[[],8],[[],31],[[],26],[[],32],[11,29],[8,29],[31,29],[26,29],[32,29],0,0,[[11,11],33],[[8,8],33],[[31,31],33],[[26,26],33],[[32,32],33],[[11,34],35],[[8,34],35],[[31,34],35],[[26,34],35],[[32,34],35],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,[11,[[2,[1]]]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],0,0,[[-1,[2,[1]]],32,[]]],"c":[],"p":[[15,"u8"],[15,"slice"],[3,"ClientEncryptor",4],[6,"Result",195],[8,"RecipientContextGenerator",4],[3,"Arc",196],[3,"ServerEncryptor",4],[3,"EncryptedResponse",102],[3,"Vec",197],[15,"tuple"],[3,"EncryptedRequest",102],[3,"AsyncServerEncryptor",4],[8,"AsyncRecipientContextGenerator",4],[8,"Send",198],[8,"Sync",198],[3,"EncryptionKeyProvider",4],[3,"RecipientContext",60],[8,"Future",199],[3,"Box",200],[3,"Pin",201],[6,"PrivateKey",60],[6,"PublicKey",60],[3,"RestrictedKernelDiceData",202],[4,"Result",203],[3,"TypeId",204],[3,"SessionKeys",102],[4,"HpkeError",205],[3,"KeyPair",60],[15,"usize"],[3,"GenericArray",206],[3,"AeadEncryptedMessage",102],[3,"Signature",102],[15,"bool"],[3,"Formatter",207],[6,"Result",207],[8,"EncryptionKeyHandle",4],[8,"Serializable",60],[3,"SenderContext",60],[8,"Deserializable",60],[8,"Signer",192]],"b":[[35,"impl-RecipientContextGenerator-for-EncryptionKeyProvider"],[36,"impl-AsyncRecipientContextGenerator-for-EncryptionKeyProvider"]]},\
"oak_dice":{"doc":"Structs and helpers for implementing DICE-based …","t":"AAARRSSSSSSRRRRRSSSRRDRRRRRRRRLLLLLLLLLLLLLLLFFFFLLLLLLLLLLLLLLLFFFFFFLLLLLLLLLLLLLLLLLLLLLFNDDRRDDRDNDRRRRDDRDENRMMLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLMMMMMLMLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMLLMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLF","n":["cert","evidence","utils","ACPI_MEASUREMENT_ID","CONTAINER_IMAGE_ID","CONTENT_COMMITMENT","CRL_SIGN","DATA_ENCIPHERMENT","DECIPHER_ONLY","DIGITAL_SIGNATURE","ENCIPHER_ONLY","ENCLAVE_APPLICATION_LAYER_ID","INITRD_MEASUREMENT_ID","KERNEL_COMMANDLINE_MEASUREMENT_ID","KERNEL_LAYER_ID","KERNEL_MEASUREMENT_ID","KEY_AGREEMENT","KEY_CERT_SIGN","KEY_ENCIPHERMENT","KEY_ID_LENGTH","KEY_USAGE_ID","KeyUsage","LAYER_2_CODE_MEASUREMENT_ID","LAYER_3_CODE_MEASUREMENT_ID","LAYER_3_CONFIG_MEASUREMENT_ID","MEMORY_MAP_MEASUREMENT_ID","SETUP_DATA_MEASUREMENT_ID","SHA2_256_ID","SUBJECT_PUBLIC_KEY_ID","SYSTEM_IMAGE_LAYER_ID","all","bitand","bitand_assign","bitor","bitor_assign","bits","bits","bitxor","bitxor_assign","borrow","borrow_mut","clone","clone_into","complement","contains","cose_key_to_hpke_public_key","cose_key_to_verifying_key","derive_kem_public_key_id","derive_verifying_key_id","difference","empty","extend","fmt","fmt","fmt","fmt","fmt","from","from_bits","from_bits_retain","from_bits_retain","from_bits_truncate","from_iter","from_name","generate_ecdsa_key_pair","generate_kem_certificate","generate_signing_certificate","get_claims_set_from_certificate_bytes","get_public_key_from_claims_set","hpke_public_key_to_cose_key","insert","intersection","intersects","into","into_iter","is_all","is_empty","iter","iter_names","not","remove","set","sub","sub_assign","symmetric_difference","to_owned","toggle","try_from","try_into","type_id","union","verifying_key_to_cose_key","AmdSevSnp","ApplicationKeys","ApplicationPrivateKeys","CDI_SIZE","CERTIFICATE_SIZE","CertificateAuthority","CompoundDeviceIdentifier","DICE_DATA_CMDLINE_PARAM","Evidence","IntelTdx","LayerEvidence","P256_PRIVATE_KEY_SIZE","PRIVATE_KEY_SIZE","PUBLIC_KEY_SIZE","REPORT_SIZE","RestrictedKernelDiceData","RootLayerEvidence","STAGE0_MAGIC","Stage0DiceData","TeePlatform","Unspecified","X25519_PRIVATE_KEY_SIZE","application_keys","application_private_keys","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cdi","claims","claims","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","drop","drop","drop","eca_certificate","eca_private_key","eca_public_key","encryption_private_key","encryption_public_key_certificate","eq","evidence","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from_repr","get_eca_public_key","get_remote_attestation_report","get_tee_platform","into","into","into","into","into","into","into","into","into","into","layer_1_cdi","layer_1_certificate_authority","layer_1_evidence","magic","remote_attestation_report","restricted_kernel_evidence","root_layer_evidence","root_layer_evidence","set_eca_public_key","set_remote_attestation_report","signing_private_key","signing_public_key_certificate","tee_platform","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","zeroize","zeroize","zeroize","cbor_encoded_bytes_to_vec"],"q":[[0,"oak_dice"],[3,"oak_dice::cert"],[92,"oak_dice::evidence"],[237,"oak_dice::utils"],[238,"coset::key"],[239,"alloc::vec"],[240,"core::result"],[241,"p256::ecdsa"],[242,"core::iter::traits::collect"],[243,"core::fmt"],[244,"core::fmt"],[245,"p256::ecdsa"],[246,"coset::cwt"],[247,"ciborium::value"],[248,"coset::sign"],[249,"coset::common"],[250,"coset::cwt"],[251,"bitflags::iter"],[252,"core::fmt"]],"d":["Constants and helper functions to work with CWT-based DICE …","C-like structs for representing DICE data in environments …","Utilities to handle encoded keys and certificates","The CWT private claim ID for the concatenated hash of the …","The CWT private claim ID for the container image.","","","","","","","The CWT private claim ID for an enclave application layer.","The CWT private claim ID for the initial RAM file system …","The CWT private claim ID for the kernel command-line …","The CWT private claim ID for the Kernel layer.","The CWT private claim ID for the kernel measurement.","","","","Length of the unique ID for ECDSA keys generated.","ID for the bitstring used to describe the intended usage …","Intended usage of a key.","The CWT private claim ID for the measurement of the layer …","The CWT private claim ID for the measurement of the layer …","The CWT private claim ID for the measurement of the layer …","The CWT private claim ID for the physical memory map (e820 …","The CWT private claim ID for the kernel setup data …","The CWT private claim ID for SHA2_256 digests.","ID for the CWT private claim corresponding to the Subject …","The CWT private claim ID for the Oak Containers system …","Get a flags value with all known bits set.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","","Get the underlying bits value.","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","","","","The bitwise negation (<code>!</code>) of the bits in a flags value, …","Whether all set bits in a source flags value are also set …","Converts a COSE_Key to a serialized HPKE KEM public key.","Converts a COSE_Key to a ECDSA verifying key.","Derives an ID from an HPKE KEM public key.","Derives an ID from a verifying key.","The intersection of a source flags value with the …","Get a flags value with all bits unset.","The bitwise or (<code>|</code>) of the bits in each flags value.","","","","","","Returns the argument unchanged.","Convert from a bits value.","Convert from a bits value exactly.","","Convert from a bits value, unsetting any unknown bits.","The bitwise or (<code>|</code>) of the bits in each flags value.","Get a flags value with the bits of a flag with the given …","Generates private/public ECDSA key pair.","Generates a CWT certificate representing a Key …","Generates a CWT certificate representing an ECDSA signing …","Parses a bytes slice as a CWT certificate and extracts the …","Extracts the certified public key from the claims set of a …","Converts a serialized HPKE KEM public key to a COSE_Key …","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","Whether any set bits in a source flags value are also set …","Calls <code>U::from(self)</code>.","","Whether all known bits in this flags value are set.","Whether all bits in this flags value are unset.","Yield a set of contained flags values.","Yield a set of contained named flags values.","The bitwise negation (<code>!</code>) of the bits in a flags value, …","The intersection of a source flags value with the …","Call <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","","","The bitwise or (<code>|</code>) of the bits in two flags values.","Converts an ECDSA verifying key to a COSE_Key …","AMD SEV-SNP.","Certificates for the ECDSA keys that can be used for an …","ECDSA private keys that can be used for an application for …","The size for compound device identifiers.","The maximum size of a serialized CWT certificate.","Private key that can be used by a layer to sign a …","","The name of the kernel command-line parameter that is used …","Wrapper for passing the attestation evidence from the …","Intel TDX.","Attestation evidence for non-root layers.","The actual size used when encoding a Nist P256 private key.","The maximum size of an ECDSA private key.","The maximum size of a serialized COSE Key object …","The maximum size of the signed attestation report.","Wrapper for passing the attestation evidence and private …","Attestation evidence generated by Stage 0.","The magic number used to identify the Stage 0 DICE data in …","Wrapper for passing DICE info from Stage0 to the next …","The hardware platform providing the Trusted Execution …","Platform is not specified.","The actual size used when encoding a X25519 private key.","Keys (and associated certificates) that can be used by the …","","","","","","","","","","","","","","","","","","","","","","The RAW bytes representing the CDI.","","","","","","","","","","","","","","","","Serialized CWT certificate for the ECA private key owned …","The RAW bytes representing an ECDSA private key.","Serialized COSE Key representation of the ECDSA public key …","The RAW bytes representing an ECDSA private key that can …","Serialized CWT certificate for the encryption private key. …","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Try to create Self from the raw representation","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","The compound device identifier for Layer 1.","The private key for the Layer 1 ECA certificate.","The evidence about the next layer.","Magic number that is expected to always be set to the …","Byte representation of the signed attestation report …","The evidence about the Restricted Kernel.","The evidence about Stage 0 and the initial state of the VM.","Evidence about Stage 0 and the initial state of the VM.","","","The RAW bytes representing an ECDSA private key that can …","Serialized CWT certificate for the signing private key. …","The hardware platform that generated the remote …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Extracts the bytes used to encode a CBOR object from a …"],"i":[0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,29,0,0,0,0,0,0,0,0,29,0,0,0,0,0,0,0,0,0,0,29,0,31,37,29,30,27,32,33,38,28,34,31,37,29,30,27,32,33,38,28,34,31,37,33,27,28,29,30,27,28,31,29,30,27,28,31,32,33,34,27,32,30,34,28,29,37,29,29,29,30,27,32,33,38,28,34,31,37,29,30,30,30,29,30,27,32,33,38,28,34,31,37,38,38,38,38,30,31,38,31,30,30,34,28,30,29,30,27,28,31,29,29,30,27,32,33,38,28,34,31,37,29,30,27,32,33,38,28,34,31,37,29,30,27,32,33,38,28,34,31,37,32,33,34,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],1],[[1,1],1],[[1,1],2],[[1,1],1],[[1,1],2],[1,3],[1,3],[[1,1],1],[[1,1],2],[-1,-2,[],[]],[-1,-2,[],[]],[1,1],[[-1,-2],2,[],[]],[1,1],[[1,1],4],[5,[[9,[[7,[6]],8]]]],[5,[[9,[10,8]]]],[[[11,[6]]],[[12,[6]]]],[10,[[12,[6]]]],[[1,1],1],[[],1],[[1,-1],2,13],[[1,14],15],[[1,14],15],[[1,14],15],[[1,14],15],[[1,14],15],[-1,-1,[]],[3,[[16,[1]]]],[3,1],[3,1],[3,1],[-1,1,13],[8,[[16,[1]]]],[[],[[2,[17,10]]]],[[17,18,[11,[6]],[7,[[2,[19,20]]]]],[[9,[21,22]]]],[[17,18,10,[7,[[2,[19,20]]]]],[[9,[21,22]]]],[[[11,[6]]],[[9,[23,22]]]],[23,[[9,[5,8]]]],[[[11,[6]]],5],[[1,1],2],[[1,1],1],[[1,1],4],[-1,-2,[],[]],[1],[1,4],[1,4],[1,[[24,[1]]]],[1,[[25,[1]]]],[1,1],[[1,1],2],[[1,1,4],2],[[1,1],1],[[1,1],2],[[1,1],1],[-1,-2,[],[]],[[1,1],2],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,26,[]],[[1,1],1],[10,5],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[27,[[9,[23,18]]]],[28,[[9,[23,18]]]],[29,29],[30,30],[27,27],[28,28],[31,31],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[32,2],[33,2],[34,2],0,0,0,0,0,[[29,29],4],0,[[29,14],15],[[29,14],[[9,[2,35]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[36,[[16,[29]]]],[30,[[9,[[7,[6]],18]]]],[30,[[9,[[11,[6]],8]]]],[30,[[9,[29,8]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,[[30,[11,[6]]],[[9,[2,8]]]],[[30,[11,[6]]],[[9,[2,8]]]],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,18,[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,26,[]],[-1,26,[]],[-1,26,[]],[-1,26,[]],[-1,26,[]],[-1,26,[]],[-1,26,[]],[-1,26,[]],[-1,26,[]],[-1,26,[]],[32,2],[33,2],[34,2],[[[11,[6]]],[[9,[[7,[6]],18]]]]],"c":[],"p":[[3,"KeyUsage",3],[15,"tuple"],[15,"u16"],[15,"bool"],[3,"CoseKey",238],[15,"u8"],[3,"Vec",239],[15,"str"],[4,"Result",240],[6,"VerifyingKey",241],[15,"slice"],[15,"array"],[8,"IntoIterator",242],[3,"Formatter",243],[6,"Result",243],[4,"Option",244],[6,"SigningKey",241],[3,"String",245],[6,"ClaimName",246],[4,"Value",247],[3,"CoseSign1",248],[4,"CoseError",249],[3,"ClaimsSet",246],[3,"Iter",250],[3,"IterNames",250],[3,"TypeId",251],[3,"LayerEvidence",92],[3,"ApplicationKeys",92],[4,"TeePlatform",92],[3,"RootLayerEvidence",92],[3,"Evidence",92],[3,"CertificateAuthority",92],[3,"CompoundDeviceIdentifier",92],[3,"ApplicationPrivateKeys",92],[3,"Error",243],[15,"u64"],[3,"RestrictedKernelDiceData",92],[3,"Stage0DiceData",92]],"b":[[35,"impl-Flags-for-KeyUsage"],[36,"impl-KeyUsage"],[52,"impl-Binary-for-KeyUsage"],[53,"impl-UpperHex-for-KeyUsage"],[54,"impl-LowerHex-for-KeyUsage"],[55,"impl-Octal-for-KeyUsage"],[56,"impl-Debug-for-KeyUsage"],[59,"impl-KeyUsage"],[60,"impl-Flags-for-KeyUsage"],[159,"impl-Debug-for-TeePlatform"],[160,"impl-Display-for-TeePlatform"]]},\
"oak_docker_linux_init":{"doc":"","t":"RAFF","n":["DOCKER_COMMAND_PATH","init","main","init"],"q":[[0,"oak_docker_linux_init"],[3,"oak_docker_linux_init::init"],[4,"anyhow"]],"d":["","","","Performs the minimum initialization required from the …"],"i":[0,0,0,0],"f":[0,0,[[],1],[[],[[3,[2]]]]],"c":[],"p":[[15,"never"],[15,"tuple"],[6,"Result",4]],"b":[]},\
"oak_echo_linux_init":{"doc":"","t":"RAFFF","n":["DEVICE_PATH","init","main","set_console_to_raw_mode","init"],"q":[[0,"oak_echo_linux_init"],[4,"oak_echo_linux_init::init"],[5,"std::os::fd::owned"],[6,"anyhow"]],"d":["","","","","Performs the minimum initialization required from the …"],"i":[0,0,0,0,0],"f":[0,0,[[],1],[-1,2,3],[[],[[4,[2]]]]],"c":[],"p":[[15,"never"],[15,"tuple"],[8,"AsFd",5],[6,"Result",6]],"b":[]},\
"oak_echo_service":{"doc":"","t":"DLLLLLLALLLIDDDDDMMLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["EchoService","borrow","borrow_mut","default","echo","from","into","proto","try_from","try_into","type_id","Echo","EchoAsyncClient","EchoClient","EchoRequest","EchoResponse","EchoServer","body","body","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clear","clear","clone","clone","clone","clone_into","clone_into","clone_into","default","default","echo","echo","echo","encoded_len","encoded_len","eq","eq","fmt","fmt","from","from","from","from","from","into","into","into","into","into","invoke","new","new","new","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id"],"q":[[0,"oak_echo_service"],[11,"oak_echo_service::proto"],[80,"micro_rpc::status"],[81,"core::result"],[82,"core::any"],[83,"core::clone"],[84,"micro_rpc"],[85,"micro_rpc"],[86,"core::fmt"]],"d":["","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,1,1,1,1,1,1,0,1,1,1,0,0,0,0,0,0,2,3,10,12,2,3,8,10,12,2,3,8,2,3,2,3,8,2,3,8,2,3,22,10,12,2,3,2,3,2,3,10,12,2,3,8,10,12,2,3,8,8,10,12,8,2,3,8,10,12,2,3,8,10,12,2,3,8,10,12,2,3,8],"f":[0,[-1,-2,[],[]],[-1,-2,[],[]],[[],1],[[1,2],[[5,[3,4]]]],[-1,-1,[]],[-1,-2,[],[]],0,[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,6,[]],0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[2,7],[3,7],[2,2],[3,3],[[[8,[-1]]],[[8,[-1]]],9],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[],2],[[],3],[[-1,2],[[5,[3,4]]],[]],[[[10,[-1]],2],[[5,[[5,[3,4]]]]],11],[[[12,[-1]],2],[[5,[[5,[3,4]]]]],13],[2,14],[3,14],[[2,2],15],[[3,3],15],[[2,16],17],[[3,16],17],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[8,[-1]],[19,[18]]],[[5,[[20,[18]],21]]],22],[-1,[[10,[-1]]],11],[-1,[[12,[-1]]],13],[-1,[[8,[-1]]],22],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]]],"c":[],"p":[[3,"EchoService",0],[3,"EchoRequest",11],[3,"EchoResponse",11],[3,"Status",80],[4,"Result",81],[3,"TypeId",82],[15,"tuple"],[3,"EchoServer",11],[8,"Clone",83],[3,"EchoClient",11],[8,"Transport",84],[3,"EchoAsyncClient",11],[8,"AsyncTransport",84],[15,"usize"],[15,"bool"],[3,"Formatter",85],[6,"Result",85],[15,"u8"],[15,"slice"],[3,"Vec",86],[15,"never"],[8,"Echo",11]],"b":[]},\
"oak_enclave_runtime_support":{"doc":"","t":"F","n":["init"],"q":[[0,"oak_enclave_runtime_support"]],"d":[""],"i":[0],"f":[[[],1]],"c":[],"p":[[15,"tuple"]],"b":[]},\
"oak_functions_abi":{"doc":"Type, constant and Wasm host function definitions for the …","t":"NNNNRDDENNLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFMLAMLLLLLLLLLLLLLDDDLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLMM","n":["BadRequest","InternalServerError","PolicySizeViolation","PolicyTimeViolation","RESPONSE_BODY_OFFSET","Request","Response","StatusCode","Success","Unspecified","body","body","body","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","create","decode","encode_to_vec","eq","eq","eq","fmt","fmt","fmt","fmt","from","from","from","from_repr","into","into","into","invoke","length","pad","proto","status","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","ConfigurationReport","Entry","ServerPolicy","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clear","clear","clear","clone","clone","clone","clone_into","clone_into","clone_into","constant_processing_time_ms","constant_response_size_bytes","default","default","default","encoded_len","encoded_len","encoded_len","eq","eq","eq","fmt","fmt","fmt","from","from","from","into","into","into","key","policy","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","value","wasm_hash"],"q":[[0,"oak_functions_abi"],[60,"oak_functions_abi::proto"],[114,"core::num::error"],[115,"core::result"],[116,"alloc::vec"],[117,"anyhow"],[118,"core::fmt"],[119,"core::fmt"],[120,"alloc::string"],[121,"core::any"]],"d":["","","","","","See REQUEST_RESPONSE_ENCODING.MD in the crate root.","See REQUEST_RESPONSE_ENCODING.MD in the crate root.","See REQUEST_RESPONSE_ENCODING.MD in the crate root.","","","Returns the body of the response, excluding any trailing …","","body (may include padding 0s)","","","","","","","","","","","","","Creates a new instance of Response.","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Try to create Self from the raw representation","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","See <code>invoke</code>.","The effective length of the body, excluding any padding …","Creates and returns a new <code>Response</code> instance with the same …","","","","","","","","","","","","","","","","The client can check the configuration report for the …","An individual entry to be made available for lookup to an …","/ Server-side policy describing limits on the size of the …","","","","","","","","","","","","","","","","A fixed response time, in milliseconds.","A fixed size for responses returned by the trusted runtime.","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","The validated server-side policy.","","","","","","","","","","","","","","Hash of the loaded Wasm module."],"i":[7,7,7,7,0,0,0,0,7,7,1,6,1,6,1,7,6,1,7,6,1,7,6,1,7,1,1,1,6,1,7,6,1,7,7,6,1,7,7,6,1,7,0,1,1,0,1,6,1,7,7,6,1,7,6,1,7,6,1,7,0,0,0,20,21,22,20,21,22,20,21,22,20,21,22,20,21,22,21,21,20,21,22,20,21,22,20,21,22,20,21,22,20,21,22,20,21,22,22,20,20,21,22,20,21,22,20,21,22,20,21,22,22,20],"f":[0,0,0,0,0,0,0,0,0,0,[1,[[5,[[3,[2]],4]]]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[6,6],[1,1],[7,7],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[7,[9,[2]]],1],[[[3,[2]]],[[10,[1]]]],[1,[[9,[2]]]],[[6,6],11],[[1,1],11],[[7,7],11],[[6,12],13],[[1,12],13],[[7,12],[[5,[8,14]]]],[[7,12],13],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[15,[[16,[7]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[[1,17],[[10,[1]]]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,18,[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,19,[]],[-1,19,[]],[-1,19,[]],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[20,8],[21,8],[22,8],[20,20],[21,21],[22,22],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],0,0,[[],20],[[],21],[[],22],[20,17],[21,17],[22,17],[[20,20],11],[[21,21],11],[[22,22],11],[[20,12],13],[[21,12],13],[[22,12],13],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,19,[]],[-1,19,[]],[-1,19,[]],0,0],"c":[],"p":[[3,"Response",0],[15,"u8"],[15,"slice"],[3,"TryFromIntError",114],[4,"Result",115],[3,"Request",0],[4,"StatusCode",0],[15,"tuple"],[3,"Vec",116],[6,"Result",117],[15,"bool"],[3,"Formatter",118],[6,"Result",118],[3,"Error",118],[15,"u32"],[4,"Option",119],[15,"usize"],[3,"String",120],[3,"TypeId",121],[3,"ConfigurationReport",60],[3,"ServerPolicy",60],[3,"Entry",60]],"b":[[33,"impl-Display-for-StatusCode"],[34,"impl-Debug-for-StatusCode"]]},\
"oak_functions_client":{"doc":"","t":"DLLLLLLLLLLL","n":["OakFunctionsClient","borrow","borrow_mut","from","into","into_request","invoke","new","try_from","try_into","type_id","vzip"],"q":[[0,"oak_functions_client"],[12,"tonic::request"],[13,"alloc::vec"],[14,"micro_rpc::status"],[15,"core::result"],[16,"anyhow"],[17,"core::any"]],"d":["","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","",""],"i":[0,2,2,2,2,2,2,2,2,2,2,2],"f":[0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-1,[]],[-1,-2,[],[]],[-1,[[1,[-2]]],[],[]],[[2,[4,[3]]],[[7,[[5,[3]],6]]]],[8,[[9,[2]]]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,10,[]],[-1,-2,[],[]]],"c":[],"p":[[3,"Request",12],[3,"OakFunctionsClient",0],[15,"u8"],[15,"slice"],[3,"Vec",13],[3,"Status",14],[4,"Result",15],[15,"str"],[6,"Result",16],[3,"TypeId",17]],"b":[]},\
"oak_functions_containers_app":{"doc":"","t":"DLLLLLLLLLLLLLLLLALFLLLLLAAAAAAANDDDDDDDDNDDDDDDDEDNMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMLLLLLLLLLLLLLLLLLLMMMLLLLLLLLLLLLLLLLMMMALLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMLLMMMMMMLMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNNELLLLLLLLLLLLLLLLLLLLLLLDDDLLLLLLLLLLLLLLLLLLLLLMLLLMLLLLLLMLLLLLLLLLMLLLLLLLLLLLLLLLAALLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLADDDDDLLLLLLLLLLMLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMLMMLLLLLLLLLLLLLLLLLLLLLLLLLAADLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLIDKLLLLLLLLLKKLLLLKKLLLLLLLLLLLKLKLLLLLLADDDDDDDDDDMLLLLLLLLLLLLLLLLLLLLMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLMLLLLLLLLLLMMMMMMMLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["OakFunctionsContainersService","abort_next_lookup_data","as_any","as_any_mut","borrow","borrow_mut","extend_next_lookup_data","finish_next_lookup_data","from","handle_user_request","initialize","into","into_any","into_any_arc","into_any_rc","into_request","new","proto","reserve","serve","stream_lookup_data","try_from","try_into","type_id","vzip","oak","attestation","containers","crypto","functions","session","v1","AmdSevSnp","ApplicationKeys","ApplicationLayerEndorsements","CbEndorsements","CertificateAuthority","ContainerLayerEndorsements","DiceData","Endorsements","Evidence","IntelTdx","KernelLayerEndorsements","LayerEvidence","OakContainersEndorsements","OakRestrictedKernelEndorsements","RootLayerEndorsements","RootLayerEvidence","SystemLayerEndorsements","TeePlatform","TransparentReleaseEndorsement","Unspecified","acpi","application_keys","application_layer","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_str_name","binary","binary","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","certificate_authority","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","compare","configuration","configuration","container_layer","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","drop","eca_certificate","eca_private_key","eca_public_key","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encryption_public_key_certificate","endorsement","endorsement_signature","endorsements","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","evidence","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_i32","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_str_name","get_claims","hash","init_ram_fs","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","is_valid","kernel_cmd_line","kernel_image","kernel_layer","kernel_layer","kernel_setup_data","layers","memory_map","partial_cmp","platform","platform","rekor_log_entry","remote_attestation_report","root_layer","root_layer","root_layer","set_platform","signing_public_key_certificate","stage0","system_image","system_layer","tee_certificate","tee_certificate","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","Cb","OakContainers","OakRestrictedKernel","Type","as_any","as_any_mut","borrow","borrow_mut","clone","clone_into","encode","encoded_len","eq","fmt","from","from_ref","into","into_any","into_any_arc","into_any_rc","into_request","merge","to_owned","try_from","try_into","type_id","vzip","GetApplicationConfigResponse","GetImageResponse","SendAttestationEvidenceRequest","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clear","clear","clear","clone","clone","clone","clone_into","clone_into","clone_into","config","default","default","default","dice_evidence","encoded_len","encoded_len","encoded_len","eq","eq","eq","evidence","fmt","fmt","fmt","from","from","from","from_ref","from_ref","from_ref","image_chunk","into","into","into","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_request","into_request","into_request","launcher_client","orchestrator_client","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","LauncherClient","accept_compressed","as_any","as_any_mut","borrow","borrow_mut","clone","clone_into","connect","fmt","from","from_ref","get_application_config","get_container_bundle","get_oak_system_image","into","into_any","into_any_arc","into_any_rc","into_request","max_decoding_message_size","max_encoding_message_size","new","notify_app_ready","send_attestation_evidence","send_compressed","to_owned","try_from","try_into","type_id","vzip","with_interceptor","with_origin","OrchestratorClient","accept_compressed","as_any","as_any_mut","borrow","borrow_mut","clone","clone_into","connect","fmt","from","from_ref","get_application_config","into","into_any","into_any_arc","into_any_rc","into_request","max_decoding_message_size","max_encoding_message_size","new","notify_app_ready","send_compressed","to_owned","try_from","try_into","type_id","vzip","with_interceptor","with_origin","v1","AeadEncryptedMessage","EncryptedRequest","EncryptedResponse","SessionKeys","Signature","as_any","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","associated_data","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","ciphertext","clear","clear","clear","clear","clear","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","default","default","default","default","default","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encrypted_message","encrypted_message","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from_ref","from_ref","from_ref","from_ref","from_ref","into","into","into","into","into","into_any","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_request","into_request","into_request","into_request","into_request","nonce","request_key","response_key","serialized_encapsulated_public_key","serialized_encapsulated_public_key","signature","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","oak_functions_client","oak_functions_server","OakFunctionsClient","abort_next_lookup_data","accept_compressed","as_any","as_any_mut","borrow","borrow_mut","clone","clone_into","connect","extend_next_lookup_data","finish_next_lookup_data","fmt","from","from_ref","handle_user_request","initialize","into","into_any","into_any_arc","into_any_rc","into_request","max_decoding_message_size","max_encoding_message_size","new","reserve","send_compressed","stream_lookup_data","to_owned","try_from","try_into","type_id","vzip","with_interceptor","with_origin","OakFunctions","OakFunctionsServer","abort_next_lookup_data","accept_compressed","as_any","as_any_mut","borrow","borrow_mut","call","call","clone","clone_into","extend_next_lookup_data","finish_next_lookup_data","fmt","from","from_arc","from_ref","handle_user_request","initialize","into","into_any","into_any_arc","into_any_rc","into_make_service","into_request","max_decoding_message_size","max_encoding_message_size","new","poll_ready","poll_ready","reserve","send_compressed","stream_lookup_data","to_owned","try_from","try_into","type_id","vzip","with_interceptor","v1","ApplicationData","AttestationBundle","AttestationEndorsement","AttestationEvidence","GetEncryptionKeyRequest","GetEncryptionKeyResponse","GetPublicKeyRequest","GetPublicKeyResponse","InvokeRequest","InvokeResponse","application_data","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","attestation","attestation_bundle","attestation_endorsement","attestation_evidence","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","config","default","default","default","default","default","default","default","default","default","default","digest","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encrypted_attestation_bundle","encrypted_encryption_key","encrypted_request","encrypted_response","encryption_public_key","endorsed_evidence","endorsements","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","evidence","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","into","into","into","into","into","into","into","into","into","into","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","signed_application_data","signing_public_key","tee_certificates","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip"],"q":[[0,"oak_functions_containers_app"],[25,"oak_functions_containers_app::proto"],[26,"oak_functions_containers_app::proto::oak"],[31,"oak_functions_containers_app::proto::oak::attestation"],[32,"oak_functions_containers_app::proto::oak::attestation::v1"],[502,"oak_functions_containers_app::proto::oak::attestation::v1::endorsements"],[529,"oak_functions_containers_app::proto::oak::containers"],[607,"oak_functions_containers_app::proto::oak::containers::launcher_client"],[640,"oak_functions_containers_app::proto::oak::containers::orchestrator_client"],[670,"oak_functions_containers_app::proto::oak::crypto"],[671,"oak_functions_containers_app::proto::oak::crypto::v1"],[801,"oak_functions_containers_app::proto::oak::functions"],[803,"oak_functions_containers_app::proto::oak::functions::oak_functions_client"],[838,"oak_functions_containers_app::proto::oak::functions::oak_functions_server"],[878,"oak_functions_containers_app::proto::oak::session"],[879,"oak_functions_containers_app::proto::oak::session::v1"],[1137,"oak_functions_service::proto::oak::functions"],[1138,"tonic::request"],[1139,"core::future::future"],[1140,"alloc::boxed"],[1141,"core::pin"],[1142,"oak_crypto::encryptor"],[1143,"core::marker"],[1144,"core::marker"],[1145,"oak_functions_service::proto::oak::functions"],[1146,"alloc::rc"],[1147,"oak_functions_service"],[1148,"core::option"],[1149,"oak_functions_service::proto::oak::functions"],[1150,"opentelemetry::metrics::meter"],[1151,"anyhow"],[1152,"oak_functions_service::proto::oak::functions"],[1153,"core::result"],[1154,"core::any"],[1155,"core::fmt"],[1156,"core::fmt"],[1157,"oak_attestation::dice"],[1158,"coset::cwt"],[1159,"anyhow"],[1160,"oak_dice::evidence"],[1161,"prost::encoding"],[1162,"prost::encoding"],[1163,"bytes::buf::buf_impl"],[1164,"core::fmt"],[1165,"tonic::body"],[1166,"tonic::client::service"],[1167,"core::clone"],[1168,"tonic::transport::channel"],[1169,"tonic::transport::error"],[1170,"tonic::transport::channel::endpoint"],[1171,"core::convert"],[1172,"core::fmt"],[1173,"tonic::status"],[1174,"tonic::request"],[1175,"http::request"],[1176,"tower_service"],[1177,"tonic::service::interceptor"],[1178,"oak_functions_service::proto::oak::functions"],[1179,"axum::routing::into_make_service"],[1180,"core::task::wake"],[1181,"core::task::poll"]],"d":["","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","Keys used by the application to derive encryption session …","","","Message for passing embedded certificate authority …","","Message that is sent between DICE layers.","Endorsement contains statements that some entity (e.g. a …","Attestation Evidence used by the client to the identity of …","","","DICE layer evidence containing a certificate signed by the …","","","","Evidence generated by the Layer0.","","This proto defines the layered DICE Attestation Evidence.","Endorsement for binaries from the Transparent Release …","","","Application keys signed by the penultimate layer’s ECA …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","String value of the enum field names used in the ProtoBuf …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Certificate signing current layer’s measurements and the …","ECA private key that will be used by a layer to sign a …","Serialized ECA public key for Layer0 that is signed by the …","","","","","","","","","","","","","","","","","Certificate signing the encryption public key.","JSON string comtaining the endorsement statement for the …","The signature for the endorsement.","Nested message and enum types in <code>Endorsements</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Converts an <code>i32</code> to a <code>TeePlatform</code>, or <code>None</code> if <code>value</code> is not …","","","","","","","","","","","","","","","","","","Creates an enum from field names used in the ProtoBuf …","Extracts the <code>ClaimsSet</code> encoded in the ECA certificate of …","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns <code>true</code> if <code>value</code> is a variant of <code>TeePlatform</code>.","","","","","","Layer1..LayerN-1 attestation evidence.","","","Returns the enum value of <code>platform</code>, or the default if the …","The platform providing the attestation report.","The log entry as proof of inclusion of the endorsement …","TEE-specific attestation report acting as a non-standard …","Layer0 attestation evidence.","","","Sets <code>platform</code> to the provided enum value.","Certificate signing the signing public key.","Endorsement of the Stage0 binary.","","","The serialized TEE certificate(s). The details of the …","Serialized X.509 TEE certificate.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Encodes the message to a buffer.","Returns the encoded length of the message without a length …","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","Decodes an instance of the message from a buffer, and …","","","","","","","As images can be large (hundreds of megabytes), the …","","","","","","","","","","","","","","","","","","","","","","","Arbitrary config that the container can retrieve from the …","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","Generated client implementations.","Generated client implementations.","","","","","","","","","","","","","","","","Defines the service exposed by the launcher, that can be …","Enable decompressing responses.","","","","","","","Attempt to create a new client by connecting to a given …","","Returns the argument unchanged.","","This method is used by the orchestrator to load and …","Provides orchestrator with the trusted container image.","Provides stage1 with the Oak system image (which contains …","Calls <code>U::from(self)</code>.","","","","","Limits the maximum size of a decoded message.","Limits the maximum size of an encoded message.","","Notifies the launcher that the trusted app is ready to …","Sends Attestation Evidence containing the Attestation …","Compress requests with the given encoding.","","","","","","","","Defines the service exposed by the orchestrator, that can …","Enable decompressing responses.","","","","","","","Attempt to create a new client by connecting to a given …","","Returns the argument unchanged.","","Exposes the previously loaded trusted application config …","Calls <code>U::from(self)</code>.","","","","","Limits the maximum size of a decoded message.","Limits the maximum size of an encoded message.","","Notifies the orchestrator that the trusted app is ready to …","Compress requests with the given encoding.","","","","","","","","","Message encrypted with Authenticated Encryption with …","Request message encrypted using Hybrid Public Key …","Response message encrypted Hybrid Public Key Encryption …","Envelope containing session keys required to …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Message encrypted with Authenticated Encryption with …","Message encrypted with Authenticated Encryption with …","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","AEAD key for encrypting/decrypting client requests.","AEAD key for encrypting/decrypting enclave responses.","Returns the value of <code>serialized_encapsulated_public_key</code>, …","Ephemeral Diffie-Hellman client public key that is needed …","","","","","","","","","","","","","","","","","","","","","","","","","","","Generated client implementations.","Generated server implementations.","","Aborts building the next lookup data.option","Enable decompressing responses.","","","","","","","Attempt to create a new client by connecting to a given …","Extends the next lookup data by the given chunk of lookup …","Finishes building the next lookup data with the given …","","Returns the argument unchanged.","","Handles an invocation coming from a client.","Initializes the service and remote attestation keys.","Calls <code>U::from(self)</code>.","","","","","Limits the maximum size of a decoded message.","Limits the maximum size of an encoded message.","","Reserves additional capacity for entries in the lookup …","Compress requests with the given encoding.","Streaming version combining <code>ExtendNextLookupData</code> and …","","","","","","","","Generated trait containing gRPC methods that should be …","","Aborts building the next lookup data.option","Enable decompressing requests with the given encoding.","","","","","","","","","Extends the next lookup data by the given chunk of lookup …","Finishes building the next lookup data with the given …","","Returns the argument unchanged.","","","Handles an invocation coming from a client.","Initializes the service and remote attestation keys.","Calls <code>U::from(self)</code>.","","","","","","Limits the maximum size of a decoded message.","Limits the maximum size of an encoded message.","","","","Reserves additional capacity for entries in the lookup …","Compress responses with the given encoding, if the client …","Streaming version combining <code>ExtendNextLookupData</code> and …","","","","","","","","","AttestationBundle contains the information that the …","AttestationEndorsement contains statements that some …","AttestationEvidence contains all the information that …","","","","","","","The optional application-specific data.","","","","","","","","","","","","","","","","","","","","","The serialized attestation report binding the public key.","The enclave’s signing and encryption public keys and …","Supporting evidence required for verifying the integrity …","Attestation evidence from the enclave.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The serialized application configuration. The format of …","","","","","","","","","","","The cryptographic digest of the application, of the form …","","","","","","","","","","","Encrypted attestation evidence of the dependent enclave.","Encrypted private key of the leader enclave.","Body of the request, encrypted using Hybrid Public Key …","Body of the request, encrypted using Hybrid Public Key …","The serialized public key part of the enclave encryption …","Attestation evidence and public key.","Thea attestation endorsements.","","","","","","","","","","","The DICE attestation evidence.","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The signature over the application_data, signed by the …","The serialized public key part of the enclave signing key. …","The serialized TEE certificate(s). The details of the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,1,1,1,1,0,0,0,0,0,0,0,28,0,0,0,0,0,0,0,0,28,0,0,0,0,0,0,0,0,0,28,38,33,42,30,31,32,33,28,34,35,36,37,38,39,40,41,42,43,44,45,30,31,32,33,28,34,35,36,37,38,39,40,41,42,43,44,45,28,40,41,30,31,32,33,28,34,35,36,37,38,39,40,41,42,43,44,45,30,31,32,33,28,34,35,36,37,38,39,40,41,42,43,44,45,35,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,30,31,32,33,28,34,35,36,37,38,39,40,41,42,43,44,45,30,31,32,33,28,34,35,36,37,38,39,40,41,42,43,44,45,28,28,40,41,43,30,31,32,33,28,34,35,36,37,38,39,40,41,42,43,44,45,35,31,34,30,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,32,36,36,0,30,31,32,33,28,34,35,36,37,38,39,40,41,42,43,44,45,28,28,28,28,35,30,31,32,33,28,34,35,36,37,38,39,40,41,42,43,44,45,30,31,32,33,28,28,34,35,35,36,37,38,39,40,41,42,43,44,45,28,30,31,32,33,28,34,35,36,37,38,39,40,41,42,43,44,45,28,31,28,38,30,31,32,33,28,34,35,36,37,38,39,40,41,42,43,44,45,30,31,32,33,28,34,35,36,37,38,39,40,41,42,43,44,45,30,31,32,33,28,34,35,36,37,38,39,40,41,42,43,44,45,30,31,32,33,28,34,35,36,37,38,39,40,41,42,43,44,45,30,31,32,33,28,34,35,36,37,38,39,40,41,42,43,44,45,28,38,38,42,43,38,33,38,28,30,30,36,30,33,42,43,30,32,37,39,43,37,44,30,31,32,33,28,34,35,36,37,38,39,40,41,42,43,44,45,30,30,31,31,32,32,33,33,28,34,35,35,36,37,38,39,40,41,42,43,44,45,30,31,32,33,28,34,35,36,37,38,39,40,41,42,43,44,45,45,30,31,32,33,28,34,35,36,37,38,39,40,41,42,43,44,45,30,31,32,33,28,34,35,36,37,38,39,40,41,42,43,44,45,62,62,62,0,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,0,0,0,69,70,71,69,70,71,69,70,71,69,70,71,69,70,71,69,70,71,69,70,71,70,69,70,71,71,69,70,71,69,70,71,71,69,70,71,69,70,71,69,70,71,69,69,70,71,69,70,71,69,70,71,69,70,71,69,70,71,0,0,69,70,71,69,70,71,69,70,71,69,70,71,69,70,71,0,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,0,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,0,0,0,0,0,0,92,93,94,95,96,92,93,94,95,96,94,92,93,94,95,96,92,93,94,95,96,94,92,93,94,95,96,92,93,94,95,96,92,93,94,95,96,92,93,94,95,96,92,93,94,95,96,92,93,92,93,94,95,96,92,93,94,95,96,92,93,94,95,96,92,93,94,95,96,92,93,94,95,96,92,93,94,95,96,92,93,94,95,96,92,93,94,95,96,92,93,94,95,96,94,95,95,92,92,96,92,93,94,95,96,92,93,94,95,96,92,93,94,95,96,92,93,94,95,96,92,93,94,95,96,0,0,0,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,0,0,108,107,107,107,107,107,107,107,107,107,108,108,107,107,107,107,108,108,107,107,107,107,107,107,107,107,107,107,107,108,107,108,107,107,107,107,107,107,0,0,0,0,0,0,0,0,0,0,0,115,113,114,115,116,117,118,119,120,121,122,113,114,115,116,117,118,119,120,121,122,113,118,114,114,113,114,115,116,117,118,119,120,121,122,113,114,115,116,117,118,119,120,121,122,113,114,115,116,117,118,119,120,121,122,113,114,115,116,117,118,119,120,121,122,113,114,115,116,117,118,119,120,121,122,116,113,114,115,116,117,118,119,120,121,122,116,113,114,115,116,117,118,119,120,121,122,121,122,119,120,113,122,114,113,114,115,116,117,118,119,120,121,122,114,113,114,115,116,117,118,119,120,121,122,113,114,115,116,117,118,119,120,121,122,113,114,115,116,117,118,119,120,121,122,113,114,115,116,117,118,119,120,121,122,113,114,115,116,117,118,119,120,121,122,113,114,115,116,117,118,119,120,121,122,113,114,115,116,117,118,119,120,121,122,113,114,115,116,117,118,119,120,121,122,113,113,115,113,114,115,116,117,118,119,120,121,122,113,114,115,116,117,118,119,120,121,122,113,114,115,116,117,118,119,120,121,122,113,114,115,116,117,118,119,120,121,122,113,114,115,116,117,118,119,120,121,122],"f":[0,[[[1,[-1]],[3,[2]]],[[6,[[5,[4]]]]],[7,8,9]],[-1,10,[]],[-1,10,[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[1,[-1]],[3,[11]]],[[6,[[5,[4]]]]],[7,8,9]],[[[1,[-1]],[3,[12]]],[[6,[[5,[4]]]]],[7,8,9]],[-1,-1,[]],[[[1,[-1]],[3,[13]]],[[6,[[5,[4]]]]],[7,8,9]],[[[1,[-1]],[3,[14]]],[[6,[[5,[4]]]]],[7,8,9]],[-1,-2,[],[]],[[[5,[-1]]],[[5,[10]]],[]],[[[15,[-1]]],[[15,[10]]],[]],[[[16,[-1]]],[[16,[10]]],[]],[-1,[[3,[-2]]],[],[]],[[[15,[-1]],[18,[[15,[17]]]]],[[1,[-1]]],[7,8,9]],0,[[[1,[-1]],[3,[19]]],[[6,[[5,[4]]]]],[7,8,9]],[[20,[15,[-1]],21],[[23,[22]]],[7,8,9]],[[[1,[-1]],[3,[[25,[24]]]]],[[6,[[5,[4]]]]],[7,8,9]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,27,[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[28,29],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[30,22],[31,22],[32,22],[33,22],[34,22],[35,22],[36,22],[37,22],[38,22],[39,22],[40,22],[41,22],[42,22],[43,22],[44,22],[45,22],[30,30],[31,31],[32,32],[33,33],[28,28],[34,34],[35,35],[36,36],[37,37],[38,38],[39,39],[40,40],[41,41],[42,42],[43,43],[44,44],[45,45],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[28,28],46],[[-1,-2],46,[],[]],0,0,0,[[],30],[[],31],[[],32],[[],33],[[],28],[[],34],[[],35],[[],36],[[],37],[[],38],[[],39],[[],40],[[],41],[[],42],[[],43],[[],44],[[],45],[35,22],0,0,0,[30,47],[31,47],[32,47],[33,47],[34,47],[35,47],[36,47],[37,47],[38,47],[39,47],[40,47],[41,47],[42,47],[43,47],[44,47],[45,47],0,0,0,0,[[30,30],48],[[31,31],48],[[32,32],48],[[33,33],48],[[28,28],48],[[34,34],48],[[35,35],48],[[36,36],48],[[37,37],48],[[38,38],48],[[39,39],48],[[40,40],48],[[41,41],48],[[42,42],48],[[43,43],48],[[44,44],48],[[45,45],48],[[-1,-2],48,[],[]],[[-1,-2],48,[],[]],[[-1,-2],48,[],[]],[[-1,-2],48,[],[]],0,[[30,49],[[26,[22,50]]]],[[31,49],[[26,[22,50]]]],[[32,49],[[26,[22,50]]]],[[33,49],[[26,[22,50]]]],[[28,49],[[26,[22,50]]]],[[34,49],[[26,[22,50]]]],[[35,49],[[26,[22,50]]]],[[36,49],[[26,[22,50]]]],[[37,49],[[26,[22,50]]]],[[38,49],[[26,[22,50]]]],[[39,49],[[26,[22,50]]]],[[40,49],[[26,[22,50]]]],[[41,49],[[26,[22,50]]]],[[42,49],[[26,[22,50]]]],[[43,49],[[26,[22,50]]]],[[44,49],[[26,[22,50]]]],[[45,49],[[26,[22,50]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[51,28],[-1,-1,[]],[52,35],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[53,[[18,[28]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[29,[[18,[28]]]],[31,[[26,[54,55]]]],[[28,-1],22,56],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[5,[-1]]],[[5,[10]]],[]],[[[5,[-1]]],[[5,[10]]],[]],[[[5,[-1]]],[[5,[10]]],[]],[[[5,[-1]]],[[5,[10]]],[]],[[[5,[-1]]],[[5,[10]]],[]],[[[5,[-1]]],[[5,[10]]],[]],[[[5,[-1]]],[[5,[10]]],[]],[[[5,[-1]]],[[5,[10]]],[]],[[[5,[-1]]],[[5,[10]]],[]],[[[5,[-1]]],[[5,[10]]],[]],[[[5,[-1]]],[[5,[10]]],[]],[[[5,[-1]]],[[5,[10]]],[]],[[[5,[-1]]],[[5,[10]]],[]],[[[5,[-1]]],[[5,[10]]],[]],[[[5,[-1]]],[[5,[10]]],[]],[[[5,[-1]]],[[5,[10]]],[]],[[[5,[-1]]],[[5,[10]]],[]],[[[15,[-1]]],[[15,[10]]],[]],[[[15,[-1]]],[[15,[10]]],[]],[[[15,[-1]]],[[15,[10]]],[]],[[[15,[-1]]],[[15,[10]]],[]],[[[15,[-1]]],[[15,[10]]],[]],[[[15,[-1]]],[[15,[10]]],[]],[[[15,[-1]]],[[15,[10]]],[]],[[[15,[-1]]],[[15,[10]]],[]],[[[15,[-1]]],[[15,[10]]],[]],[[[15,[-1]]],[[15,[10]]],[]],[[[15,[-1]]],[[15,[10]]],[]],[[[15,[-1]]],[[15,[10]]],[]],[[[15,[-1]]],[[15,[10]]],[]],[[[15,[-1]]],[[15,[10]]],[]],[[[15,[-1]]],[[15,[10]]],[]],[[[15,[-1]]],[[15,[10]]],[]],[[[15,[-1]]],[[15,[10]]],[]],[[[16,[-1]]],[[16,[10]]],[]],[[[16,[-1]]],[[16,[10]]],[]],[[[16,[-1]]],[[16,[10]]],[]],[[[16,[-1]]],[[16,[10]]],[]],[[[16,[-1]]],[[16,[10]]],[]],[[[16,[-1]]],[[16,[10]]],[]],[[[16,[-1]]],[[16,[10]]],[]],[[[16,[-1]]],[[16,[10]]],[]],[[[16,[-1]]],[[16,[10]]],[]],[[[16,[-1]]],[[16,[10]]],[]],[[[16,[-1]]],[[16,[10]]],[]],[[[16,[-1]]],[[16,[10]]],[]],[[[16,[-1]]],[[16,[10]]],[]],[[[16,[-1]]],[[16,[10]]],[]],[[[16,[-1]]],[[16,[10]]],[]],[[[16,[-1]]],[[16,[10]]],[]],[[[16,[-1]]],[[16,[10]]],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[53,48],0,0,0,0,0,0,0,[[28,28],[[18,[46]]]],[30,28],0,0,0,0,0,0,[[30,28],22],0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[26,[-2]]],[],[]],[57,[[26,[30,55]]]],[58,[[26,[31,55]]]],[-1,[[26,[-2]]],[],[]],[59,[[26,[32,55]]]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[60,[[26,[33,55]]]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[61,[[26,[35,55]]]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],0,[-1,27,[]],[-1,27,[]],[-1,27,[]],[-1,27,[]],[-1,27,[]],[-1,27,[]],[-1,27,[]],[-1,27,[]],[-1,27,[]],[-1,27,[]],[-1,27,[]],[-1,27,[]],[-1,27,[]],[-1,27,[]],[-1,27,[]],[-1,27,[]],[-1,27,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,[-1,10,[]],[-1,10,[]],[-1,-2,[],[]],[-1,-2,[],[]],[62,62],[[-1,-2],22,[],[]],[[62,-1],22,63],[62,47],[[62,62],48],[[62,49],[[26,[22,50]]]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[[[5,[-1]]],[[5,[10]]],[]],[[[15,[-1]]],[[15,[10]]],[]],[[[16,[-1]]],[[16,[10]]],[]],[-1,[[3,[-2]]],[],[]],[[[18,[62]],64,65,-1,66],[[26,[22,67]]],68],[-1,-2,[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,27,[]],[-1,-2,[],[]],0,0,0,[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[69,22],[70,22],[71,22],[69,69],[70,70],[71,71],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],0,[[],69],[[],70],[[],71],0,[69,47],[70,47],[71,47],[[69,69],48],[[70,70],48],[[71,71],48],0,[[69,49],72],[[70,49],72],[[71,49],72],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[5,[-1]]],[[5,[10]]],[]],[[[5,[-1]]],[[5,[10]]],[]],[[[5,[-1]]],[[5,[10]]],[]],[[[15,[-1]]],[[15,[10]]],[]],[[[15,[-1]]],[[15,[10]]],[]],[[[15,[-1]]],[[15,[10]]],[]],[[[16,[-1]]],[[16,[10]]],[]],[[[16,[-1]]],[[16,[10]]],[]],[[[16,[-1]]],[[16,[10]]],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,27,[]],[-1,27,[]],[-1,27,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[[73,[-1]],74],[[73,[-1]]],[[76,[75]]]],[-1,10,[]],[-1,10,[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[73,[-1]]],[[73,[-1]]],77],[[-1,-2],22,[],[]],[-1,[[26,[[73,[78]],79]]],[[81,[80]]]],[[[73,[-1]],49],72,82],[-1,-1,[]],[-1,-1,[]],[[[73,[-1]],-2],[[26,[[83,[70]],84]]],[[76,[75]]],[[85,[22]]]],[[[73,[-1]],-2],[[26,[[83,[[25,[69]]]],84]]],[[76,[75]]],[[85,[22]]]],[[[73,[-1]],-2],[[26,[[83,[[25,[69]]]],84]]],[[76,[75]]],[[85,[22]]]],[-1,-2,[],[]],[[[5,[-1]]],[[5,[10]]],[]],[[[15,[-1]]],[[15,[10]]],[]],[[[16,[-1]]],[[16,[10]]],[]],[-1,[[3,[-2]]],[],[]],[[[73,[-1]],47],[[73,[-1]]],[[76,[75]]]],[[[73,[-1]],47],[[73,[-1]]],[[76,[75]]]],[-1,[[73,[-1]]],[[76,[75]]]],[[[73,[-1]],-2],[[26,[[83,[22]],84]]],[[76,[75]]],[[85,[22]]]],[[[73,[-1]],-2],[[26,[[83,[22]],84]]],[[76,[75]]],[[85,[71]]]],[[[73,[-1]],74],[[73,[-1]]],[[76,[75]]]],[-1,-2,[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,27,[]],[-1,-2,[],[]],[[-1,-2],[[73,[[86,[-1,-2]]]]],[[88,[[87,[75]]]],[76,[75]]],89],[[-1,90],[[73,[-1]]],[[76,[75]]]],0,[[[91,[-1]],74],[[91,[-1]]],[[76,[75]]]],[-1,10,[]],[-1,10,[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[91,[-1]]],[[91,[-1]]],77],[[-1,-2],22,[],[]],[-1,[[26,[[91,[78]],79]]],[[81,[80]]]],[[[91,[-1]],49],72,82],[-1,-1,[]],[-1,-1,[]],[[[91,[-1]],-2],[[26,[[83,[70]],84]]],[[76,[75]]],[[85,[22]]]],[-1,-2,[],[]],[[[5,[-1]]],[[5,[10]]],[]],[[[15,[-1]]],[[15,[10]]],[]],[[[16,[-1]]],[[16,[10]]],[]],[-1,[[3,[-2]]],[],[]],[[[91,[-1]],47],[[91,[-1]]],[[76,[75]]]],[[[91,[-1]],47],[[91,[-1]]],[[76,[75]]]],[-1,[[91,[-1]]],[[76,[75]]]],[[[91,[-1]],-2],[[26,[[83,[22]],84]]],[[76,[75]]],[[85,[22]]]],[[[91,[-1]],74],[[91,[-1]]],[[76,[75]]]],[-1,-2,[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,27,[]],[-1,-2,[],[]],[[-1,-2],[[91,[[86,[-1,-2]]]]],[[88,[[87,[75]]]],[76,[75]]],89],[[-1,90],[[91,[-1]]],[[76,[75]]]],0,0,0,0,0,0,[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[92,22],[93,22],[94,22],[95,22],[96,22],[92,92],[93,93],[94,94],[95,95],[96,96],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[],92],[[],93],[[],94],[[],95],[[],96],[92,47],[93,47],[94,47],[95,47],[96,47],0,0,[[92,92],48],[[93,93],48],[[94,94],48],[[95,95],48],[[96,96],48],[[92,49],[[26,[22,50]]]],[[93,49],[[26,[22,50]]]],[[94,49],[[26,[22,50]]]],[[95,49],[[26,[22,50]]]],[[96,49],[[26,[22,50]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[5,[-1]]],[[5,[10]]],[]],[[[5,[-1]]],[[5,[10]]],[]],[[[5,[-1]]],[[5,[10]]],[]],[[[5,[-1]]],[[5,[10]]],[]],[[[5,[-1]]],[[5,[10]]],[]],[[[15,[-1]]],[[15,[10]]],[]],[[[15,[-1]]],[[15,[10]]],[]],[[[15,[-1]]],[[15,[10]]],[]],[[[15,[-1]]],[[15,[10]]],[]],[[[15,[-1]]],[[15,[10]]],[]],[[[16,[-1]]],[[16,[10]]],[]],[[[16,[-1]]],[[16,[10]]],[]],[[[16,[-1]]],[[16,[10]]],[]],[[[16,[-1]]],[[16,[10]]],[]],[[[16,[-1]]],[[16,[10]]],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],0,0,0,[92,[[98,[97]]]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,27,[]],[-1,27,[]],[-1,27,[]],[-1,27,[]],[-1,27,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,[[[99,[-1]],-2],[[26,[[83,[100]],84]]],[[76,[75]]],[[85,[2]]]],[[[99,[-1]],74],[[99,[-1]]],[[76,[75]]]],[-1,10,[]],[-1,10,[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[99,[-1]]],[[99,[-1]]],77],[[-1,-2],22,[],[]],[-1,[[26,[[99,[78]],79]]],[[81,[80]]]],[[[99,[-1]],-2],[[26,[[83,[101]],84]]],[[76,[75]]],[[85,[11]]]],[[[99,[-1]],-2],[[26,[[83,[102]],84]]],[[76,[75]]],[[85,[12]]]],[[[99,[-1]],49],72,82],[-1,-1,[]],[-1,-1,[]],[[[99,[-1]],-2],[[26,[[83,[103]],84]]],[[76,[75]]],[[85,[13]]]],[[[99,[-1]],-2],[[26,[[83,[104]],84]]],[[76,[75]]],[[85,[14]]]],[-1,-2,[],[]],[[[5,[-1]]],[[5,[10]]],[]],[[[15,[-1]]],[[15,[10]]],[]],[[[16,[-1]]],[[16,[10]]],[]],[-1,[[3,[-2]]],[],[]],[[[99,[-1]],47],[[99,[-1]]],[[76,[75]]]],[[[99,[-1]],47],[[99,[-1]]],[[76,[75]]]],[-1,[[99,[-1]]],[[76,[75]]]],[[[99,[-1]],-2],[[26,[[83,[105]],84]]],[[76,[75]]],[[85,[19]]]],[[[99,[-1]],74],[[99,[-1]]],[[76,[75]]]],[[[99,[-1]],-2],[[26,[[83,[102]],84]]],[[76,[75]]],106],[-1,-2,[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,27,[]],[-1,-2,[],[]],[[-1,-2],[[99,[[86,[-1,-2]]]]],[[88,[[87,[75]]]],[76,[75]]],89],[[-1,90],[[99,[-1]]],[[76,[75]]]],0,0,[[-1,[3,[2]]],[[6,[[5,[4]]]]],[]],[[[107,[-1]],74],[[107,[-1]]],108],[-1,10,[]],[-1,10,[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[107,[-1]],[87,[-2]]],[],108,[109,8]],[[-1,[87,[-2]]],[],[],[]],[[[107,[-1]]],[[107,[-1]]],108],[[-1,-2],22,[],[]],[[-1,[3,[11]]],[[6,[[5,[4]]]]],[]],[[-1,[3,[12]]],[[6,[[5,[4]]]]],[]],[[[107,[-1]],49],72,[82,108]],[-1,-1,[]],[[[15,[-1]]],[[107,[-1]]],108],[-1,-1,[]],[[-1,[3,[13]]],[[6,[[5,[4]]]]],[]],[[-1,[3,[14]]],[[6,[[5,[4]]]]],[]],[-1,-2,[],[]],[[[5,[-1]]],[[5,[10]]],[]],[[[15,[-1]]],[[15,[10]]],[]],[[[16,[-1]]],[[16,[10]]],[]],[-1,[[110,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[[[107,[-1]],47],[[107,[-1]]],108],[[[107,[-1]],47],[[107,[-1]]],108],[-1,[[107,[-1]]],108],[[-1,111],[[112,[[26,[22]]]]],[]],[[[107,[-1]],111],[[112,[[26,[22]]]]],108],[[-1,[3,[19]]],[[6,[[5,[4]]]]],[]],[[[107,[-1]],74],[[107,[-1]]],108],[[-1,[3,[[25,[24]]]]],[[6,[[5,[4]]]]],[]],[-1,-2,[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,27,[]],[-1,-2,[],[]],[[-1,-2],[[86,[[107,[-1]],-2]]],108,89],0,0,0,0,0,0,0,0,0,0,0,0,[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[113,22],[114,22],[115,22],[116,22],[117,22],[118,22],[119,22],[120,22],[121,22],[122,22],[113,113],[114,114],[115,115],[116,116],[117,117],[118,118],[119,119],[120,120],[121,121],[122,122],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],0,[[],113],[[],114],[[],115],[[],116],[[],117],[[],118],[[],119],[[],120],[[],121],[[],122],0,[113,47],[114,47],[115,47],[116,47],[117,47],[118,47],[119,47],[120,47],[121,47],[122,47],0,0,0,0,0,0,0,[[113,113],48],[[114,114],48],[[115,115],48],[[116,116],48],[[117,117],48],[[118,118],48],[[119,119],48],[[120,120],48],[[121,121],48],[[122,122],48],0,[[113,49],[[26,[22,50]]]],[[114,49],[[26,[22,50]]]],[[115,49],[[26,[22,50]]]],[[116,49],[[26,[22,50]]]],[[117,49],[[26,[22,50]]]],[[118,49],[[26,[22,50]]]],[[119,49],[[26,[22,50]]]],[[120,49],[[26,[22,50]]]],[[121,49],[[26,[22,50]]]],[[122,49],[[26,[22,50]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[5,[-1]]],[[5,[10]]],[]],[[[5,[-1]]],[[5,[10]]],[]],[[[5,[-1]]],[[5,[10]]],[]],[[[5,[-1]]],[[5,[10]]],[]],[[[5,[-1]]],[[5,[10]]],[]],[[[5,[-1]]],[[5,[10]]],[]],[[[5,[-1]]],[[5,[10]]],[]],[[[5,[-1]]],[[5,[10]]],[]],[[[5,[-1]]],[[5,[10]]],[]],[[[5,[-1]]],[[5,[10]]],[]],[[[15,[-1]]],[[15,[10]]],[]],[[[15,[-1]]],[[15,[10]]],[]],[[[15,[-1]]],[[15,[10]]],[]],[[[15,[-1]]],[[15,[10]]],[]],[[[15,[-1]]],[[15,[10]]],[]],[[[15,[-1]]],[[15,[10]]],[]],[[[15,[-1]]],[[15,[10]]],[]],[[[15,[-1]]],[[15,[10]]],[]],[[[15,[-1]]],[[15,[10]]],[]],[[[15,[-1]]],[[15,[10]]],[]],[[[16,[-1]]],[[16,[10]]],[]],[[[16,[-1]]],[[16,[10]]],[]],[[[16,[-1]]],[[16,[10]]],[]],[[[16,[-1]]],[[16,[10]]],[]],[[[16,[-1]]],[[16,[10]]],[]],[[[16,[-1]]],[[16,[10]]],[]],[[[16,[-1]]],[[16,[10]]],[]],[[[16,[-1]]],[[16,[10]]],[]],[[[16,[-1]]],[[16,[10]]],[]],[[[16,[-1]]],[[16,[10]]],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,27,[]],[-1,27,[]],[-1,27,[]],[-1,27,[]],[-1,27,[]],[-1,27,[]],[-1,27,[]],[-1,27,[]],[-1,27,[]],[-1,27,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]]],"c":[564,912,913],"p":[[3,"OakFunctionsContainersService",0],[3,"Empty",1137],[3,"Request",1138],[8,"Future",1139],[3,"Box",1140],[3,"Pin",1141],[8,"AsyncRecipientContextGenerator",1142],[8,"Send",1143],[8,"Sync",1143],[8,"Any",1144],[3,"ExtendNextLookupDataRequest",1137],[3,"FinishNextLookupDataRequest",1137],[3,"InvokeRequest",1137],[3,"InitializeRequest",1137],[3,"Arc",1145],[3,"Rc",1146],[8,"Observer",1147],[4,"Option",1148],[3,"ReserveRequest",1137],[3,"TcpListener",1149],[3,"Meter",1150],[15,"tuple"],[6,"Result",1151],[3,"LookupDataChunk",1137],[3,"Streaming",1152],[4,"Result",1153],[3,"TypeId",1144],[4,"TeePlatform",32],[15,"str"],[3,"RootLayerEvidence",32],[3,"LayerEvidence",32],[3,"ApplicationKeys",32],[3,"Evidence",32],[3,"CertificateAuthority",32],[3,"DiceData",32],[3,"TransparentReleaseEndorsement",32],[3,"RootLayerEndorsements",32],[3,"KernelLayerEndorsements",32],[3,"SystemLayerEndorsements",32],[3,"ApplicationLayerEndorsements",32],[3,"ContainerLayerEndorsements",32],[3,"OakRestrictedKernelEndorsements",32],[3,"OakContainersEndorsements",32],[3,"CbEndorsements",32],[3,"Endorsements",32],[4,"Ordering",1154],[15,"usize"],[15,"bool"],[3,"Formatter",1155],[3,"Error",1155],[4,"TeePlatform",1156],[3,"DiceBuilder",1157],[15,"i32"],[3,"ClaimsSet",1158],[3,"Error",1151],[8,"Hasher",1159],[3,"RootLayerEvidence",1156],[3,"LayerEvidence",1156],[3,"ApplicationKeys",1156],[3,"Evidence",1156],[3,"Stage0DiceData",1156],[4,"Type",502],[8,"BufMut",1160],[15,"u32"],[4,"WireType",1161],[3,"DecodeContext",1161],[3,"DecodeError",1162],[8,"Buf",1163],[3,"GetImageResponse",529],[3,"GetApplicationConfigResponse",529],[3,"SendAttestationEvidenceRequest",529],[6,"Result",1155],[3,"LauncherClient",607],[4,"CompressionEncoding",1164],[6,"BoxBody",1165],[8,"GrpcService",1166],[8,"Clone",1167],[3,"Channel",1168],[3,"Error",1169],[3,"Endpoint",1170],[8,"TryInto",1171],[8,"Debug",1155],[3,"Response",1172],[3,"Status",1173],[8,"IntoRequest",1138],[3,"InterceptedService",1174],[3,"Request",1175],[8,"Service",1176],[8,"Interceptor",1174],[3,"Uri",1177],[3,"OrchestratorClient",640],[3,"EncryptedRequest",671],[3,"EncryptedResponse",671],[3,"AeadEncryptedMessage",671],[3,"SessionKeys",671],[3,"Signature",671],[15,"u8"],[15,"slice"],[3,"OakFunctionsClient",803],[3,"AbortNextLookupDataResponse",1137],[3,"ExtendNextLookupDataResponse",1137],[3,"FinishNextLookupDataResponse",1137],[3,"InvokeResponse",1137],[3,"InitializeResponse",1137],[3,"ReserveResponse",1137],[8,"IntoStreamingRequest",1138],[3,"OakFunctionsServer",838],[8,"OakFunctions",838],[8,"Body",1178],[3,"IntoMakeService",1179],[3,"Context",1180],[4,"Poll",1181],[3,"AttestationEvidence",879],[3,"AttestationBundle",879],[3,"AttestationEndorsement",879],[3,"ApplicationData",879],[3,"GetPublicKeyRequest",879],[3,"GetPublicKeyResponse",879],[3,"InvokeRequest",879],[3,"InvokeResponse",879],[3,"GetEncryptionKeyRequest",879],[3,"GetEncryptionKeyResponse",879]],"b":[]},\
"oak_functions_containers_launcher":{"doc":"","t":"DLLLLLLLLMMAALLLLLAAAAANDDDDDDDDNDDDDDDDEDNMMMLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMLLLLLLLLLLLLLLLLLLMMMLLLLLLLLLLLLLLLLMMMALLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMLLMMMMMMLMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNNELLLLLLLLLLLLLLLLLLADDDDDMLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMLMMLLLLLLLLLLLLLLLLLLLLLLLLLDDDDDDDDDDDDDDDMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMAMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLMDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLFLLLLL","n":["UntrustedApp","borrow","borrow_mut","create","from","initialize_enclave","into","into_request","kill","launcher","oak_functions_client","proto","server","setup_lookup_data","try_from","try_into","type_id","vzip","oak","attestation","crypto","functions","v1","AmdSevSnp","ApplicationKeys","ApplicationLayerEndorsements","CbEndorsements","CertificateAuthority","ContainerLayerEndorsements","DiceData","Endorsements","Evidence","IntelTdx","KernelLayerEndorsements","LayerEvidence","OakContainersEndorsements","OakRestrictedKernelEndorsements","RootLayerEndorsements","RootLayerEvidence","SystemLayerEndorsements","TeePlatform","TransparentReleaseEndorsement","Unspecified","acpi","application_keys","application_layer","as_str_name","binary","binary","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","certificate_authority","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","compare","configuration","configuration","container_layer","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","drop","eca_certificate","eca_private_key","eca_public_key","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encryption_public_key_certificate","endorsement","endorsement_signature","endorsements","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","evidence","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_i32","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_str_name","get_claims","hash","init_ram_fs","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","is_valid","kernel_cmd_line","kernel_image","kernel_layer","kernel_layer","kernel_setup_data","layers","memory_map","partial_cmp","platform","platform","rekor_log_entry","remote_attestation_report","root_layer","root_layer","root_layer","set_platform","signing_public_key_certificate","stage0","system_image","system_layer","tee_certificate","tee_certificate","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","Cb","OakContainers","OakRestrictedKernel","Type","borrow","borrow_mut","clone","clone_into","encode","encoded_len","eq","fmt","from","from_ref","into","into_request","merge","to_owned","try_from","try_into","type_id","vzip","v1","AeadEncryptedMessage","EncryptedRequest","EncryptedResponse","SessionKeys","Signature","associated_data","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","ciphertext","clear","clear","clear","clear","clear","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","default","default","default","default","default","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encrypted_message","encrypted_message","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from_ref","from_ref","from_ref","from_ref","from_ref","into","into","into","into","into","into_request","into_request","into_request","into_request","into_request","nonce","request_key","response_key","serialized_encapsulated_public_key","serialized_encapsulated_public_key","signature","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","AbortNextLookupDataResponse","Empty","ExtendNextLookupDataRequest","ExtendNextLookupDataResponse","FinishNextLookupDataRequest","FinishNextLookupDataResponse","InitializeRequest","InitializeResponse","InvokeRequest","InvokeResponse","LookupDataChunk","LookupDataEntry","PublicKeyInfo","ReserveRequest","ReserveResponse","additional_entries","attestation","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","chunk","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","constant_response_size","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encrypted_request","encrypted_response","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","evidence","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","items","key","oak_functions_client","public_key","public_key_info","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","value","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","wasm_module","OakFunctionsClient","abort_next_lookup_data","accept_compressed","borrow","borrow_mut","clone","clone_into","connect","extend_next_lookup_data","finish_next_lookup_data","fmt","from","from_ref","handle_user_request","initialize","into","into_request","max_decoding_message_size","max_encoding_message_size","new","reserve","send_compressed","stream_lookup_data","to_owned","try_from","try_into","type_id","vzip","with_interceptor","with_origin","SessionProxy","borrow","borrow_mut","from","into","into_request","new","stream","try_from","try_into","type_id","vzip"],"q":[[0,"oak_functions_containers_launcher"],[18,"oak_functions_containers_launcher::proto"],[19,"oak_functions_containers_launcher::proto::oak"],[22,"oak_functions_containers_launcher::proto::oak::attestation"],[23,"oak_functions_containers_launcher::proto::oak::attestation::v1"],[408,"oak_functions_containers_launcher::proto::oak::attestation::v1::endorsements"],[430,"oak_functions_containers_launcher::proto::oak::crypto"],[431,"oak_functions_containers_launcher::proto::oak::crypto::v1"],[536,"oak_functions_containers_launcher::proto::oak::functions"],[835,"oak_functions_containers_launcher::proto::oak::functions::oak_functions_client"],[865,"oak_functions_containers_launcher::server"],[877,"oak_containers_launcher"],[878,"anyhow"],[879,"core::error"],[880,"alloc::boxed"],[881,"core::result"],[882,"tonic::request"],[883,"oak_functions_launcher"],[884,"core::any"],[885,"core::cmp"],[886,"core::fmt"],[887,"core::fmt"],[888,"oak_attestation::dice"],[889,"core::option"],[890,"coset::cwt"],[891,"anyhow"],[892,"oak_dice::evidence"],[893,"prost::encoding"],[894,"prost::encoding"],[895,"bytes::buf::buf_impl"],[896,"core::fmt"],[897,"tonic::status"],[898,"tonic::body"],[899,"tonic::client::service"],[900,"tonic::request"],[901,"core::clone"],[902,"tonic::transport::channel"],[903,"tonic::transport::error"],[904,"tonic::transport::channel::endpoint"],[905,"core::convert"],[906,"core::fmt"],[907,"http::request"],[908,"tower_service"],[909,"tonic::service::interceptor"],[910,"core::net::socket_addr"],[911,"alloc::vec"],[912,"core::future::future"],[913,"oak_functions_launcher::proto::oak::session::v1"],[914,"tonic::codec::decode"],[915,"core::pin"]],"d":["","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","Keys used by the application to derive encryption session …","","","Message for passing embedded certificate authority …","","Message that is sent between DICE layers.","Endorsement contains statements that some entity (e.g. a …","Attestation Evidence used by the client to the identity of …","","","DICE layer evidence containing a certificate signed by the …","","","","Evidence generated by the Layer0.","","This proto defines the layered DICE Attestation Evidence.","Endorsement for binaries from the Transparent Release …","","","Application keys signed by the penultimate layer’s ECA …","","String value of the enum field names used in the ProtoBuf …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Certificate signing current layer’s measurements and the …","ECA private key that will be used by a layer to sign a …","Serialized ECA public key for Layer0 that is signed by the …","","","","","","","","","","","","","","","","","Certificate signing the encryption public key.","JSON string comtaining the endorsement statement for the …","The signature for the endorsement.","Nested message and enum types in <code>Endorsements</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Converts an <code>i32</code> to a <code>TeePlatform</code>, or <code>None</code> if <code>value</code> is not …","","","","","","","","","","","","","","","","","","Creates an enum from field names used in the ProtoBuf …","Extracts the <code>ClaimsSet</code> encoded in the ECA certificate of …","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","Returns <code>true</code> if <code>value</code> is a variant of <code>TeePlatform</code>.","","","","","","Layer1..LayerN-1 attestation evidence.","","","Returns the enum value of <code>platform</code>, or the default if the …","The platform providing the attestation report.","The log entry as proof of inclusion of the endorsement …","TEE-specific attestation report acting as a non-standard …","Layer0 attestation evidence.","","","Sets <code>platform</code> to the provided enum value.","Certificate signing the signing public key.","Endorsement of the Stage0 binary.","","","The serialized TEE certificate(s). The details of the …","Serialized X.509 TEE certificate.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Encodes the message to a buffer.","Returns the encoded length of the message without a length …","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","Decodes an instance of the message from a buffer, and …","","","","","","","Message encrypted with Authenticated Encryption with …","Request message encrypted using Hybrid Public Key …","Response message encrypted Hybrid Public Key Encryption …","Envelope containing session keys required to …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Message encrypted with Authenticated Encryption with …","Message encrypted with Authenticated Encryption with …","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","AEAD key for encrypting/decrypting client requests.","AEAD key for encrypting/decrypting enclave responses.","Returns the value of <code>serialized_encapsulated_public_key</code>, …","Ephemeral Diffie-Hellman client public key that is needed …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","If the definition of ExtendNextLookupData changes, the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","Generated client implementations.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Aborts building the next lookup data.option","Enable decompressing responses.","","","","","Attempt to create a new client by connecting to a given …","Extends the next lookup data by the given chunk of lookup …","Finishes building the next lookup data with the given …","","Returns the argument unchanged.","","Handles an invocation coming from a client.","Initializes the service and remote attestation keys.","Calls <code>U::from(self)</code>.","","Limits the maximum size of a decoded message.","Limits the maximum size of an encoded message.","","Reserves additional capacity for entries in the lookup …","Compress requests with the given encoding.","Streaming version combining <code>ExtendNextLookupData</code> and …","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","",""],"i":[0,2,2,2,2,2,2,2,2,2,2,0,0,2,2,2,2,2,0,0,0,0,0,13,0,0,0,0,0,0,0,0,13,0,0,0,0,0,0,0,0,0,13,23,18,27,13,25,26,15,16,17,18,13,19,20,21,22,23,24,25,26,27,28,29,30,15,16,17,18,13,19,20,21,22,23,24,25,26,27,28,29,30,20,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,15,16,17,18,13,19,20,21,22,23,24,25,26,27,28,29,30,15,16,17,18,13,19,20,21,22,23,24,25,26,27,28,29,30,13,13,25,26,28,15,16,17,18,13,19,20,21,22,23,24,25,26,27,28,29,30,20,16,19,15,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,17,21,21,0,15,16,17,18,13,19,20,21,22,23,24,25,26,27,28,29,30,13,13,13,13,20,15,16,17,18,13,19,20,21,22,23,24,25,26,27,28,29,30,15,16,17,18,13,13,19,20,20,21,22,23,24,25,26,27,28,29,30,13,15,16,17,18,13,19,20,21,22,23,24,25,26,27,28,29,30,13,16,13,23,15,16,17,18,13,19,20,21,22,23,24,25,26,27,28,29,30,15,16,17,18,13,19,20,21,22,23,24,25,26,27,28,29,30,13,23,23,27,28,23,18,23,13,15,15,21,15,18,27,28,15,17,22,24,28,22,29,15,16,17,18,13,19,20,21,22,23,24,25,26,27,28,29,30,15,15,16,16,17,17,18,18,13,19,20,20,21,22,23,24,25,26,27,28,29,30,15,16,17,18,13,19,20,21,22,23,24,25,26,27,28,29,30,30,15,16,17,18,13,19,20,21,22,23,24,25,26,27,28,29,30,15,16,17,18,13,19,20,21,22,23,24,25,26,27,28,29,30,48,48,48,0,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,0,0,0,0,0,0,57,55,56,57,58,59,55,56,57,58,59,57,55,56,57,58,59,55,56,57,58,59,55,56,57,58,59,55,56,57,58,59,55,56,57,58,59,55,56,55,56,57,58,59,55,56,57,58,59,55,56,57,58,59,55,56,57,58,59,55,56,57,58,59,55,56,57,58,59,57,58,58,55,55,59,55,56,57,58,59,55,56,57,58,59,55,56,57,58,59,55,56,57,58,59,55,56,57,58,59,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,73,62,4,5,62,63,64,65,66,67,68,69,70,71,72,73,74,4,5,62,63,64,65,66,67,68,69,70,71,72,73,74,67,4,5,62,63,64,65,66,67,68,69,70,71,72,73,74,4,5,62,63,64,65,66,67,68,69,70,71,72,73,74,4,5,62,63,64,65,66,67,68,69,70,71,72,73,74,4,4,5,62,63,64,65,66,67,68,69,70,71,72,73,74,4,5,62,63,64,65,66,67,68,69,70,71,72,73,74,63,64,4,5,62,63,64,65,66,67,68,69,70,71,72,73,74,5,4,5,62,63,64,65,66,67,68,69,70,71,72,73,74,4,5,62,63,64,65,66,67,68,69,70,71,72,73,74,4,5,62,63,64,65,66,67,68,69,70,71,72,73,74,4,5,62,63,64,65,66,67,68,69,70,71,72,73,74,4,5,62,63,64,65,66,67,68,69,70,71,72,73,74,66,65,0,62,5,4,5,62,63,64,65,66,67,68,69,70,71,72,73,74,4,5,62,63,64,65,66,67,68,69,70,71,72,73,74,4,5,62,63,64,65,66,67,68,69,70,71,72,73,74,4,5,62,63,64,65,66,67,68,69,70,71,72,73,74,65,4,5,62,63,64,65,66,67,68,69,70,71,72,73,74,4,0,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,0,98,98,98,98,98,0,98,98,98,98,98],"f":[0,[-1,-2,[],[]],[-1,-2,[],[]],[1,[[3,[2]]]],[-1,-1,[]],[[2,4],[[8,[5,[7,[6]]]]]],[-1,-2,[],[]],[-1,[[9,[-2]]],[],[]],[2,10],0,0,0,0,[[2,11],[[3,[10]]]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,12,[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[13,14],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[15,10],[16,10],[17,10],[18,10],[19,10],[20,10],[21,10],[22,10],[23,10],[24,10],[25,10],[26,10],[27,10],[28,10],[29,10],[30,10],[15,15],[16,16],[17,17],[18,18],[13,13],[19,19],[20,20],[21,21],[22,22],[23,23],[24,24],[25,25],[26,26],[27,27],[28,28],[29,29],[30,30],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[13,13],31],[[-1,-2],31,[],[]],0,0,0,[[],15],[[],16],[[],17],[[],18],[[],13],[[],19],[[],20],[[],21],[[],22],[[],23],[[],24],[[],25],[[],26],[[],27],[[],28],[[],29],[[],30],[20,10],0,0,0,[15,32],[16,32],[17,32],[18,32],[19,32],[20,32],[21,32],[22,32],[23,32],[24,32],[25,32],[26,32],[27,32],[28,32],[29,32],[30,32],0,0,0,0,[[15,15],33],[[16,16],33],[[17,17],33],[[18,18],33],[[13,13],33],[[19,19],33],[[20,20],33],[[21,21],33],[[22,22],33],[[23,23],33],[[24,24],33],[[25,25],33],[[26,26],33],[[27,27],33],[[28,28],33],[[29,29],33],[[30,30],33],[[-1,-2],33,[],[]],[[-1,-2],33,[],[]],[[-1,-2],33,[],[]],[[-1,-2],33,[],[]],0,[[15,34],[[8,[10,35]]]],[[16,34],[[8,[10,35]]]],[[17,34],[[8,[10,35]]]],[[18,34],[[8,[10,35]]]],[[13,34],[[8,[10,35]]]],[[19,34],[[8,[10,35]]]],[[20,34],[[8,[10,35]]]],[[21,34],[[8,[10,35]]]],[[22,34],[[8,[10,35]]]],[[23,34],[[8,[10,35]]]],[[24,34],[[8,[10,35]]]],[[25,34],[[8,[10,35]]]],[[26,34],[[8,[10,35]]]],[[27,34],[[8,[10,35]]]],[[28,34],[[8,[10,35]]]],[[29,34],[[8,[10,35]]]],[[30,34],[[8,[10,35]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[36,13],[-1,-1,[]],[-1,-1,[]],[37,20],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[38,[[39,[13]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[14,[[39,[13]]]],[16,[[8,[40,41]]]],[[13,-1],10,42],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[38,33],0,0,0,0,0,0,0,[[13,13],[[39,[31]]]],[15,13],0,0,0,0,0,0,[[15,13],10],0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[8,[-2]]],[],[]],[43,[[8,[15,41]]]],[-1,[[8,[-2]]],[],[]],[44,[[8,[16,41]]]],[45,[[8,[17,41]]]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[46,[[8,[18,41]]]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[47,[[8,[20,41]]]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],0,[-1,12,[]],[-1,12,[]],[-1,12,[]],[-1,12,[]],[-1,12,[]],[-1,12,[]],[-1,12,[]],[-1,12,[]],[-1,12,[]],[-1,12,[]],[-1,12,[]],[-1,12,[]],[-1,12,[]],[-1,12,[]],[-1,12,[]],[-1,12,[]],[-1,12,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[48,48],[[-1,-2],10,[],[]],[[48,-1],10,49],[48,32],[[48,48],33],[[48,34],[[8,[10,35]]]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,[[9,[-2]]],[],[]],[[[39,[48]],50,51,-1,52],[[8,[10,53]]],54],[-1,-2,[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,12,[]],[-1,-2,[],[]],0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[55,10],[56,10],[57,10],[58,10],[59,10],[55,55],[56,56],[57,57],[58,58],[59,59],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[],55],[[],56],[[],57],[[],58],[[],59],[55,32],[56,32],[57,32],[58,32],[59,32],0,0,[[55,55],33],[[56,56],33],[[57,57],33],[[58,58],33],[[59,59],33],[[55,34],[[8,[10,35]]]],[[56,34],[[8,[10,35]]]],[[57,34],[[8,[10,35]]]],[[58,34],[[8,[10,35]]]],[[59,34],[[8,[10,35]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],0,0,0,[55,[[61,[60]]]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,12,[]],[-1,12,[]],[-1,12,[]],[-1,12,[]],[-1,12,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[4,10],[5,10],[62,10],[63,10],[64,10],[65,10],[66,10],[67,10],[68,10],[69,10],[70,10],[71,10],[72,10],[73,10],[74,10],[4,4],[5,5],[62,62],[63,63],[64,64],[65,65],[66,66],[67,67],[68,68],[69,69],[70,70],[71,71],[72,72],[73,73],[74,74],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],0,[[],4],[[],5],[[],62],[[],63],[[],64],[[],65],[[],66],[[],67],[[],68],[[],69],[[],70],[[],71],[[],72],[[],73],[[],74],[4,32],[5,32],[62,32],[63,32],[64,32],[65,32],[66,32],[67,32],[68,32],[69,32],[70,32],[71,32],[72,32],[73,32],[74,32],0,0,[[4,4],33],[[5,5],33],[[62,62],33],[[63,63],33],[[64,64],33],[[65,65],33],[[66,66],33],[[67,67],33],[[68,68],33],[[69,69],33],[[70,70],33],[[71,71],33],[[72,72],33],[[73,73],33],[[74,74],33],0,[[4,34],75],[[5,34],75],[[62,34],75],[[63,34],75],[[64,34],75],[[65,34],75],[[66,34],75],[[67,34],75],[[68,34],75],[[69,34],75],[[70,34],75],[[71,34],75],[[72,34],75],[[73,34],75],[[74,34],75],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,12,[]],[-1,12,[]],[-1,12,[]],[-1,12,[]],[-1,12,[]],[-1,12,[]],[-1,12,[]],[-1,12,[]],[-1,12,[]],[-1,12,[]],[-1,12,[]],[-1,12,[]],[-1,12,[]],[-1,12,[]],[-1,12,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[[[76,[-1]],-2],[[8,[[77,[71]],78]]],[[80,[79]]],[[81,[72]]]],[[[76,[-1]],82],[[76,[-1]]],[[80,[79]]]],[-1,-2,[],[]],[-1,-2,[],[]],[[[76,[-1]]],[[76,[-1]]],83],[[-1,-2],10,[],[]],[-1,[[8,[[76,[84]],85]]],[[87,[86]]]],[[[76,[-1]],-2],[[8,[[77,[68]],78]]],[[80,[79]]],[[81,[67]]]],[[[76,[-1]],-2],[[8,[[77,[70]],78]]],[[80,[79]]],[[81,[69]]]],[[[76,[-1]],34],75,88],[-1,-1,[]],[-1,-1,[]],[[[76,[-1]],-2],[[8,[[77,[64]],78]]],[[80,[79]]],[[81,[63]]]],[[[76,[-1]],-2],[[8,[[77,[5]],78]]],[[80,[79]]],[[81,[4]]]],[-1,-2,[],[]],[-1,[[9,[-2]]],[],[]],[[[76,[-1]],32],[[76,[-1]]],[[80,[79]]]],[[[76,[-1]],32],[[76,[-1]]],[[80,[79]]]],[-1,[[76,[-1]]],[[80,[79]]]],[[[76,[-1]],-2],[[8,[[77,[74]],78]]],[[80,[79]]],[[81,[73]]]],[[[76,[-1]],82],[[76,[-1]]],[[80,[79]]]],[[[76,[-1]],-2],[[8,[[77,[70]],78]]],[[80,[79]]],89],[-1,-2,[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,12,[]],[-1,-2,[],[]],[[-1,-2],[[76,[[90,[-1,-2]]]]],[[92,[[91,[79]]]],[80,[79]]],93],[[-1,94],[[76,[-1]]],[[80,[79]]]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-1,[]],[-1,-2,[],[]],[-1,[[9,[-2]]],[],[]],[[95,[76,[84]],18,30,[96,[60]],[96,[60]]],[[0,[97]]]],[[98,[9,[[100,[99]]]]],[[101,[[7,[97]]]]]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,12,[]],[-1,-2,[],[]]],"c":[757],"p":[[3,"Args",877],[3,"UntrustedApp",0],[6,"Result",878],[3,"InitializeRequest",536],[3,"InitializeResponse",536],[8,"Error",879],[3,"Box",880],[4,"Result",881],[3,"Request",882],[15,"tuple"],[3,"LookupDataConfig",883],[3,"TypeId",884],[4,"TeePlatform",23],[15,"str"],[3,"RootLayerEvidence",23],[3,"LayerEvidence",23],[3,"ApplicationKeys",23],[3,"Evidence",23],[3,"CertificateAuthority",23],[3,"DiceData",23],[3,"TransparentReleaseEndorsement",23],[3,"RootLayerEndorsements",23],[3,"KernelLayerEndorsements",23],[3,"SystemLayerEndorsements",23],[3,"ApplicationLayerEndorsements",23],[3,"ContainerLayerEndorsements",23],[3,"OakRestrictedKernelEndorsements",23],[3,"OakContainersEndorsements",23],[3,"CbEndorsements",23],[3,"Endorsements",23],[4,"Ordering",885],[15,"usize"],[15,"bool"],[3,"Formatter",886],[3,"Error",886],[4,"TeePlatform",887],[3,"DiceBuilder",888],[15,"i32"],[4,"Option",889],[3,"ClaimsSet",890],[3,"Error",878],[8,"Hasher",891],[3,"RootLayerEvidence",887],[3,"LayerEvidence",887],[3,"ApplicationKeys",887],[3,"Evidence",887],[3,"Stage0DiceData",887],[4,"Type",408],[8,"BufMut",892],[15,"u32"],[4,"WireType",893],[3,"DecodeContext",893],[3,"DecodeError",894],[8,"Buf",895],[3,"EncryptedRequest",431],[3,"EncryptedResponse",431],[3,"AeadEncryptedMessage",431],[3,"SessionKeys",431],[3,"Signature",431],[15,"u8"],[15,"slice"],[3,"PublicKeyInfo",536],[3,"InvokeRequest",536],[3,"InvokeResponse",536],[3,"LookupDataEntry",536],[3,"LookupDataChunk",536],[3,"ExtendNextLookupDataRequest",536],[3,"ExtendNextLookupDataResponse",536],[3,"FinishNextLookupDataRequest",536],[3,"FinishNextLookupDataResponse",536],[3,"AbortNextLookupDataResponse",536],[3,"Empty",536],[3,"ReserveRequest",536],[3,"ReserveResponse",536],[6,"Result",886],[3,"OakFunctionsClient",835],[3,"Response",896],[3,"Status",897],[6,"BoxBody",898],[8,"GrpcService",899],[8,"IntoRequest",882],[4,"CompressionEncoding",900],[8,"Clone",901],[3,"Channel",902],[3,"Error",903],[3,"Endpoint",904],[8,"TryInto",905],[8,"Debug",886],[8,"IntoStreamingRequest",882],[3,"InterceptedService",906],[3,"Request",907],[8,"Service",908],[8,"Interceptor",906],[3,"Uri",909],[4,"SocketAddr",910],[3,"Vec",911],[8,"Future",912],[3,"SessionProxy",865],[3,"RequestWrapper",913],[3,"Streaming",914],[3,"Pin",915]],"b":[]},\
"oak_functions_launcher":{"doc":"","t":"DDLLLLLLLLMFLLLLLLLLLLMMMMAALLLLLLLLMFLLMAAAAAANDDDDDDDDNDDDDDDDEDNMMMLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMLLLLLLLLLLLLLLLLLLMMMLLLLLLLLLLLLLLLLMMMALLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMLLMMMMMMLMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNNELLLLLLLLLLLLLLLLLLADDDDDMLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMLMMLLLLLLLLLLLLLLLLLLLLLLLLLDDDDDDDDDDDDIDDDDDDKLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLMKLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLMMKLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLMADDDDDDDDDDDDMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLMLLLLLLLLLLLLMMMMMMMLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMAMAMMAMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNELLLLLLLLLLLLLLLLLLNNELLLLLLLLLLLLLLLLLLQIDLLLLLLLLLLLLLLLLLLLLKLLLLLLDLLLLLFLLLLL","n":["Args","LookupDataConfig","augment_args","augment_args_for_update","borrow","borrow","borrow_mut","borrow_mut","command","command_for_update","constant_response_size","create","fmt","from","from","from_arg_matches","from_arg_matches_mut","group_id","into","into","into_request","into_request","lookup_data","lookup_data_path","max_chunk_size","port","proto","server","try_from","try_from","try_into","try_into","type_id","type_id","update_from_arg_matches","update_from_arg_matches_mut","update_interval","update_lookup_data","vzip","vzip","wasm","oak","attestation","crypto","functions","session","v1","AmdSevSnp","ApplicationKeys","ApplicationLayerEndorsements","CbEndorsements","CertificateAuthority","ContainerLayerEndorsements","DiceData","Endorsements","Evidence","IntelTdx","KernelLayerEndorsements","LayerEvidence","OakContainersEndorsements","OakRestrictedKernelEndorsements","RootLayerEndorsements","RootLayerEvidence","SystemLayerEndorsements","TeePlatform","TransparentReleaseEndorsement","Unspecified","acpi","application_keys","application_layer","as_str_name","binary","binary","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","certificate_authority","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","compare","configuration","configuration","container_layer","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","drop","eca_certificate","eca_private_key","eca_public_key","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encryption_public_key_certificate","endorsement","endorsement_signature","endorsements","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","evidence","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_i32","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_str_name","get_claims","hash","init_ram_fs","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","is_valid","kernel_cmd_line","kernel_image","kernel_layer","kernel_layer","kernel_setup_data","layers","memory_map","partial_cmp","platform","platform","rekor_log_entry","remote_attestation_report","root_layer","root_layer","root_layer","set_platform","signing_public_key_certificate","stage0","system_image","system_layer","tee_certificate","tee_certificate","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","Cb","OakContainers","OakRestrictedKernel","Type","borrow","borrow_mut","clone","clone_into","encode","encoded_len","eq","fmt","from","from_ref","into","into_request","merge","to_owned","try_from","try_into","type_id","vzip","v1","AeadEncryptedMessage","EncryptedRequest","EncryptedResponse","SessionKeys","Signature","associated_data","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","ciphertext","clear","clear","clear","clear","clear","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","default","default","default","default","default","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encrypted_message","encrypted_message","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from_ref","from_ref","from_ref","from_ref","from_ref","into","into","into","into","into","into_request","into_request","into_request","into_request","into_request","nonce","request_key","response_key","serialized_encapsulated_public_key","serialized_encapsulated_public_key","signature","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","AbortNextLookupDataResponse","Empty","ExtendNextLookupDataRequest","ExtendNextLookupDataResponse","FinishNextLookupDataRequest","FinishNextLookupDataResponse","InitializeRequest","InitializeResponse","InvokeRequest","InvokeResponse","LookupDataChunk","LookupDataEntry","OakFunctions","OakFunctionsAsyncClient","OakFunctionsClient","OakFunctionsServer","PublicKeyInfo","ReserveRequest","ReserveResponse","abort_next_lookup_data","abort_next_lookup_data","abort_next_lookup_data","additional_entries","attestation","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","chunk","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","constant_response_size","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encrypted_request","encrypted_response","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","evidence","extend_next_lookup_data","extend_next_lookup_data","extend_next_lookup_data","finish_next_lookup_data","finish_next_lookup_data","finish_next_lookup_data","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","handle_user_request","handle_user_request","handle_user_request","initialize","initialize","initialize","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","invoke","items","key","new","new","new","public_key","public_key_info","reserve","reserve","reserve","stream_lookup_data","stream_lookup_data","stream_lookup_data","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","value","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","wasm_module","v1","ApplicationData","AttestationBundle","AttestationEndorsement","AttestationEvidence","GetEncryptionKeyRequest","GetEncryptionKeyResponse","GetPublicKeyRequest","GetPublicKeyResponse","InvokeRequest","InvokeResponse","RequestWrapper","ResponseWrapper","application_data","attestation","attestation_bundle","attestation_endorsement","attestation_evidence","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","config","default","default","default","default","default","default","default","default","default","default","default","default","digest","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encrypted_attestation_bundle","encrypted_encryption_key","encrypted_request","encrypted_response","encryption_public_key","endorsed_evidence","endorsements","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","evidence","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","into","into","into","into","into","into","into","into","into","into","into","into","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","request","request_wrapper","response","response_wrapper","signed_application_data","signing_public_key","streaming_session_server","tee_certificates","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","GetPublicKeyRequest","InvokeRequest","Request","borrow","borrow_mut","clone","clone_into","encode","encoded_len","eq","fmt","from","from_ref","into","into_request","merge","to_owned","try_from","try_into","type_id","vzip","GetPublicKeyResponse","InvokeResponse","Response","borrow","borrow_mut","clone","clone_into","encode","encoded_len","eq","fmt","from","from_ref","into","into_request","merge","to_owned","try_from","try_into","type_id","vzip","StreamStream","StreamingSession","StreamingSessionServer","accept_compressed","borrow","borrow_mut","call","call","clone","clone_into","fmt","from","from_arc","from_ref","into","into_make_service","into_request","max_decoding_message_size","max_encoding_message_size","new","poll_ready","poll_ready","send_compressed","stream","to_owned","try_from","try_into","type_id","vzip","with_interceptor","SessionProxy","borrow","borrow_mut","from","into","into_request","new","stream","try_from","try_into","type_id","vzip"],"q":[[0,"oak_functions_launcher"],[41,"oak_functions_launcher::proto"],[42,"oak_functions_launcher::proto::oak"],[46,"oak_functions_launcher::proto::oak::attestation"],[47,"oak_functions_launcher::proto::oak::attestation::v1"],[432,"oak_functions_launcher::proto::oak::attestation::v1::endorsements"],[454,"oak_functions_launcher::proto::oak::crypto"],[455,"oak_functions_launcher::proto::oak::crypto::v1"],[560,"oak_functions_launcher::proto::oak::functions"],[918,"oak_functions_launcher::proto::oak::session"],[919,"oak_functions_launcher::proto::oak::session::v1"],[1170,"oak_functions_launcher::proto::oak::session::v1::request_wrapper"],[1191,"oak_functions_launcher::proto::oak::session::v1::response_wrapper"],[1212,"oak_functions_launcher::proto::oak::session::v1::streaming_session_server"],[1242,"oak_functions_launcher::server"],[1254,"clap_builder::builder::command"],[1255,"oak_launcher_utils::launcher"],[1256,"std::path"],[1257,"oak_launcher_utils::launcher"],[1258,"oak_launcher_utils::channel"],[1259,"core::error"],[1260,"core::result"],[1261,"core::fmt"],[1262,"core::fmt"],[1263,"clap_builder"],[1264,"clap_builder::util::id"],[1265,"core::option"],[1266,"tonic::request"],[1267,"core::any"],[1268,"anyhow"],[1269,"core::cmp"],[1270,"core::fmt"],[1271,"oak_attestation::dice"],[1272,"coset::cwt"],[1273,"anyhow"],[1274,"oak_dice::evidence"],[1275,"prost::encoding"],[1276,"prost::encoding"],[1277,"bytes::buf::buf_impl"],[1278,"micro_rpc::status"],[1279,"micro_rpc"],[1280,"micro_rpc"],[1281,"alloc::vec"],[1282,"tonic::codec::compression"],[1283,"http::request"],[1284,"http_body"],[1285,"core::marker"],[1286,"core::fmt"],[1287,"axum::routing::into_make_service"],[1288,"core::task::wake"],[1289,"core::task::poll"],[1290,"tonic::codec::decode"],[1291,"core::future::future"],[1292,"core::pin"],[1293,"tonic::service::interceptor"],[1294,"tonic::service::interceptor"]],"d":["","","","","","","","","","","Consistent response size that the enclave should apply","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Path to a file containing key / value entries in protobuf …","","","","","","","","","","","","","","","","","","Path to a Wasm file to be loaded into the enclave and …","","","","","","","","Keys used by the application to derive encryption session …","","","Message for passing embedded certificate authority …","","Message that is sent between DICE layers.","Endorsement contains statements that some entity (e.g. a …","Attestation Evidence used by the client to the identity of …","","","DICE layer evidence containing a certificate signed by the …","","","","Evidence generated by the Layer0.","","This proto defines the layered DICE Attestation Evidence.","Endorsement for binaries from the Transparent Release …","","","Application keys signed by the penultimate layer’s ECA …","","String value of the enum field names used in the ProtoBuf …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Certificate signing current layer’s measurements and the …","ECA private key that will be used by a layer to sign a …","Serialized ECA public key for Layer0 that is signed by the …","","","","","","","","","","","","","","","","","Certificate signing the encryption public key.","JSON string comtaining the endorsement statement for the …","The signature for the endorsement.","Nested message and enum types in <code>Endorsements</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Converts an <code>i32</code> to a <code>TeePlatform</code>, or <code>None</code> if <code>value</code> is not …","","","","","","","","","","","","","","","","","","Creates an enum from field names used in the ProtoBuf …","Extracts the <code>ClaimsSet</code> encoded in the ECA certificate of …","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","Returns <code>true</code> if <code>value</code> is a variant of <code>TeePlatform</code>.","","","","","","Layer1..LayerN-1 attestation evidence.","","","Returns the enum value of <code>platform</code>, or the default if the …","The platform providing the attestation report.","The log entry as proof of inclusion of the endorsement …","TEE-specific attestation report acting as a non-standard …","Layer0 attestation evidence.","","","Sets <code>platform</code> to the provided enum value.","Certificate signing the signing public key.","Endorsement of the Stage0 binary.","","","The serialized TEE certificate(s). The details of the …","Serialized X.509 TEE certificate.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Encodes the message to a buffer.","Returns the encoded length of the message without a length …","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","Decodes an instance of the message from a buffer, and …","","","","","","","Message encrypted with Authenticated Encryption with …","Request message encrypted using Hybrid Public Key …","Response message encrypted Hybrid Public Key Encryption …","Envelope containing session keys required to …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Message encrypted with Authenticated Encryption with …","Message encrypted with Authenticated Encryption with …","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","AEAD key for encrypting/decrypting client requests.","AEAD key for encrypting/decrypting enclave responses.","Returns the value of <code>serialized_encapsulated_public_key</code>, …","Ephemeral Diffie-Hellman client public key that is needed …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","If the definition of ExtendNextLookupData changes, the …eturns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","AttestationBundle contains the information that the …","AttestationEndorsement contains statements that some …","AttestationEvidence contains all the information that …","","","","","","","","","The optional application-specific data.","The serialized attestation report binding the public key.","The enclave’s signing and encryption public keys and …","Supporting evidence required for verifying the integrity …","Attestation evidence from the enclave.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The serialized application configuration. The format of …","","","","","","","","","","","","","The cryptographic digest of the application, of the form …","","","","","","","","","","","","","Encrypted attestation evidence of the dependent enclave.","Encrypted private key of the leader enclave.","Body of the request, encrypted using Hybrid Public Key …","Body of the request, encrypted using Hybrid Public Key …","The serialized public key part of the enclave encryption …","Attestation evidence and public key.","Thea attestation endorsements.","","","","","","","","","","","","","The DICE attestation evidence.","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","Nested message and enum types in <code>RequestWrapper</code>.","","Nested message and enum types in <code>ResponseWrapper</code>.","The signature over the application_data, signed by the …","The serialized public key part of the enclave signing key. …","Generated server implementations.","The serialized TEE certificate(s). The details of the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Encodes the message to a buffer.","Returns the encoded length of the message without a length …","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","Decodes an instance of the message from a buffer, and …","","","","","","","","","","","","","Encodes the message to a buffer.","Returns the encoded length of the message without a length …","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","Decodes an instance of the message from a buffer, and …","","","","","","Server streaming response type for the Stream method.","Generated trait containing gRPC methods that should be …","Service definition for streaming communication with an Oak …","Enable decompressing requests with the given encoding.","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","Limits the maximum size of a decoded message.","Limits the maximum size of an encoded message.","","","","Compress responses with the given encoding, if the client …","Used to send a sequence of messages ensuring that they are …","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","",""],"i":[0,0,13,13,3,13,3,13,13,13,13,0,13,3,13,13,13,13,3,13,3,13,13,3,3,13,0,0,3,13,3,13,3,13,13,13,3,0,3,13,13,0,0,0,0,0,0,24,0,0,0,0,0,0,0,0,24,0,0,0,0,0,0,0,0,0,24,34,29,38,24,36,37,26,27,28,29,24,30,31,32,33,34,35,36,37,38,39,40,41,26,27,28,29,24,30,31,32,33,34,35,36,37,38,39,40,41,31,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,26,27,28,29,24,30,31,32,33,34,35,36,37,38,39,40,41,26,27,28,29,24,30,31,32,33,34,35,36,37,38,39,40,41,24,24,36,37,39,26,27,28,29,24,30,31,32,33,34,35,36,37,38,39,40,41,31,27,30,26,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,28,32,32,0,26,27,28,29,24,30,31,32,33,34,35,36,37,38,39,40,41,24,24,24,24,31,26,27,28,29,24,30,31,32,33,34,35,36,37,38,39,40,41,26,27,28,29,24,24,30,31,31,32,33,34,35,36,37,38,39,40,41,24,26,27,28,29,24,30,31,32,33,34,35,36,37,38,39,40,41,24,27,24,34,26,27,28,29,24,30,31,32,33,34,35,36,37,38,39,40,41,26,27,28,29,24,30,31,32,33,34,35,36,37,38,39,40,41,24,34,34,38,39,34,29,34,24,26,26,32,26,29,38,39,26,28,33,35,39,33,40,26,27,28,29,24,30,31,32,33,34,35,36,37,38,39,40,41,26,26,27,27,28,28,29,29,24,30,31,31,32,33,34,35,36,37,38,39,40,41,26,27,28,29,24,30,31,32,33,34,35,36,37,38,39,40,41,41,26,27,28,29,24,30,31,32,33,34,35,36,37,38,39,40,41,26,27,28,29,24,30,31,32,33,34,35,36,37,38,39,40,41,57,57,57,0,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,0,0,0,0,0,0,65,63,64,65,66,67,63,64,65,66,67,65,63,64,65,66,67,63,64,65,66,67,63,64,65,66,67,63,64,65,66,67,63,64,65,66,67,63,64,63,64,65,66,67,63,64,65,66,67,63,64,65,66,67,63,64,65,66,67,63,64,65,66,67,63,64,65,66,67,65,66,66,63,63,67,63,64,65,66,67,63,64,65,66,67,63,64,65,66,67,63,64,65,66,67,63,64,65,66,67,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,92,73,22,86,77,73,22,76,9,77,78,79,80,81,82,83,84,85,71,70,86,87,88,73,22,76,9,77,78,79,80,81,82,83,84,85,71,70,86,87,88,82,76,9,77,78,79,80,81,82,83,84,85,71,70,86,87,76,9,77,78,79,80,81,82,83,84,85,71,70,86,87,88,76,9,77,78,79,80,81,82,83,84,85,71,70,86,87,88,76,76,9,77,78,79,80,81,82,83,84,85,71,70,86,87,76,9,77,78,79,80,81,82,83,84,85,71,70,86,87,78,79,76,9,77,78,79,80,81,82,83,84,85,71,70,86,87,9,92,73,22,92,73,22,76,9,77,78,79,80,81,82,83,84,85,71,70,86,87,73,22,76,9,77,78,79,80,81,82,83,84,85,71,70,86,87,88,76,9,77,78,79,80,81,82,83,84,85,71,70,86,87,88,92,73,22,92,73,22,73,22,76,9,77,78,79,80,81,82,83,84,85,71,70,86,87,88,73,22,76,9,77,78,79,80,81,82,83,84,85,71,70,86,87,88,88,81,80,73,22,88,77,9,92,73,22,92,73,22,76,9,77,78,79,80,81,82,83,84,85,71,70,86,87,88,73,22,76,9,77,78,79,80,81,82,83,84,85,71,70,86,87,88,73,22,76,9,77,78,79,80,81,82,83,84,85,71,70,86,87,88,73,22,76,9,77,78,79,80,81,82,83,84,85,71,70,86,87,88,80,73,22,76,9,77,78,79,80,81,82,83,84,85,71,70,86,87,88,76,0,0,0,0,0,0,0,0,0,0,0,0,0,95,93,98,94,94,93,94,95,96,97,98,99,100,101,102,103,104,93,94,95,96,97,98,99,100,101,102,103,104,93,94,95,96,97,98,99,100,101,102,103,104,93,94,95,96,97,98,99,100,101,102,103,104,93,94,95,96,97,98,99,100,101,102,103,104,96,93,94,95,96,97,98,99,100,101,102,103,104,96,93,94,95,96,97,98,99,100,101,102,103,104,101,102,99,100,93,102,94,93,94,95,96,97,98,99,100,101,102,103,104,94,93,94,95,96,97,98,99,100,101,102,103,104,93,94,95,96,97,98,99,100,101,102,103,104,93,94,95,96,97,98,99,100,101,102,103,104,93,94,95,96,97,98,99,100,101,102,103,104,93,94,95,96,97,98,99,100,101,102,103,104,103,0,104,0,93,93,0,95,93,94,95,96,97,98,99,100,101,102,103,104,93,94,95,96,97,98,99,100,101,102,103,104,93,94,95,96,97,98,99,100,101,102,103,104,93,94,95,96,97,98,99,100,101,102,103,104,93,94,95,96,97,98,99,100,101,102,103,104,105,105,0,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,106,106,0,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,109,0,0,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,109,107,107,107,107,107,107,0,124,124,124,124,124,0,124,124,124,124,124],"f":[0,0,[1,1],[1,1],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],1],[[],1],0,[[2,3,4,5],[[12,[[10,[[7,[6]],8,9]],[7,[11]]]]]],[[13,14],15],[-1,-1,[]],[-1,-1,[]],[16,[[12,[13,17]]]],[16,[[12,[13,17]]]],[[],[[19,[18]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],0,0,0,0,0,0,[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,21,[]],[-1,21,[]],[[13,16],[[12,[10,17]]]],[[13,16],[[12,[10,17]]]],0,[[[22,[8]],3],[[23,[10]]]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[24,25],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[26,10],[27,10],[28,10],[29,10],[30,10],[31,10],[32,10],[33,10],[34,10],[35,10],[36,10],[37,10],[38,10],[39,10],[40,10],[41,10],[26,26],[27,27],[28,28],[29,29],[24,24],[30,30],[31,31],[32,32],[33,33],[34,34],[35,35],[36,36],[37,37],[38,38],[39,39],[40,40],[41,41],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[24,24],42],[[-1,-2],42,[],[]],0,0,0,[[],26],[[],27],[[],28],[[],29],[[],24],[[],30],[[],31],[[],32],[[],33],[[],34],[[],35],[[],36],[[],37],[[],38],[[],39],[[],40],[[],41],[31,10],0,0,0,[26,43],[27,43],[28,43],[29,43],[30,43],[31,43],[32,43],[33,43],[34,43],[35,43],[36,43],[37,43],[38,43],[39,43],[40,43],[41,43],0,0,0,0,[[26,26],44],[[27,27],44],[[28,28],44],[[29,29],44],[[24,24],44],[[30,30],44],[[31,31],44],[[32,32],44],[[33,33],44],[[34,34],44],[[35,35],44],[[36,36],44],[[37,37],44],[[38,38],44],[[39,39],44],[[40,40],44],[[41,41],44],[[-1,-2],44,[],[]],[[-1,-2],44,[],[]],[[-1,-2],44,[],[]],[[-1,-2],44,[],[]],0,[[26,14],[[12,[10,45]]]],[[27,14],[[12,[10,45]]]],[[28,14],[[12,[10,45]]]],[[29,14],[[12,[10,45]]]],[[24,14],[[12,[10,45]]]],[[30,14],[[12,[10,45]]]],[[31,14],[[12,[10,45]]]],[[32,14],[[12,[10,45]]]],[[33,14],[[12,[10,45]]]],[[34,14],[[12,[10,45]]]],[[35,14],[[12,[10,45]]]],[[36,14],[[12,[10,45]]]],[[37,14],[[12,[10,45]]]],[[38,14],[[12,[10,45]]]],[[39,14],[[12,[10,45]]]],[[40,14],[[12,[10,45]]]],[[41,14],[[12,[10,45]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[46,24],[-1,-1,[]],[-1,-1,[]],[47,31],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[48,[[19,[24]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[25,[[19,[24]]]],[27,[[12,[49,50]]]],[[24,-1],10,51],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[48,44],0,0,0,0,0,0,0,[[24,24],[[19,[42]]]],[26,24],0,0,0,0,0,0,[[26,24],10],0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[52,[[12,[26,50]]]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[53,[[12,[27,50]]]],[-1,[[12,[-2]]],[],[]],[54,[[12,[28,50]]]],[-1,[[12,[-2]]],[],[]],[55,[[12,[29,50]]]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[56,[[12,[31,50]]]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],0,[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[57,57],[[-1,-2],10,[],[]],[[57,-1],10,58],[57,43],[[57,57],44],[[57,14],[[12,[10,45]]]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,[[20,[-2]]],[],[]],[[[19,[57]],5,59,-1,60],[[12,[10,61]]],62],[-1,-2,[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,21,[]],[-1,-2,[],[]],0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[63,10],[64,10],[65,10],[66,10],[67,10],[63,63],[64,64],[65,65],[66,66],[67,67],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[],63],[[],64],[[],65],[[],66],[[],67],[63,43],[64,43],[65,43],[66,43],[67,43],0,0,[[63,63],44],[[64,64],44],[[65,65],44],[[66,66],44],[[67,67],44],[[63,14],[[12,[10,45]]]],[[64,14],[[12,[10,45]]]],[[65,14],[[12,[10,45]]]],[[66,14],[[12,[10,45]]]],[[67,14],[[12,[10,45]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],0,0,0,[63,[[69,[68]]]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[-1,70],[[12,[71,72]]],[]],[[[73,[-1]],70],[[12,[[12,[71,72]]]]],74],[[[22,[-1]],70],[[12,[[12,[71,72]]]]],75],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[76,10],[9,10],[77,10],[78,10],[79,10],[80,10],[81,10],[82,10],[83,10],[84,10],[85,10],[71,10],[70,10],[86,10],[87,10],[76,76],[9,9],[77,77],[78,78],[79,79],[80,80],[81,81],[82,82],[83,83],[84,84],[85,85],[71,71],[70,70],[86,86],[87,87],[[[88,[-1]]],[[88,[-1]]],89],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],0,[[],76],[[],9],[[],77],[[],78],[[],79],[[],80],[[],81],[[],82],[[],83],[[],84],[[],85],[[],71],[[],70],[[],86],[[],87],[76,43],[9,43],[77,43],[78,43],[79,43],[80,43],[81,43],[82,43],[83,43],[84,43],[85,43],[71,43],[70,43],[86,43],[87,43],0,0,[[76,76],44],[[9,9],44],[[77,77],44],[[78,78],44],[[79,79],44],[[80,80],44],[[81,81],44],[[82,82],44],[[83,83],44],[[84,84],44],[[85,85],44],[[71,71],44],[[70,70],44],[[86,86],44],[[87,87],44],0,[[-1,82],[[12,[83,72]]],[]],[[[73,[-1]],82],[[12,[[12,[83,72]]]]],74],[[[22,[-1]],82],[[12,[[12,[83,72]]]]],75],[[-1,84],[[12,[85,72]]],[]],[[[73,[-1]],84],[[12,[[12,[85,72]]]]],74],[[[22,[-1]],84],[[12,[[12,[85,72]]]]],75],[[76,14],15],[[9,14],15],[[77,14],15],[[78,14],15],[[79,14],15],[[80,14],15],[[81,14],15],[[82,14],15],[[83,14],15],[[84,14],15],[[85,14],15],[[71,14],15],[[70,14],15],[[86,14],15],[[87,14],15],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[-1,78],[[12,[79,72]]],[]],[[[73,[-1]],78],[[12,[[12,[79,72]]]]],74],[[[22,[-1]],78],[[12,[[12,[79,72]]]]],75],[[-1,76],[[12,[9,72]]],[]],[[[73,[-1]],76],[[12,[[12,[9,72]]]]],74],[[[22,[-1]],76],[[12,[[12,[9,72]]]]],75],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[[[88,[-1]],[69,[68]]],[[12,[[90,[68]],91]]],92],0,0,[-1,[[73,[-1]]],74],[-1,[[22,[-1]]],75],[-1,[[88,[-1]]],92],0,0,[[-1,86],[[12,[87,72]]],[]],[[[73,[-1]],86],[[12,[[12,[87,72]]]]],74],[[[22,[-1]],86],[[12,[[12,[87,72]]]]],75],[[-1,81],[[12,[85,72]]],[]],[[[73,[-1]],81],[[12,[[12,[85,72]]]]],74],[[[22,[-1]],81],[[12,[[12,[85,72]]]]],75],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[93,10],[94,10],[95,10],[96,10],[97,10],[98,10],[99,10],[100,10],[101,10],[102,10],[103,10],[104,10],[93,93],[94,94],[95,95],[96,96],[97,97],[98,98],[99,99],[100,100],[101,101],[102,102],[103,103],[104,104],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],0,[[],93],[[],94],[[],95],[[],96],[[],97],[[],98],[[],99],[[],100],[[],101],[[],102],[[],103],[[],104],0,[93,43],[94,43],[95,43],[96,43],[97,43],[98,43],[99,43],[100,43],[101,43],[102,43],[103,43],[104,43],0,0,0,0,0,0,0,[[93,93],44],[[94,94],44],[[95,95],44],[[96,96],44],[[97,97],44],[[98,98],44],[[99,99],44],[[100,100],44],[[101,101],44],[[102,102],44],[[103,103],44],[[104,104],44],0,[[93,14],15],[[94,14],15],[[95,14],15],[[96,14],15],[[97,14],15],[[98,14],15],[[99,14],15],[[100,14],15],[[101,14],15],[[102,14],15],[[103,14],15],[[104,14],15],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[105,105],[[-1,-2],10,[],[]],[[105,-1],10,58],[105,43],[[105,105],44],[[105,14],15],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,[[20,[-2]]],[],[]],[[[19,[105]],5,59,-1,60],[[12,[10,61]]],62],[-1,-2,[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,21,[]],[-1,-2,[],[]],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[106,106],[[-1,-2],10,[],[]],[[106,-1],10,58],[106,43],[[106,106],44],[[106,14],15],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,[[20,[-2]]],[],[]],[[[19,[106]],5,59,-1,60],[[12,[10,61]]],62],[-1,-2,[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,21,[]],[-1,-2,[],[]],0,0,0,[[[107,[-1]],108],[[107,[-1]]],109],[-1,-2,[],[]],[-1,-2,[],[]],[[[107,[-1]],[110,[-2]]],[],109,[111,112]],[[-1,[110,[-2]]],[],[],[]],[[[107,[-1]]],[[107,[-1]]],109],[[-1,-2],10,[],[]],[[[107,[-1]],14],15,[113,109]],[-1,-1,[]],[[[114,[-1]]],[[107,[-1]]],109],[-1,-1,[]],[-1,-2,[],[]],[-1,[[115,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[[[107,[-1]],43],[[107,[-1]]],109],[[[107,[-1]],43],[[107,[-1]]],109],[-1,[[107,[-1]]],109],[[[107,[-1]],116],[[117,[[12,[10]]]]],109],[[-1,116],[[117,[[12,[10]]]]],[]],[[[107,[-1]],108],[[107,[-1]]],109],[[-1,[20,[[118,[103]]]]],[[120,[[7,[119]]]]],[]],[-1,-2,[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,21,[]],[-1,-2,[],[]],[[-1,-2],[[121,[[107,[-1]],-2]]],109,122],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-1,[]],[-1,-2,[],[]],[-1,[[20,[-2]]],[],[]],[[123,8,29,41,[90,[68]],[90,[68]]],[[0,[119]]]],[[124,[20,[[118,[103]]]]],[[120,[[7,[119]]]]]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,21,[]],[-1,-2,[],[]]],"c":[821,934,935],"p":[[3,"Command",1254],[3,"Params",1255],[3,"LookupDataConfig",0],[3,"PathBuf",1256],[15,"u32"],[8,"GuestInstance",1255],[3,"Box",1257],[3,"ConnectorHandle",1258],[3,"InitializeResponse",560],[15,"tuple"],[8,"Error",1259],[4,"Result",1260],[3,"Args",0],[3,"Formatter",1261],[6,"Result",1261],[3,"ArgMatches",1262],[6,"Error",1263],[3,"Id",1264],[4,"Option",1265],[3,"Request",1266],[3,"TypeId",1267],[3,"OakFunctionsAsyncClient",560],[6,"Result",1268],[4,"TeePlatform",47],[15,"str"],[3,"RootLayerEvidence",47],[3,"LayerEvidence",47],[3,"ApplicationKeys",47],[3,"Evidence",47],[3,"CertificateAuthority",47],[3,"DiceData",47],[3,"TransparentReleaseEndorsement",47],[3,"RootLayerEndorsements",47],[3,"KernelLayerEndorsements",47],[3,"SystemLayerEndorsements",47],[3,"ApplicationLayerEndorsements",47],[3,"ContainerLayerEndorsements",47],[3,"OakRestrictedKernelEndorsements",47],[3,"OakContainersEndorsements",47],[3,"CbEndorsements",47],[3,"Endorsements",47],[4,"Ordering",1269],[15,"usize"],[15,"bool"],[3,"Error",1261],[4,"TeePlatform",1270],[3,"DiceBuilder",1271],[15,"i32"],[3,"ClaimsSet",1272],[3,"Error",1268],[8,"Hasher",1273],[3,"RootLayerEvidence",1270],[3,"LayerEvidence",1270],[3,"ApplicationKeys",1270],[3,"Evidence",1270],[3,"Stage0DiceData",1270],[4,"Type",432],[8,"BufMut",1274],[4,"WireType",1275],[3,"DecodeContext",1275],[3,"DecodeError",1276],[8,"Buf",1277],[3,"EncryptedRequest",455],[3,"EncryptedResponse",455],[3,"AeadEncryptedMessage",455],[3,"SessionKeys",455],[3,"Signature",455],[15,"u8"],[15,"slice"],[3,"Empty",560],[3,"AbortNextLookupDataResponse",560],[3,"Status",1278],[3,"OakFunctionsClient",560],[8,"Transport",1279],[8,"AsyncTransport",1279],[3,"InitializeRequest",560],[3,"PublicKeyInfo",560],[3,"InvokeRequest",560],[3,"InvokeResponse",560],[3,"LookupDataEntry",560],[3,"LookupDataChunk",560],[3,"ExtendNextLookupDataRequest",560],[3,"ExtendNextLookupDataResponse",560],[3,"FinishNextLookupDataRequest",560],[3,"FinishNextLookupDataResponse",560],[3,"ReserveRequest",560],[3,"ReserveResponse",560],[3,"OakFunctionsServer",560],[8,"Clone",1280],[3,"Vec",1281],[15,"never"],[8,"OakFunctions",560],[3,"AttestationEvidence",919],[3,"AttestationBundle",919],[3,"AttestationEndorsement",919],[3,"ApplicationData",919],[3,"GetPublicKeyRequest",919],[3,"GetPublicKeyResponse",919],[3,"InvokeRequest",919],[3,"InvokeResponse",919],[3,"GetEncryptionKeyRequest",919],[3,"GetEncryptionKeyResponse",919],[3,"RequestWrapper",919],[3,"ResponseWrapper",919],[4,"Request",1170],[4,"Response",1191],[3,"StreamingSessionServer",1212],[4,"CompressionEncoding",1282],[8,"StreamingSession",1212],[3,"Request",1283],[8,"Body",1284],[8,"Send",1285],[8,"Debug",1261],[3,"Arc",1286],[3,"IntoMakeService",1287],[3,"Context",1288],[4,"Poll",1289],[3,"Streaming",1290],[8,"Future",1291],[3,"Pin",1292],[3,"InterceptedService",1293],[8,"Interceptor",1293],[4,"SocketAddr",1294],[3,"SessionProxy",1242]],"b":[]},\
"oak_functions_load_test":{"doc":"","t":"RRRF","n":["REQUEST","TOTAL_REQUESTS","URL","main"],"q":[[0,"oak_functions_load_test"],[4,"anyhow"]],"d":["","","",""],"i":[0,0,0,0],"f":[0,0,0,[[],[[2,[1]]]]],"c":[],"p":[[15,"tuple"],[6,"Result",4]],"b":[]},\
"oak_functions_sdk":{"doc":"Oak Functions SDK","t":"FOAFFFFFAAAADDDDDDIDDDDDDDMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMKLLKLLMLLLKLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMKLL","n":["alloc","log","proto","read_request","storage_get_item","testing","write_log_message","write_response","oak","functions","wasm","v1","LogRequest","LogResponse","LookupDataRequest","LookupDataResponse","ReadRequestRequest","ReadRequestResponse","StdWasmApi","StdWasmApiAsyncClient","StdWasmApiClient","StdWasmApiServer","TestRequest","TestResponse","WriteResponseRequest","WriteResponseResponse","body","body","body","body","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","default","default","default","default","default","default","default","default","default","default","echo","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","into","into","into","into","into","into","into","into","into","into","into","into","into","invoke","key","log","log","log","lookup_data","lookup_data","lookup_data","message","new","new","new","read_request","read_request","read_request","test","test","test","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","value","write_response","write_response","write_response"],"q":[[0,"oak_functions_sdk"],[8,"oak_functions_sdk::proto"],[9,"oak_functions_sdk::proto::oak"],[10,"oak_functions_sdk::proto::oak::functions"],[11,"oak_functions_sdk::proto::oak::functions::wasm"],[12,"oak_functions_sdk::proto::oak::functions::wasm::v1"],[227,"alloc::vec"],[228,"micro_rpc::status"],[229,"core::result"],[230,"core::option"],[231,"core::convert"],[232,"core::clone"],[233,"core::fmt"],[234,"core::fmt"],[235,"micro_rpc"]],"d":["","Logs a debug message.","","See <code>StdWasmApiClient::read_request</code>.","See <code>StdWasmApiClient::lookup_data</code>.","See <code>StdWasmApiClient::test</code>.","See <code>StdWasmApiClient::log</code>.","See <code>StdWasmApiClient::write_response</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Whether to echo the message back. If false, the response …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13,14,20,21,29,31,12,13,14,15,16,17,18,19,20,21,22,29,31,12,13,14,15,16,17,18,19,20,21,22,12,13,14,15,16,17,18,19,20,21,12,13,14,15,16,17,18,19,20,21,22,12,13,14,15,16,17,18,19,20,21,22,12,13,14,15,16,17,18,19,20,21,20,12,13,14,15,16,17,18,19,20,21,12,13,14,15,16,17,18,19,20,21,12,13,14,15,16,17,18,19,20,21,29,31,12,13,14,15,16,17,18,19,20,21,22,29,31,12,13,14,15,16,17,18,19,20,21,22,22,18,28,29,31,28,29,31,16,29,31,22,28,29,31,28,29,31,12,13,14,15,16,17,18,19,20,21,22,29,31,12,13,14,15,16,17,18,19,20,21,22,29,31,12,13,14,15,16,17,18,19,20,21,22,29,31,12,13,14,15,16,17,18,19,20,21,22,19,28,29,31],"f":[[1,2],0,0,[[],[[5,[[3,[2]],4]]]],[[[6,[2]]],[[5,[[7,[[3,[2]]]],4]]]],[[[6,[2]],8],[[5,[[3,[2]],4]]]],[-1,[[5,[9,4]]],[[11,[10]]]],[[[6,[2]]],[[5,[9,4]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[12,9],[13,9],[14,9],[15,9],[16,9],[17,9],[18,9],[19,9],[20,9],[21,9],[12,12],[13,13],[14,14],[15,15],[16,16],[17,17],[18,18],[19,19],[20,20],[21,21],[[[22,[-1]]],[[22,[-1]]],23],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[],12],[[],13],[[],14],[[],15],[[],16],[[],17],[[],18],[[],19],[[],20],[[],21],0,[12,24],[13,24],[14,24],[15,24],[16,24],[17,24],[18,24],[19,24],[20,24],[21,24],[[12,12],8],[[13,13],8],[[14,14],8],[[15,15],8],[[16,16],8],[[17,17],8],[[18,18],8],[[19,19],8],[[20,20],8],[[21,21],8],[[12,25],26],[[13,25],26],[[14,25],26],[[15,25],26],[[16,25],26],[[17,25],26],[[18,25],26],[[19,25],26],[[20,25],26],[[21,25],26],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[22,[-1]],[6,[2]]],[[5,[[3,[2]],27]]],28],0,[[-1,16],[[5,[17,4]]],[]],[[[29,[-1]],16],[[5,[[5,[17,4]]]]],30],[[[31,[-1]],16],[[5,[[5,[17,4]]]]],32],[[-1,18],[[5,[19,4]]],[]],[[[29,[-1]],18],[[5,[[5,[19,4]]]]],30],[[[31,[-1]],18],[[5,[[5,[19,4]]]]],32],0,[-1,[[29,[-1]]],30],[-1,[[31,[-1]]],32],[-1,[[22,[-1]]],28],[[-1,12],[[5,[13,4]]],[]],[[[29,[-1]],12],[[5,[[5,[13,4]]]]],30],[[[31,[-1]],12],[[5,[[5,[13,4]]]]],32],[[-1,20],[[5,[21,4]]],[]],[[[29,[-1]],20],[[5,[[5,[21,4]]]]],30],[[[31,[-1]],20],[[5,[[5,[21,4]]]]],32],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],0,[[-1,14],[[5,[15,4]]],[]],[[[29,[-1]],14],[[5,[[5,[15,4]]]]],30],[[[31,[-1]],14],[[5,[[5,[15,4]]]]],32]],"c":[],"p":[[15,"u32"],[15,"u8"],[3,"Vec",227],[3,"Status",228],[4,"Result",229],[15,"slice"],[4,"Option",230],[15,"bool"],[15,"tuple"],[15,"str"],[8,"AsRef",231],[3,"ReadRequestRequest",12],[3,"ReadRequestResponse",12],[3,"WriteResponseRequest",12],[3,"WriteResponseResponse",12],[3,"LogRequest",12],[3,"LogResponse",12],[3,"LookupDataRequest",12],[3,"LookupDataResponse",12],[3,"TestRequest",12],[3,"TestResponse",12],[3,"StdWasmApiServer",12],[8,"Clone",232],[15,"usize"],[3,"Formatter",233],[6,"Result",233],[15,"never"],[8,"StdWasmApi",12],[3,"StdWasmApiClient",12],[8,"Transport",234],[3,"StdWasmApiAsyncClient",12],[8,"AsyncTransport",234],[3,"TypeId",235]],"b":[]},\
"oak_functions_sdk_abi_test_get_storage_item":{"doc":"Oak Functions ABI test.","t":"F","n":["main"],"q":[[0,"oak_functions_sdk_abi_test_get_storage_item"]],"d":[""],"i":[0],"f":[[[],1]],"c":[],"p":[[15,"tuple"]],"b":[]},\
"oak_functions_sdk_abi_test_invoke_testing":{"doc":"Oak Functions ABI test for Testing Extension.","t":"F","n":["main"],"q":[[0,"oak_functions_sdk_abi_test_invoke_testing"]],"d":[""],"i":[0],"f":[[[],1]],"c":[],"p":[[15,"tuple"]],"b":[]},\
"oak_functions_service":{"doc":"","t":"DILLLLLLLLLLALLLLAALALLLLLAKKDLLLLLLLLLLLLLLLLLLLNNNEIDNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLKLLLLLLLLLLLLLLGDDLLLLLLLLLLLLLLLFLLLLLLLLLLLLLFLLLLLLLLLLLAAAAANDDDDDDDDNDDDDDDDEDNMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMLLLLLLLLLLLLLLLLLLMMMLLLLLLLLLLLLLLLLMMMALLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMLLMMMMMMLMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLNNNELLLLLLLLLLLLLLLLLLLLADDDDDLLLLLLLLLLMLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMLMMLLLLLLLLLLLLLLLLLLLLDDDDDDDDDDDDIDDDDDDKLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLMKLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLMMKLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMRGGRRDIIDALLLLLLLLLLLKLLLLLLLLLLLFLKLLLLLLDDLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLL","n":["OakFunctionsService","Observer","abort_next_lookup_data","as_any","as_any_mut","borrow","borrow_mut","extend_next_lookup_data","finish_next_lookup_data","from","handle_user_request","initialize","instance","into","into_any","into_any_arc","into_any_rc","logger","lookup","new","proto","reserve","stream_lookup_data","try_from","try_into","type_id","wasm","wasm_initialization","wasm_invocation","OakFunctionsInstance","abort_next_lookup_data","as_any","as_any_mut","borrow","borrow_mut","extend_lookup_data_chunk","extend_next_lookup_data","finish_next_lookup_data","from","handle_user_request","into","into_any","into_any_arc","into_any_rc","new","reserve","try_from","try_into","type_id","Debug","Error","Info","Level","OakLogger","StandaloneLogger","Trace","Warn","as_any","as_any","as_any_mut","as_any_mut","as_str","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","default","eq","eq","equivalent","equivalent","fmt","fmt","from","from","from_str","hash","into","into","into_any","into_any","into_any_arc","into_any_arc","into_any_rc","into_any_rc","iter","log_public","log_public","log_sensitive","log_sensitive","max","partial_cmp","partial_cmp","to_level_filter","to_owned","to_owned","to_string","try_from","try_from","try_into","try_into","type_id","type_id","Data","LookupData","LookupDataManager","abort_next_lookup_data","as_any","as_any","as_any_mut","as_any_mut","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","create_lookup_data","extend_next_lookup_data","finish_next_lookup_data","for_test","format_bytes","from","from","get","into","into","into_any","into_any","into_any_arc","into_any_arc","into_any_rc","into_any_rc","is_empty","len","limit","log_debug","log_error","new_empty","reserve","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","oak","attestation","crypto","functions","v1","AmdSevSnp","ApplicationKeys","ApplicationLayerEndorsements","CbEndorsements","CertificateAuthority","ContainerLayerEndorsements","DiceData","Endorsements","Evidence","IntelTdx","KernelLayerEndorsements","LayerEvidence","OakContainersEndorsements","OakRestrictedKernelEndorsements","RootLayerEndorsements","RootLayerEvidence","SystemLayerEndorsements","TeePlatform","TransparentReleaseEndorsement","Unspecified","acpi","application_keys","application_layer","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_str_name","binary","binary","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","certificate_authority","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","configuration","configuration","container_layer","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","drop","eca_certificate","eca_private_key","eca_public_key","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encryption_public_key_certificate","endorsement","endorsement_signature","endorsements","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","evidence","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_i32","from_str_name","get_claims","hash","init_ram_fs","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","is_valid","kernel_cmd_line","kernel_image","kernel_layer","kernel_layer","kernel_setup_data","layers","memory_map","partial_cmp","platform","platform","rekor_log_entry","remote_attestation_report","root_layer","root_layer","root_layer","set_platform","signing_public_key_certificate","stage0","system_image","system_layer","tee_certificate","tee_certificate","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","Cb","OakContainers","OakRestrictedKernel","Type","as_any","as_any_mut","borrow","borrow_mut","clone","clone_into","encode","encoded_len","eq","fmt","from","into","into_any","into_any_arc","into_any_rc","merge","to_owned","try_from","try_into","type_id","v1","AeadEncryptedMessage","EncryptedRequest","EncryptedResponse","SessionKeys","Signature","as_any","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","associated_data","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","ciphertext","clear","clear","clear","clear","clear","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","default","default","default","default","default","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encrypted_message","encrypted_message","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","into","into","into","into","into","into_any","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","nonce","request_key","response_key","serialized_encapsulated_public_key","serialized_encapsulated_public_key","signature","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","AbortNextLookupDataResponse","Empty","ExtendNextLookupDataRequest","ExtendNextLookupDataResponse","FinishNextLookupDataRequest","FinishNextLookupDataResponse","InitializeRequest","InitializeResponse","InvokeRequest","InvokeResponse","LookupDataChunk","LookupDataEntry","OakFunctions","OakFunctionsAsyncClient","OakFunctionsClient","OakFunctionsServer","PublicKeyInfo","ReserveRequest","ReserveResponse","abort_next_lookup_data","abort_next_lookup_data","abort_next_lookup_data","additional_entries","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","attestation","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","chunk","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","constant_response_size","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encrypted_request","encrypted_response","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","evidence","extend_next_lookup_data","extend_next_lookup_data","extend_next_lookup_data","finish_next_lookup_data","finish_next_lookup_data","finish_next_lookup_data","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","handle_user_request","handle_user_request","handle_user_request","initialize","initialize","initialize","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","invoke","items","key","new","new","new","public_key","public_key_info","reserve","reserve","reserve","stream_lookup_data","stream_lookup_data","stream_lookup_data","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","value","wasm_module","ALLOC_FUNCTION_NAME","AbiPointer","AbiPointerOffset","MAIN_FUNCTION_NAME","MEMORY_NAME","UserState","WasmApi","WasmApiFactory","WasmHandler","api","as_any","as_any","as_any_mut","as_any_mut","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","create","create_wasm_api","from","from","handle_invoke","into","into","into_any","into_any","into_any_arc","into_any_arc","into_any_rc","into_any_rc","new_wasm_handler","to_owned","transport","try_from","try_from","try_into","try_into","type_id","type_id","StdWasmApiFactory","StdWasmApiImpl","as_any","as_any","as_any_mut","as_any_mut","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","create_wasm_api","from","from","into","into","into_any","into_any","into_any_arc","into_any_arc","into_any_rc","into_any_rc","log","lookup_data","lookup_data_manager","read_request","test","to_owned","transport","try_from","try_from","try_into","try_into","type_id","type_id","write_response"],"q":[[0,"oak_functions_service"],[29,"oak_functions_service::instance"],[49,"oak_functions_service::logger"],[108,"oak_functions_service::lookup"],[152,"oak_functions_service::proto"],[153,"oak_functions_service::proto::oak"],[156,"oak_functions_service::proto::oak::attestation"],[157,"oak_functions_service::proto::oak::attestation::v1"],[573,"oak_functions_service::proto::oak::attestation::v1::endorsements"],[597,"oak_functions_service::proto::oak::crypto"],[598,"oak_functions_service::proto::oak::crypto::v1"],[713,"oak_functions_service::proto::oak::functions"],[1109,"oak_functions_service::wasm"],[1151,"oak_functions_service::wasm::api"],[1188,"micro_rpc::status"],[1189,"core::result"],[1190,"oak_crypto::encryptor"],[1191,"oak_restricted_kernel_sdk::dice"],[1192,"core::any"],[1193,"alloc::boxed"],[1194,"alloc::sync"],[1195,"alloc::rc"],[1196,"core::option"],[1197,"core::any"],[1198,"alloc::vec"],[1199,"core::cmp"],[1200,"log"],[1201,"core::fmt"],[1202,"core::fmt"],[1203,"core::iter::traits::iterator"],[1204,"alloc::string"],[1205,"core::clone"],[1206,"core::iter::traits::collect"],[1207,"anyhow"],[1208,"oak_dice::evidence"],[1209,"oak_attestation::dice"],[1210,"coset::cwt"],[1211,"anyhow"],[1212,"prost::encoding"],[1213,"prost::encoding"],[1214,"bytes::buf::buf_impl"],[1215,"micro_rpc"],[1216,"micro_rpc"],[1217,"oak_functions_abi"],[1218,"oak_functions_abi"],[1219,"oak_functions_sdk::proto::oak::functions::wasm::v1"]],"d":["","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","Wasm business logic provider based on Wasmi.","","","","See …","","","","","","See …","See …","Returns the argument unchanged.","See …","Calls <code>U::from(self)</code>.","","","","See <code>crate::proto::oak::functions::OakFunctions::initialize</code>.","","","","","The “debug” level.","The “error” level.","The “info” level.","An enum representing the available verbosity levels of the …","","Temporary OakLogger implementation using the <code>log</code> crate.","The “trace” level.","The “warn” level.","","","","","Returns the string representation of the <code>Level</code>.","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","Iterate through all supported logging levels.","Logs a message that contains only public, non-sensitive …","","Logs the message, which might contain sensitive …","","Returns the most verbose logging level.","","","Converts the <code>Level</code> to the equivalent <code>LevelFilter</code>.","","","","","","","","","","","Provides access to shared lookup data.","Utility for managing lookup data.","","","","","","","","","","","","Creates a new <code>LookupData</code> instance with a reference to the …","","","Creates an instance of LookupData populated with the given …","Converts a binary sequence to a string if it is a valid …","Returns the argument unchanged.","Returns the argument unchanged.","Gets an individual entry from the backing data.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","Whether the backing data is empty.","Gets the number of entries in the backing data.","Returns a slice covering up to the first <code>limit</code> elements of …","Logs a debug message.","Logs an error message.","Creates a new instance with empty backing data.","","","","","","","","","","","","","","","Keys used by the application to derive encryption session …","","","Message for passing embedded certificate authority …","","Message that is sent between DICE layers.","Endorsement contains statements that some entity (e.g. a …","Attestation Evidence used by the client to the identity of …","","","DICE layer evidence containing a certificate signed by the …","","","","Evidence generated by the Layer0.","","This proto defines the layered DICE Attestation Evidence.","Endorsement for binaries from the Transparent Release …","","","Application keys signed by the penultimate layer’s ECA …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","String value of the enum field names used in the ProtoBuf …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Certificate signing current layer’s measurements and the …","ECA private key that will be used by a layer to sign a …","Serialized ECA public key for Layer0 that is signed by the …","","","","","","","","","","","","","","","","","Certificate signing the encryption public key.","JSON string comtaining the endorsement statement for the …","The signature for the endorsement.","Nested message and enum types in <code>Endorsements</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Converts an <code>i32</code> to a <code>TeePlatform</code>, or <code>None</code> if <code>value</code> is not …","Creates an enum from field names used in the ProtoBuf …","Extracts the <code>ClaimsSet</code> encoded in the ECA certificate of …","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns <code>true</code> if <code>value</code> is a variant of <code>TeePlatform</code>.","","","","","","Layer1..LayerN-1 attestation evidence.","","","Returns the enum value of <code>platform</code>, or the default if the …","The platform providing the attestation report.","The log entry as proof of inclusion of the endorsement …","TEE-specific attestation report acting as a non-standard …","Layer0 attestation evidence.","","","Sets <code>platform</code> to the provided enum value.","Certificate signing the signing public key.","Endorsement of the Stage0 binary.","","","The serialized TEE certificate(s). The details of the …","Serialized X.509 TEE certificate.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Encodes the message to a buffer.","Returns the encoded length of the message without a length …","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","Decodes an instance of the message from a buffer, and …","","","","","","Message encrypted with Authenticated Encryption with …","Request message encrypted using Hybrid Public Key …","Response message encrypted Hybrid Public Key Encryption …","Envelope containing session keys required to …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Message encrypted with Authenticated Encryption with …","Message encrypted with Authenticated Encryption with …","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","AEAD key for encrypting/decrypting client requests.","AEAD key for encrypting/decrypting enclave responses.","Returns the value of <code>serialized_encapsulated_public_key</code>, …","Ephemeral Diffie-Hellman client public key that is needed …","","","","","","","","","","","","","","","","","","","","","","","","If the definition of ExtendNextLookupData changes, the …eturns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Fixed name of the function to allocate memory. Every Oak …","Type aliases for positions in Wasm linear memory. Any …","Type aliases for offsets in Wasm linear memory.","Fixed name of the function to start a Wasm. Every Oak Wasm …","The name of the memory every Oak Wasm module has.","<code>UserState</code> holds the user request bytes and response bytes …","A trait for Wasm APIs that can be called from Wasm modules.","A trait for creating Wasm APIs that can be called from …","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Handles a call to invoke by getting the raw request bytes …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","Creates a new <code>WasmHandler</code> instance.","","","","","","","","","The main purpose of this factory is to allow creating a …","Implementation of the standard Oak Functions API.","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,0,0,1,0,1,1,1,1,1,0,20,20,0,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,31,31,31,0,0,0,31,31,31,33,31,33,31,31,33,31,33,31,33,31,33,31,33,31,31,31,31,31,31,31,33,31,31,31,33,31,33,31,33,31,33,31,43,33,43,33,31,31,31,31,31,33,31,31,33,31,33,31,33,0,0,0,42,42,45,42,45,42,45,42,45,45,45,42,42,42,42,0,42,45,45,42,45,42,45,42,45,42,45,45,45,0,45,45,42,42,45,42,45,42,45,42,45,0,0,0,0,0,52,0,0,0,0,0,0,0,0,52,0,0,0,0,0,0,0,0,0,52,61,56,65,53,54,55,56,52,57,58,59,60,61,62,63,64,65,66,67,68,53,54,55,56,52,57,58,59,60,61,62,63,64,65,66,67,68,52,63,64,53,54,55,56,52,57,58,59,60,61,62,63,64,65,66,67,68,53,54,55,56,52,57,58,59,60,61,62,63,64,65,66,67,68,58,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,53,54,55,56,52,57,58,59,60,61,62,63,64,65,66,67,68,53,54,55,56,52,57,58,59,60,61,62,63,64,65,66,67,68,52,63,64,66,53,54,55,56,52,57,58,59,60,61,62,63,64,65,66,67,68,58,54,57,53,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,55,59,59,0,53,54,55,56,52,57,58,59,60,61,62,63,64,65,66,67,68,52,52,58,53,54,55,56,52,57,58,59,60,61,62,63,64,65,66,67,68,53,54,55,56,52,52,57,58,58,59,60,61,62,63,64,65,66,67,68,52,52,54,52,61,53,54,55,56,52,57,58,59,60,61,62,63,64,65,66,67,68,53,54,55,56,52,57,58,59,60,61,62,63,64,65,66,67,68,53,54,55,56,52,57,58,59,60,61,62,63,64,65,66,67,68,53,54,55,56,52,57,58,59,60,61,62,63,64,65,66,67,68,52,61,61,65,66,61,56,61,52,53,53,59,53,56,65,66,53,55,60,62,66,60,67,53,54,55,56,52,57,58,59,60,61,62,63,64,65,66,67,68,53,53,54,54,55,55,56,56,52,57,58,58,59,60,61,62,63,64,65,66,67,68,53,54,55,56,52,57,58,59,60,61,62,63,64,65,66,67,68,68,53,54,55,56,52,57,58,59,60,61,62,63,64,65,66,67,68,79,79,79,0,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,0,0,0,0,0,0,86,87,88,89,90,86,87,88,89,90,88,86,87,88,89,90,86,87,88,89,90,88,86,87,88,89,90,86,87,88,89,90,86,87,88,89,90,86,87,88,89,90,86,87,88,89,90,86,87,86,87,88,89,90,86,87,88,89,90,86,87,88,89,90,86,87,88,89,90,86,87,88,89,90,86,87,88,89,90,86,87,88,89,90,88,89,89,86,86,90,86,87,88,89,90,86,87,88,89,90,86,87,88,89,90,86,87,88,89,90,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,100,91,93,22,91,93,15,16,95,13,14,96,24,9,10,11,12,3,2,22,23,97,91,93,15,16,95,13,14,96,24,9,10,11,12,3,2,22,23,97,95,91,93,15,16,95,13,14,96,24,9,10,11,12,3,2,22,23,97,91,93,15,16,95,13,14,96,24,9,10,11,12,3,2,22,23,97,9,15,16,95,13,14,96,24,9,10,11,12,3,2,22,23,15,16,95,13,14,96,24,9,10,11,12,3,2,22,23,97,15,16,95,13,14,96,24,9,10,11,12,3,2,22,23,97,15,15,16,95,13,14,96,24,9,10,11,12,3,2,22,23,15,16,95,13,14,96,24,9,10,11,12,3,2,22,23,13,14,15,16,95,13,14,96,24,9,10,11,12,3,2,22,23,16,100,91,93,100,91,93,15,16,95,13,14,96,24,9,10,11,12,3,2,22,23,91,93,15,16,95,13,14,96,24,9,10,11,12,3,2,22,23,97,100,91,93,100,91,93,91,93,15,16,95,13,14,96,24,9,10,11,12,3,2,22,23,97,91,93,15,16,95,13,14,96,24,9,10,11,12,3,2,22,23,97,91,93,15,16,95,13,14,96,24,9,10,11,12,3,2,22,23,97,91,93,15,16,95,13,14,96,24,9,10,11,12,3,2,22,23,97,97,24,96,91,93,97,95,16,100,91,93,100,91,93,15,16,95,13,14,96,24,9,10,11,12,3,2,22,23,97,91,93,15,16,95,13,14,96,24,9,10,11,12,3,2,22,23,97,91,93,15,16,95,13,14,96,24,9,10,11,12,3,2,22,23,97,91,93,15,16,95,13,14,96,24,9,10,11,12,3,2,22,23,97,96,15,0,0,0,0,0,0,0,0,0,0,119,101,119,101,119,101,119,101,101,101,101,102,119,101,101,119,101,119,101,119,101,119,101,0,101,104,119,101,119,101,119,101,0,0,108,107,108,107,108,107,108,107,107,107,108,108,107,108,107,108,107,108,107,108,107,107,107,108,107,107,107,107,108,107,108,107,108,107,107],"f":[0,0,[[[1,[-1,-2]],2],[[5,[3,4]]],6,7],[-1,8,[]],[-1,8,[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[1,[-1,-2]],9],[[5,[10,4]]],6,7],[[[1,[-1,-2]],11],[[5,[12,4]]],6,7],[-1,-1,[]],[[[1,[-1,-2]],13],[[5,[14,4]]],6,7],[[[1,[-1,-2]],15],[[5,[16,4]]],6,7],0,[-1,-2,[],[]],[[[17,[-1]]],[[17,[8]]],[]],[[[18,[-1]]],[[18,[8]]],[]],[[[19,[-1]]],[[19,[8]]],[]],0,0,[[-1,[18,[-2]],[21,[[18,[20]]]]],[[1,[-2,-1]]],7,6],0,[[[1,[-1,-2]],22],[[5,[23,4]]],6,7],[[[1,[-1,-2]],24],[[5,[12,4]]],6,7],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,25,[]],0,[[-1,26],27,[]],[[-1,26],27,[]],0,[[28,2],[[5,[3,4]]]],[-1,8,[]],[-1,8,[]],[-1,-2,[],[]],[-1,-2,[],[]],[[28,24],27],[[28,9],[[5,[10,4]]]],[[28,11],[[5,[12,4]]]],[-1,-1,[]],[[28,[30,[29]]],[[5,[[30,[29]],4]]]],[-1,-2,[],[]],[[[17,[-1]]],[[17,[8]]],[]],[[[18,[-1]]],[[18,[8]]],[]],[[[19,[-1]]],[[19,[8]]],[]],[[15,[21,[[18,[20]]]]],[[5,[28,4]]]],[[28,22],[[5,[23,4]]]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,25,[]],0,0,0,0,0,0,0,0,[-1,8,[]],[-1,8,[]],[-1,8,[]],[-1,8,[]],[31,32],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[31,31],[33,33],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[31,31],34],[[],33],[[31,35],36],[[31,31],36],[[-1,-2],36,[],[]],[[-1,-2],36,[],[]],[[31,37],[[5,[27,38]]]],[[31,37],[[5,[27,38]]]],[-1,-1,[]],[-1,-1,[]],[32,[[5,[31]]]],[[31,-1],27,39],[-1,-2,[],[]],[-1,-2,[],[]],[[[17,[-1]]],[[17,[8]]],[]],[[[17,[-1]]],[[17,[8]]],[]],[[[18,[-1]]],[[18,[8]]],[]],[[[18,[-1]]],[[18,[8]]],[]],[[[19,[-1]]],[[19,[8]]],[]],[[[19,[-1]]],[[19,[8]]],[]],[[],[[0,[40]]]],[[-1,31,32],27,[]],[[33,31,32],27],[[-1,31,32],27,[]],[[33,31,32],27],[[],31],[[31,31],[[21,[34]]]],[[31,35],[[21,[34]]]],[31,35],[-1,-2,[],[]],[-1,-2,[],[]],[-1,41,[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,25,[]],[-1,25,[]],0,0,0,[[[42,[-1]]],27,[43,44]],[-1,8,[]],[-1,8,[]],[-1,8,[]],[-1,8,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[45,[-1]]],[[45,[-1]]],[44,43,44]],[[-1,-2],27,[],[]],[[[42,[-1]]],[[45,[-1]]],[43,44]],[[[42,[-1]],-2],27,[43,44],46],[[[42,[-1]]],27,[43,44]],[[47,-1],[[42,[-1]]],[43,44]],[[[48,[29]]],41],[-1,-1,[]],[-1,-1,[]],[[[45,[-1]],[48,[29]]],[[21,[[30,[29]]]]],[43,44]],[-1,-2,[],[]],[-1,-2,[],[]],[[[17,[-1]]],[[17,[8]]],[]],[[[17,[-1]]],[[17,[8]]],[]],[[[18,[-1]]],[[18,[8]]],[]],[[[18,[-1]]],[[18,[8]]],[]],[[[19,[-1]]],[[19,[8]]],[]],[[[19,[-1]]],[[19,[8]]],[]],[[[45,[-1]]],36,[43,44]],[[[45,[-1]]],49,[43,44]],[[[48,[-1]],49],[[48,[-1]]],[]],[[[45,[-1]],32],27,[43,44]],[[[45,[-1]],32],27,[43,44]],[-1,[[42,[-1]]],[43,44]],[[[42,[-1]],50],[[51,[27]]],[43,44]],[-1,-2,[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,25,[]],[-1,25,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,8,[]],[-1,8,[]],[-1,8,[]],[-1,8,[]],[-1,8,[]],[-1,8,[]],[-1,8,[]],[-1,8,[]],[-1,8,[]],[-1,8,[]],[-1,8,[]],[-1,8,[]],[-1,8,[]],[-1,8,[]],[-1,8,[]],[-1,8,[]],[-1,8,[]],[-1,8,[]],[-1,8,[]],[-1,8,[]],[-1,8,[]],[-1,8,[]],[-1,8,[]],[-1,8,[]],[-1,8,[]],[-1,8,[]],[-1,8,[]],[-1,8,[]],[-1,8,[]],[-1,8,[]],[-1,8,[]],[-1,8,[]],[-1,8,[]],[-1,8,[]],[52,32],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[53,27],[54,27],[55,27],[56,27],[57,27],[58,27],[59,27],[60,27],[61,27],[62,27],[63,27],[64,27],[65,27],[66,27],[67,27],[68,27],[53,53],[54,54],[55,55],[56,56],[52,52],[57,57],[58,58],[59,59],[60,60],[61,61],[62,62],[63,63],[64,64],[65,65],[66,66],[67,67],[68,68],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[52,52],34],0,0,0,[[],53],[[],54],[[],55],[[],56],[[],52],[[],57],[[],58],[[],59],[[],60],[[],61],[[],62],[[],63],[[],64],[[],65],[[],66],[[],67],[[],68],[58,27],0,0,0,[53,49],[54,49],[55,49],[56,49],[57,49],[58,49],[59,49],[60,49],[61,49],[62,49],[63,49],[64,49],[65,49],[66,49],[67,49],[68,49],0,0,0,0,[[53,53],36],[[54,54],36],[[55,55],36],[[56,56],36],[[52,52],36],[[57,57],36],[[58,58],36],[[59,59],36],[[60,60],36],[[61,61],36],[[62,62],36],[[63,63],36],[[64,64],36],[[65,65],36],[[66,66],36],[[67,67],36],[[68,68],36],[[-1,-2],36,[],[]],[[-1,-2],36,[],[]],0,[[53,37],[[5,[27,38]]]],[[54,37],[[5,[27,38]]]],[[55,37],[[5,[27,38]]]],[[56,37],[[5,[27,38]]]],[[52,37],[[5,[27,38]]]],[[57,37],[[5,[27,38]]]],[[58,37],[[5,[27,38]]]],[[59,37],[[5,[27,38]]]],[[60,37],[[5,[27,38]]]],[[61,37],[[5,[27,38]]]],[[62,37],[[5,[27,38]]]],[[63,37],[[5,[27,38]]]],[[64,37],[[5,[27,38]]]],[[65,37],[[5,[27,38]]]],[[66,37],[[5,[27,38]]]],[[67,37],[[5,[27,38]]]],[[68,37],[[5,[27,38]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[69,52],[-1,-1,[]],[-1,-1,[]],[70,58],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[71,[[21,[52]]]],[32,[[21,[52]]]],[54,[[5,[72,73]]]],[[52,-1],27,39],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[17,[-1]]],[[17,[8]]],[]],[[[17,[-1]]],[[17,[8]]],[]],[[[17,[-1]]],[[17,[8]]],[]],[[[17,[-1]]],[[17,[8]]],[]],[[[17,[-1]]],[[17,[8]]],[]],[[[17,[-1]]],[[17,[8]]],[]],[[[17,[-1]]],[[17,[8]]],[]],[[[17,[-1]]],[[17,[8]]],[]],[[[17,[-1]]],[[17,[8]]],[]],[[[17,[-1]]],[[17,[8]]],[]],[[[17,[-1]]],[[17,[8]]],[]],[[[17,[-1]]],[[17,[8]]],[]],[[[17,[-1]]],[[17,[8]]],[]],[[[17,[-1]]],[[17,[8]]],[]],[[[17,[-1]]],[[17,[8]]],[]],[[[17,[-1]]],[[17,[8]]],[]],[[[17,[-1]]],[[17,[8]]],[]],[[[18,[-1]]],[[18,[8]]],[]],[[[18,[-1]]],[[18,[8]]],[]],[[[18,[-1]]],[[18,[8]]],[]],[[[18,[-1]]],[[18,[8]]],[]],[[[18,[-1]]],[[18,[8]]],[]],[[[18,[-1]]],[[18,[8]]],[]],[[[18,[-1]]],[[18,[8]]],[]],[[[18,[-1]]],[[18,[8]]],[]],[[[18,[-1]]],[[18,[8]]],[]],[[[18,[-1]]],[[18,[8]]],[]],[[[18,[-1]]],[[18,[8]]],[]],[[[18,[-1]]],[[18,[8]]],[]],[[[18,[-1]]],[[18,[8]]],[]],[[[18,[-1]]],[[18,[8]]],[]],[[[18,[-1]]],[[18,[8]]],[]],[[[18,[-1]]],[[18,[8]]],[]],[[[18,[-1]]],[[18,[8]]],[]],[[[19,[-1]]],[[19,[8]]],[]],[[[19,[-1]]],[[19,[8]]],[]],[[[19,[-1]]],[[19,[8]]],[]],[[[19,[-1]]],[[19,[8]]],[]],[[[19,[-1]]],[[19,[8]]],[]],[[[19,[-1]]],[[19,[8]]],[]],[[[19,[-1]]],[[19,[8]]],[]],[[[19,[-1]]],[[19,[8]]],[]],[[[19,[-1]]],[[19,[8]]],[]],[[[19,[-1]]],[[19,[8]]],[]],[[[19,[-1]]],[[19,[8]]],[]],[[[19,[-1]]],[[19,[8]]],[]],[[[19,[-1]]],[[19,[8]]],[]],[[[19,[-1]]],[[19,[8]]],[]],[[[19,[-1]]],[[19,[8]]],[]],[[[19,[-1]]],[[19,[8]]],[]],[[[19,[-1]]],[[19,[8]]],[]],[71,36],0,0,0,0,0,0,0,[[52,52],[[21,[34]]]],[53,52],0,0,0,0,0,0,[[53,52],27],0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[74,[[5,[53,73]]]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[75,[[5,[54,73]]]],[-1,[[5,[-2]]],[],[]],[76,[[5,[55,73]]]],[77,[[5,[56,73]]]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[78,[[5,[58,73]]]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],0,[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],0,0,0,0,[-1,8,[]],[-1,8,[]],[-1,-2,[],[]],[-1,-2,[],[]],[79,79],[[-1,-2],27,[],[]],[[79,-1],27,80],[79,49],[[79,79],36],[[79,37],[[5,[27,38]]]],[-1,-1,[]],[-1,-2,[],[]],[[[17,[-1]]],[[17,[8]]],[]],[[[18,[-1]]],[[18,[8]]],[]],[[[19,[-1]]],[[19,[8]]],[]],[[[21,[79]],81,82,-1,83],[[5,[27,84]]],85],[-1,-2,[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,25,[]],0,0,0,0,0,0,[-1,8,[]],[-1,8,[]],[-1,8,[]],[-1,8,[]],[-1,8,[]],[-1,8,[]],[-1,8,[]],[-1,8,[]],[-1,8,[]],[-1,8,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[86,27],[87,27],[88,27],[89,27],[90,27],[86,86],[87,87],[88,88],[89,89],[90,90],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[],86],[[],87],[[],88],[[],89],[[],90],[86,49],[87,49],[88,49],[89,49],[90,49],0,0,[[86,86],36],[[87,87],36],[[88,88],36],[[89,89],36],[[90,90],36],[[86,37],[[5,[27,38]]]],[[87,37],[[5,[27,38]]]],[[88,37],[[5,[27,38]]]],[[89,37],[[5,[27,38]]]],[[90,37],[[5,[27,38]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[17,[-1]]],[[17,[8]]],[]],[[[17,[-1]]],[[17,[8]]],[]],[[[17,[-1]]],[[17,[8]]],[]],[[[17,[-1]]],[[17,[8]]],[]],[[[17,[-1]]],[[17,[8]]],[]],[[[18,[-1]]],[[18,[8]]],[]],[[[18,[-1]]],[[18,[8]]],[]],[[[18,[-1]]],[[18,[8]]],[]],[[[18,[-1]]],[[18,[8]]],[]],[[[18,[-1]]],[[18,[8]]],[]],[[[19,[-1]]],[[19,[8]]],[]],[[[19,[-1]]],[[19,[8]]],[]],[[[19,[-1]]],[[19,[8]]],[]],[[[19,[-1]]],[[19,[8]]],[]],[[[19,[-1]]],[[19,[8]]],[]],0,0,0,[86,[[48,[29]]]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[-1,2],[[5,[3,4]]],[]],[[[91,[-1]],2],[[5,[[5,[3,4]]]]],92],[[[93,[-1]],2],[[5,[[5,[3,4]]]]],94],0,[-1,8,[]],[-1,8,[]],[-1,8,[]],[-1,8,[]],[-1,8,[]],[-1,8,[]],[-1,8,[]],[-1,8,[]],[-1,8,[]],[-1,8,[]],[-1,8,[]],[-1,8,[]],[-1,8,[]],[-1,8,[]],[-1,8,[]],[-1,8,[]],[-1,8,[]],[-1,8,[]],[-1,8,[]],[-1,8,[]],[-1,8,[]],[-1,8,[]],[-1,8,[]],[-1,8,[]],[-1,8,[]],[-1,8,[]],[-1,8,[]],[-1,8,[]],[-1,8,[]],[-1,8,[]],[-1,8,[]],[-1,8,[]],[-1,8,[]],[-1,8,[]],[-1,8,[]],[-1,8,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[15,27],[16,27],[95,27],[13,27],[14,27],[96,27],[24,27],[9,27],[10,27],[11,27],[12,27],[3,27],[2,27],[22,27],[23,27],[15,15],[16,16],[95,95],[13,13],[14,14],[96,96],[24,24],[9,9],[10,10],[11,11],[12,12],[3,3],[2,2],[22,22],[23,23],[[[97,[-1]]],[[97,[-1]]],44],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],0,[[],15],[[],16],[[],95],[[],13],[[],14],[[],96],[[],24],[[],9],[[],10],[[],11],[[],12],[[],3],[[],2],[[],22],[[],23],[15,49],[16,49],[95,49],[13,49],[14,49],[96,49],[24,49],[9,49],[10,49],[11,49],[12,49],[3,49],[2,49],[22,49],[23,49],0,0,[[15,15],36],[[16,16],36],[[95,95],36],[[13,13],36],[[14,14],36],[[96,96],36],[[24,24],36],[[9,9],36],[[10,10],36],[[11,11],36],[[12,12],36],[[3,3],36],[[2,2],36],[[22,22],36],[[23,23],36],0,[[-1,9],[[5,[10,4]]],[]],[[[91,[-1]],9],[[5,[[5,[10,4]]]]],92],[[[93,[-1]],9],[[5,[[5,[10,4]]]]],94],[[-1,11],[[5,[12,4]]],[]],[[[91,[-1]],11],[[5,[[5,[12,4]]]]],92],[[[93,[-1]],11],[[5,[[5,[12,4]]]]],94],[[15,37],98],[[16,37],98],[[95,37],98],[[13,37],98],[[14,37],98],[[96,37],98],[[24,37],98],[[9,37],98],[[10,37],98],[[11,37],98],[[12,37],98],[[3,37],98],[[2,37],98],[[22,37],98],[[23,37],98],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[-1,13],[[5,[14,4]]],[]],[[[91,[-1]],13],[[5,[[5,[14,4]]]]],92],[[[93,[-1]],13],[[5,[[5,[14,4]]]]],94],[[-1,15],[[5,[16,4]]],[]],[[[91,[-1]],15],[[5,[[5,[16,4]]]]],92],[[[93,[-1]],15],[[5,[[5,[16,4]]]]],94],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[17,[-1]]],[[17,[8]]],[]],[[[17,[-1]]],[[17,[8]]],[]],[[[17,[-1]]],[[17,[8]]],[]],[[[17,[-1]]],[[17,[8]]],[]],[[[17,[-1]]],[[17,[8]]],[]],[[[17,[-1]]],[[17,[8]]],[]],[[[17,[-1]]],[[17,[8]]],[]],[[[17,[-1]]],[[17,[8]]],[]],[[[17,[-1]]],[[17,[8]]],[]],[[[17,[-1]]],[[17,[8]]],[]],[[[17,[-1]]],[[17,[8]]],[]],[[[17,[-1]]],[[17,[8]]],[]],[[[17,[-1]]],[[17,[8]]],[]],[[[17,[-1]]],[[17,[8]]],[]],[[[17,[-1]]],[[17,[8]]],[]],[[[17,[-1]]],[[17,[8]]],[]],[[[17,[-1]]],[[17,[8]]],[]],[[[17,[-1]]],[[17,[8]]],[]],[[[18,[-1]]],[[18,[8]]],[]],[[[18,[-1]]],[[18,[8]]],[]],[[[18,[-1]]],[[18,[8]]],[]],[[[18,[-1]]],[[18,[8]]],[]],[[[18,[-1]]],[[18,[8]]],[]],[[[18,[-1]]],[[18,[8]]],[]],[[[18,[-1]]],[[18,[8]]],[]],[[[18,[-1]]],[[18,[8]]],[]],[[[18,[-1]]],[[18,[8]]],[]],[[[18,[-1]]],[[18,[8]]],[]],[[[18,[-1]]],[[18,[8]]],[]],[[[18,[-1]]],[[18,[8]]],[]],[[[18,[-1]]],[[18,[8]]],[]],[[[18,[-1]]],[[18,[8]]],[]],[[[18,[-1]]],[[18,[8]]],[]],[[[18,[-1]]],[[18,[8]]],[]],[[[18,[-1]]],[[18,[8]]],[]],[[[18,[-1]]],[[18,[8]]],[]],[[[19,[-1]]],[[19,[8]]],[]],[[[19,[-1]]],[[19,[8]]],[]],[[[19,[-1]]],[[19,[8]]],[]],[[[19,[-1]]],[[19,[8]]],[]],[[[19,[-1]]],[[19,[8]]],[]],[[[19,[-1]]],[[19,[8]]],[]],[[[19,[-1]]],[[19,[8]]],[]],[[[19,[-1]]],[[19,[8]]],[]],[[[19,[-1]]],[[19,[8]]],[]],[[[19,[-1]]],[[19,[8]]],[]],[[[19,[-1]]],[[19,[8]]],[]],[[[19,[-1]]],[[19,[8]]],[]],[[[19,[-1]]],[[19,[8]]],[]],[[[19,[-1]]],[[19,[8]]],[]],[[[19,[-1]]],[[19,[8]]],[]],[[[19,[-1]]],[[19,[8]]],[]],[[[19,[-1]]],[[19,[8]]],[]],[[[19,[-1]]],[[19,[8]]],[]],[[[97,[-1]],[48,[29]]],[[5,[[30,[29]],99]]],100],0,0,[-1,[[91,[-1]]],92],[-1,[[93,[-1]]],94],[-1,[[97,[-1]]],100],0,0,[[-1,22],[[5,[23,4]]],[]],[[[91,[-1]],22],[[5,[[5,[23,4]]]]],92],[[[93,[-1]],22],[[5,[[5,[23,4]]]]],94],[[-1,24],[[5,[12,4]]],[]],[[[91,[-1]],24],[[5,[[5,[12,4]]]]],92],[[[93,[-1]],24],[[5,[[5,[12,4]]]]],94],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],0,0,0,0,0,0,0,0,0,0,0,0,[-1,8,[]],[-1,8,[]],[-1,8,[]],[-1,8,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[101,[-1]]],[[101,[-1]]],[44,43]],[[-1,-2],27,[],[]],[[[48,[29]],[18,[102]],-1,[21,[[18,[20]]]]],[[51,[[101,[-1]]]]],43],[[-1,[30,[29]],[18,[[103,[[30,[29]]]]]]],[[17,[104]]],[]],[-1,-1,[]],[-1,-1,[]],[[[101,[-1]],105],[[5,[106,4]]],43],[-1,-2,[],[]],[-1,-2,[],[]],[[[17,[-1]]],[[17,[8]]],[]],[[[17,[-1]]],[[17,[8]]],[]],[[[18,[-1]]],[[18,[8]]],[]],[[[18,[-1]]],[[18,[8]]],[]],[[[19,[-1]]],[[19,[8]]],[]],[[[19,[-1]]],[[19,[8]]],[]],[[[48,[29]],[18,[[42,[33]]]],[21,[[18,[20]]]]],[[51,[[101,[33]]]]]],[-1,-2,[],[]],[-1,[[17,[92]]],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,25,[]],[-1,25,[]],0,0,[-1,8,[]],[-1,8,[]],[-1,8,[]],[-1,8,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[107,107],[[-1,-2],27,[],[]],[[108,[30,[29]],[18,[[103,[[30,[29]]]]]]],[[17,[104]]]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[17,[-1]]],[[17,[8]]],[]],[[[17,[-1]]],[[17,[8]]],[]],[[[18,[-1]]],[[18,[8]]],[]],[[[18,[-1]]],[[18,[8]]],[]],[[[19,[-1]]],[[19,[8]]],[]],[[[19,[-1]]],[[19,[8]]],[]],[[107,109],[[5,[110,4]]]],[[107,111],[[5,[112,4]]]],0,[[107,113],[[5,[114,4]]]],[[107,115],[[5,[116,4]]]],[-1,-2,[],[]],[107,[[17,[92]]]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,25,[]],[-1,25,[]],[[107,117],[[5,[118,4]]]]],"c":[1030],"p":[[3,"OakFunctionsService",0],[3,"Empty",713],[3,"AbortNextLookupDataResponse",713],[3,"Status",1188],[4,"Result",1189],[8,"EncryptionKeyHandle",1190],[8,"EvidenceProvider",1191],[8,"Any",1192],[3,"ExtendNextLookupDataRequest",713],[3,"ExtendNextLookupDataResponse",713],[3,"FinishNextLookupDataRequest",713],[3,"FinishNextLookupDataResponse",713],[3,"InvokeRequest",713],[3,"InvokeResponse",713],[3,"InitializeRequest",713],[3,"InitializeResponse",713],[3,"Box",1193],[3,"Arc",1194],[3,"Rc",1195],[8,"Observer",0],[4,"Option",1196],[3,"ReserveRequest",713],[3,"ReserveResponse",713],[3,"LookupDataChunk",713],[3,"TypeId",1192],[3,"Duration",1197],[15,"tuple"],[3,"OakFunctionsInstance",29],[15,"u8"],[3,"Vec",1198],[4,"Level",49],[15,"str"],[3,"StandaloneLogger",49],[4,"Ordering",1199],[4,"LevelFilter",1200],[15,"bool"],[3,"Formatter",1201],[3,"Error",1201],[8,"Hasher",1202],[8,"Iterator",1203],[3,"String",1204],[3,"LookupDataManager",108],[8,"OakLogger",49],[8,"Clone",1205],[3,"LookupData",108],[8,"IntoIterator",1206],[6,"Data",108],[15,"slice"],[15,"usize"],[15,"u64"],[6,"Result",1207],[4,"TeePlatform",157],[3,"RootLayerEvidence",157],[3,"LayerEvidence",157],[3,"ApplicationKeys",157],[3,"Evidence",157],[3,"CertificateAuthority",157],[3,"DiceData",157],[3,"TransparentReleaseEndorsement",157],[3,"RootLayerEndorsements",157],[3,"KernelLayerEndorsements",157],[3,"SystemLayerEndorsements",157],[3,"ApplicationLayerEndorsements",157],[3,"ContainerLayerEndorsements",157],[3,"OakRestrictedKernelEndorsements",157],[3,"OakContainersEndorsements",157],[3,"CbEndorsements",157],[3,"Endorsements",157],[4,"TeePlatform",1208],[3,"DiceBuilder",1209],[15,"i32"],[3,"ClaimsSet",1210],[3,"Error",1207],[3,"RootLayerEvidence",1208],[3,"LayerEvidence",1208],[3,"ApplicationKeys",1208],[3,"Evidence",1208],[3,"Stage0DiceData",1208],[4,"Type",573],[8,"BufMut",1211],[15,"u32"],[4,"WireType",1212],[3,"DecodeContext",1212],[3,"DecodeError",1213],[8,"Buf",1214],[3,"EncryptedRequest",598],[3,"EncryptedResponse",598],[3,"AeadEncryptedMessage",598],[3,"SessionKeys",598],[3,"Signature",598],[3,"OakFunctionsClient",713],[8,"Transport",1215],[3,"OakFunctionsAsyncClient",713],[8,"AsyncTransport",1215],[3,"PublicKeyInfo",713],[3,"LookupDataEntry",713],[3,"OakFunctionsServer",713],[6,"Result",1201],[15,"never"],[8,"OakFunctions",713],[3,"WasmHandler",1109],[8,"WasmApiFactory",1109],[6,"Spinlock",1216],[8,"WasmApi",1109],[3,"Request",1217],[3,"Response",1217],[3,"StdWasmApiImpl",1151],[3,"StdWasmApiFactory",1151],[3,"LogRequest",1218],[3,"LogResponse",1218],[3,"LookupDataRequest",1218],[3,"LookupDataResponse",1218],[3,"ReadRequestRequest",1218],[3,"ReadRequestResponse",1218],[3,"TestRequest",1218],[3,"TestResponse",1218],[3,"WriteResponseRequest",1218],[3,"WriteResponseResponse",1218],[3,"UserState",1109]],"b":[[72,"impl-PartialEq%3CLevelFilter%3E-for-Level"],[73,"impl-PartialEq-for-Level"],[76,"impl-Debug-for-Level"],[77,"impl-Display-for-Level"],[96,"impl-PartialOrd-for-Level"],[97,"impl-PartialOrd%3CLevelFilter%3E-for-Level"]]},\
"oak_functions_test_utils":{"doc":"Test utilities to help with unit testing of Oak Functions …","t":"DDFFLLLLFFFFFFLLLLLLLFFLFFLLLLLLLLLF","n":["Background","Term","assert_response_body","background","borrow","borrow","borrow_mut","borrow_mut","build_rust_crate_enclave","build_rust_crate_linux","build_rust_crate_wasm","compile_rust_wasm","create_test_lookup_data","free_port","from","from","into","into","into_future","into_request","into_request","kill_process","make_request","poll","rust_crate_wasm_out_path","serialize_entries","terminate_and_join","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","write_to_temp_file"],"q":[[0,"oak_functions_test_utils"],[36,"oak_functions_abi"],[37,"core::ops::function"],[38,"alloc::string"],[39,"anyhow"],[40,"alloc::vec"],[41,"ubyte::byte_unit"],[42,"std::collections::hash::map"],[43,"tonic::request"],[44,"duct"],[45,"core::pin"],[46,"core::task::wake"],[47,"core::task::poll"],[48,"core::result"],[49,"core::any"],[50,"tempfile::file"]],"d":["Wrapper around a termination signal <code>oneshot::Sender</code> and …","A wrapper around a termination signal <code>oneshot::Receiver</code>.","","Executes the provided closure passing to it a <code>Term</code> …","","","","","","Builds the crate identified by the given package name (as …","Builds the crate identified by the given package name (as …","Uses cargo to compile a Rust manifest to Wasm bytes.","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Kills all the processes identified by the provided handle.","","","Returns the path of the Wasm module generated by the crate …","Serializes the provided map as a contiguous buffer of …","Sends the termination signal to the background task and …","","","","","","","","",""],"i":[0,0,0,0,4,18,4,18,0,0,0,0,0,0,4,18,4,18,18,4,18,0,0,18,0,0,4,4,18,4,18,4,18,4,18,0],"f":[0,0,[[1,2],3],[-1,4,5],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[2,[[7,[6]]]],[2,[[7,[6]]]],[2,[[7,[6]]]],[[2,8],[[7,[[10,[9]]]]]],[[11,12],[[13,[[10,[9]],[10,[9]]]]]],[[],14],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[16,3],[[14,[17,[9]]],[[10,[9]]]],[[[19,[18]],20],[[21,[3]]]],[2,6],[[[13,[[10,[9]],[10,[9]]]]],[[10,[9]]]],[[[4,[-1]]],-1,[]],[-1,[[22,[-2]]],[],[]],[-1,[[22,[-2]]],[],[]],[-1,[[22,[-2]]],[],[]],[-1,[[22,[-2]]],[],[]],[-1,23,[]],[-1,23,[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[17,[9]]],24]],"c":[],"p":[[3,"Response",36],[15,"str"],[15,"tuple"],[3,"Background",0],[8,"FnOnce",37],[3,"String",38],[6,"Result",39],[15,"bool"],[15,"u8"],[3,"Vec",40],[3,"ByteUnit",41],[15,"u32"],[3,"HashMap",42],[15,"u16"],[3,"Request",43],[3,"ReaderHandle",44],[15,"slice"],[3,"Term",0],[3,"Pin",45],[3,"Context",46],[4,"Poll",47],[4,"Result",48],[3,"TypeId",49],[3,"NamedTempFile",50]],"b":[]},\
"oak_grpc_utils":{"doc":"","t":"DDLLLLMMLLMLLFLLLLLLLLL","n":["CodegenOptions","ExternPath","borrow","borrow","borrow_mut","borrow_mut","build_client","build_server","default","default","extern_paths","from","from","generate_grpc_code","into","into","new","try_from","try_from","try_into","try_into","type_id","type_id"],"q":[[0,"oak_grpc_utils"],[23,"std::io::error"],[24,"std::path"],[25,"core::convert"],[26,"core::result"],[27,"core::any"]],"d":["Options for building gRPC code.","","","","","","Specify whether to build client related code.","Specify whether to build server related code.","","","Specify externally provided Protobuf packages or types.","Returns the argument unchanged.","Returns the argument unchanged.","Generate gRPC code from Protobuf using <code>tonic</code> library.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","",""],"i":[0,0,1,2,1,2,1,1,1,2,1,1,2,0,1,2,2,1,2,1,2,1,2],"f":[0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[[],1],[[],2],0,[-1,-1,[]],[-1,-1,[]],[[[3,[-1]],-2,1],[[5,[4]]],[[7,[6]]],[[7,[6]]]],[-1,-2,[],[]],[-1,-2,[],[]],[[8,8],2],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,10,[]],[-1,10,[]]],"c":[],"p":[[3,"CodegenOptions",0],[3,"ExternPath",0],[15,"slice"],[15,"tuple"],[6,"Result",23],[3,"Path",24],[8,"AsRef",25],[15,"str"],[4,"Result",26],[3,"TypeId",27]],"b":[]},\
"oak_hello_world_linux_init":{"doc":"","t":"AFF","n":["init","main","init"],"q":[[0,"oak_hello_world_linux_init"],[2,"oak_hello_world_linux_init::init"],[3,"anyhow"]],"d":["","","Performs the minimum initialization required from the …"],"i":[0,0,0],"f":[0,[[],1],[[],[[3,[2]]]]],"c":[],"p":[[15,"never"],[15,"tuple"],[6,"Result",3]],"b":[]},\
"oak_launcher_utils":{"doc":"","t":"AADDLLLLLLLLLLLLLLLLLLLIDDMLLMLLLLLLLLKLMLLLLLLMLLLKLFMLLLLLLLLLLMKL","n":["channel","launcher","Connector","ConnectorHandle","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","from","from","into","into","invoke","spawn","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","GuestInstance","Instance","Params","app_binary","augment_args","augment_args_for_update","bios_binary","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","command","command_for_update","connect","connect","enclave_binary","eq","fmt","from","from","from_arg_matches","from_arg_matches_mut","gdb","group_id","into","into","kill","kill","launch","memory_size","start","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","update_from_arg_matches","update_from_arg_matches_mut","vmm_binary","wait","wait"],"q":[[0,"oak_launcher_utils"],[2,"oak_launcher_utils::channel"],[23,"oak_launcher_utils::launcher"],[68,"core::future::future"],[69,"alloc::boxed"],[70,"core::pin"],[71,"oak_channel"],[72,"core::result"],[73,"core::any"],[74,"clap_builder::builder::command"],[75,"core::fmt"],[76,"core::fmt"],[77,"clap_builder"],[78,"clap_builder::util::id"],[79,"core::option"],[80,"core::error"],[81,"anyhow"],[82,"std::os::unix::net::stream"]],"d":["","","Singleton responsible for sending requests, and receiving …","Implementation of an <code>micro_rpc::AsyncTransport</code> that …","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Spawn an instance of the <code>Connector</code> in a seperate task, and …","","","","","","","","Defines the interface of a launched guest instance. …","Represents an a guest instance launched in virtualized …","Represents parameters used for launching VM instances.","Path to the Oak Functions application binary to be loaded …","","","Path to the BIOS image to use.","","","","","","","","","Creates a channel to communicate with the guest instance.","","Path to the enclave binary to load into the VM.","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Port to use for debugging with gdb","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Kill the guest instance.","","Launches a new guest instance in given mode.","How much memory to give to the enclave binary, e.g., 256M …","Starts virtualized instance with given parameters and …","","","","","","","","","","Path to the VMM binary to execute.","Wait for the guest instance process to finish.",""],"i":[0,0,0,0,25,1,25,1,1,1,25,1,25,1,1,25,1,25,1,25,1,25,1,0,0,0,12,12,12,12,13,12,13,12,12,12,12,12,21,13,12,12,12,13,12,12,12,12,12,13,12,21,13,0,12,13,12,13,12,13,12,13,12,12,12,12,21,13],"f":[0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[1,1],[[-1,-2],2,[],[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[[1,[4,[3]]],[[7,[[6,[5]]]]]],[[[6,[8]]],1],[-1,-2,[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,10,[]],[-1,10,[]],0,0,0,0,[11,11],[11,11],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[12,12],[[-1,-2],2,[],[]],[[],11],[[],11],[-1,[[7,[[6,[5]]]]],[]],[13,[[7,[[6,[5]]]]]],0,[[12,12],14],[[12,15],16],[-1,-1,[]],[-1,-1,[]],[17,[[9,[12,18]]]],[17,[[9,[12,18]]]],0,[[],[[20,[19]]]],[-1,-2,[],[]],[-1,-2,[],[]],[[[6,[-1]]],[[7,[[6,[5]]]]],[]],[[[6,[13]]],[[7,[[6,[5]]]]]],[12,[[23,[[2,[[6,[21]],1]],[6,[22]]]]]],0,[[12,24],[[23,[13]]]],[-1,-2,[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,10,[]],[-1,10,[]],[[12,17],[[9,[2,18]]]],[[12,17],[[9,[2,18]]]],0,[-1,[[7,[[6,[5]]]]],[]],[13,[[7,[[6,[5]]]]]]],"c":[],"p":[[3,"ConnectorHandle",2],[15,"tuple"],[15,"u8"],[15,"slice"],[8,"Future",68],[3,"Box",69],[3,"Pin",70],[8,"Channel",71],[4,"Result",72],[3,"TypeId",73],[3,"Command",74],[3,"Params",23],[3,"Instance",23],[15,"bool"],[3,"Formatter",75],[6,"Result",75],[3,"ArgMatches",76],[6,"Error",77],[3,"Id",78],[4,"Option",79],[8,"GuestInstance",23],[8,"Error",80],[6,"Result",81],[3,"UnixStream",82],[3,"Connector",2]],"b":[]},\
"oak_linux_boot_params":{"doc":"","t":"NDNDDSNDDRNNNENDNDNNDNSSSDNNDNNSNNNDDEDDNSSSSSDMMMMMMMMMMMMMMLLLMMLLLLLLLLLLLLLLLLLLMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMLLLLMMMMMMLLLLMMMMLMMMMMMMMMMMMMMLLLLLLLMMMMMMMMLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLMLLLLMMMMMMMMMMMMMLMMMLLLMLLMMMMMMMMMMMMMMMMMMLMMMMMMMLLMMMMMMMMMMLLLLLMMMMLMLLLLLLMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLMLLMMMMMMMMMLML","n":["ACPI","APMBiosInfo","AppleProperties","BootE820Entry","BootParams","CAN_USE_HEAP","CCBlob","CCBlobSevInfo","CCSetupData","CC_BLOB_SEV_INFO_MAGIC","DISABLED","DTB","DiceData","E820EntryType","E820Ext","EDIDInfo","EFI","EFIInfo","IMA","INVALID","ISTInfo","Jailhouse","KASLR_FLAG","KEEP_SEGMENTS","LOADED_HIGH","LoadFlags","NVS","None","OLPCOfwHeader","PCI","PMEM","QUIET_FLAG","RAM","RESERVED","RngSeed","ScreenInfo","SetupData","SetupDataType","SetupHeader","SysDescTable","UNUSABLE","XLF_CAN_BE_LOADED_ABOVE_4G","XLF_EFI_HANDOVER_32","XLF_EFI_HANDOVER_64","XLF_EFI_KEXEC","XLF_KERNEL_64","XLoadFlags","_eddbuf","_pad2","_pad3","_pad4","_pad5","_pad6","_pad7","_pad8","_pad9","_reserved","_reserved","_rsvd1","_rsvd2","acpi_rsdp_addr","addr","all","all","alt_mem_k","apm_bios_info","append_e820_entry","args","bitand","bitand","bitand_assign","bitand_assign","bitor","bitor","bitor_assign","bitor_assign","bits","bits","bits","bits","bitxor","bitxor","bitxor_assign","bitxor_assign","blue_pos","blue_size","boot_flag","bootsect_kludge","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","capabilities","cc_blob_address","cc_blob_address","cif_handler","cl_magic","cl_offset","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmd_line_ptr","cmdline_size","code32_start","command","complement","complement","contains","contains","cpuid_len","cpuid_phys","cseg","cseg_16","cseg_16_len","cseg_len","default","delete_e820_entry","difference","difference","dseg","dseg_len","dummy","e820_entries","e820_table","e820_table","edd_mbr_sig_buf_entries","edd_mbr_sig_buffer","eddbuf_entries","edid_info","efi_info","efi_loader_signature","efi_memdesc_size","efi_memdesc_version","efi_memmap","efi_memmap_hi","efi_memmap_size","efi_systab","efi_systab_hi","empty","empty","end","entry_type","eq","eq","eq","event","ext_cmd_line_ptr","ext_lfb_base","ext_loader_type","ext_loader_ver","ext_mem_k","ext_ramdisk_image","ext_ramdisk_size","extend","extend","flags","flags","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_bits","from_bits","from_bits_retain","from_bits_retain","from_bits_retain","from_bits_retain","from_bits_truncate","from_bits_truncate","from_iter","from_iter","from_name","from_name","from_repr","from_repr","green_pos","green_size","handover_offset","hardware_subarch","hardware_subarch_data","hd0_info","hd1_info","hdr","header","header","heap_end_ptr","init_size","initrd_addr_max","insert","insert","insert_e820_entry","intersection","intersection","intersects","intersects","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","irq_desc_table","is_all","is_all","is_empty","is_empty","ist_info","iter","iter","iter_names","iter_names","jump","kbd_status","kernel_alignment","kernel_info_offset","kernel_version","len","length","lfb_base","lfb_depth","lfb_height","lfb_linelength","lfb_size","lfb_width","load_flags","loadflags","magic","min_alignment","new","new","new","next","not","not","offset","ofw_magic","ofw_version","olpc_ofw_header","orig_video_cols","orig_video_ega_bx","orig_video_is_vga","orig_video_lines","orig_video_mode","orig_video_page","orig_video_points","orig_x","orig_y","pages","payload_length","payload_offset","perf_level","pref_address","protocol","ram_size","ramdisk_image","ramdisk_size","realmode_swtch","red_pos","red_size","relocatable_kernel","remove","remove","root_dev","root_flags","rsvd_pos","rsvd_size","scratch","screen_info","secrets_len","secrets_phys","secure_boot","sentinel","set","set","set_addr","set_size","setup_data","setup_data","setup_move_size","setup_sects","signature","size","start_sys_seg","sub","sub","sub_assign","sub_assign","symmetric_difference","symmetric_difference","sys_desc_table","syssize","table","tboot_addr","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","toggle","toggle","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_of_loader","union","union","unused2","unused3","version","version","version","vesa_attributes","vesapm_off","vesapm_seg","vid_mode","x_load_flags","xloadflags","zeroed"],"q":[[0,"oak_linux_boot_params"],[487,"core::ffi::c_str"],[488,"core::option"],[489,"core::iter::traits::collect"],[490,"core::fmt"],[491,"core::fmt"],[492,"core::fmt"],[493,"bitflags::iter"],[494,"core::any"]],"d":["ACPI Reclaim Memory. Available after the OS reads the ACPI …","","","","","Indicates that the value entered in …","","","","","Memory that is not enabled.","","Custom implementation-defined value indicating that the …","E820 address range types according to Chapter 15 of the …","","","","","","Uninitialized entry in the table. Don’t trust the …","","","Used internally by the compressed kernel to communicate …","","If <code>0</code>, the protected-mode code is loaded at <code>0x10000</code>.If <code>1</code>, …","Boot protocol option flags.","ACPI NVS memory; in use or reserved by the system.","","","","Persistent memory: must be handled distinct from …","Requests the kernel to not write early messages that …","Available RAM usable by the operating system.","In use or reserved by the system.","","","","","Real-mode Kernel Header.","","Memory in which errors have been detected.","The kernel/boot_params/cmdline/ramdisk can be above 4G.","The kernel supports the 32-bit EFI handoff entry point …","The kernel supports the 64-bit EFI handoff entry point …","The kernel supports kexec EFI boot with EFI runtime …","This kernel has the legacy 64-bit entry point at <code>0x200</code>.","Extended Boot protocol option flags.","","","","","","","","","","","","","","","","Get a flags value with all known bits set.","Get a flags value with all known bits set.","","","","","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","Get the underlying bits value.","","","Get the underlying bits value.","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","","0xAA55 magic number","DO NOT USE - for bootsect.S use only","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","32-bit pointer to the kernel command line","Maximum size of the kernel command line","Boot loader hook","","The bitwise negation (<code>!</code>) of the bits in a flags value, …","The bitwise negation (<code>!</code>) of the bits in a flags value, …","Whether all set bits in a source flags value are also set …","Whether all set bits in a source flags value are also set …","","","","","","","","","The intersection of a source flags value with the …","The intersection of a source flags value with the …","","","","","","","","","","","","","","","","","","","","Get a flags value with all bits unset.","Get a flags value with all bits unset.","","","","","","","","","Extended boot laoder ID","Extended boot loader version","","","","The bitwise or (<code>|</code>) of the bits in each flags value.","The bitwise or (<code>|</code>) of the bits in each flags value.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Convert from a bits value.","Convert from a bits value.","Convert from a bits value exactly.","","Convert from a bits value exactly.","","Convert from a bits value, unsetting any unknown bits.","Convert from a bits value, unsetting any unknown bits.","The bitwise or (<code>|</code>) of the bits in each flags value.","The bitwise or (<code>|</code>) of the bits in each flags value.","Get a flags value with the bits of a flag with the given …","Get a flags value with the bits of a flag with the given …","Try to create Self from the raw representation","Try to create Self from the raw representation","","","Offset of handover entry point","Hardware subarchitecture","Subarchitecture-specific data","","","","","Magic signature “HdrS”","Free memory after setup end","Linear memory required during initialization","Highest legal initrd address","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","Whether any set bits in a source flags value are also set …","Whether any set bits in a source flags value are also set …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Whether all known bits in this flags value are set.","Whether all known bits in this flags value are set.","Whether all bits in this flags value are unset.","Whether all bits in this flags value are unset.","","Yield a set of contained flags values.","Yield a set of contained flags values.","Yield a set of contained named flags values.","Yield a set of contained named flags values.","Jump instruction","","Physical addr alignment required for kernel","Offset of the kernel_info","Pointer to kernel version string","","","","","","","","","","Boot protocol option flags","","Minimum alignment, as a power of two","","","","","The bitwise negation (<code>!</code>) of the bits in a flags value, …","The bitwise negation (<code>!</code>) of the bits in a flags value, …","","","","","","","","","","","","","","","Length of kernel payload","Offset of kernel payload","","Preferred loading address","","DO NOT USE - for bootsect.S use only","initrd load address (set by boot loader)","initrd size (set by boot loader)","Boot loader hook","","","Whether kernel is relocatable or not","The intersection of a source flags value with the …","The intersection of a source flags value with the …","Default root device number","If this field is nonzero, the root defaults to readonly.","","","","","","","","","Call <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …","Call <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …","","","","64-bit physical pointer to linked list of struct setup_data","Move to high memory size (used with hooks)","The size of the setup code in 512-byte sectors.","","","The load-low segment (<code>0x1000</code>) (obsolete)","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","The size of the protected-mode code in units of 16-byte …","","","","","","","","","","","","","","","","","","","","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Boot loader identifier","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","","","Boot protocol version supported","","","","","","Video mode control","","Boot protocol option flags",""],"i":[10,0,11,0,0,3,11,0,0,0,10,11,10,0,11,0,11,0,11,10,0,11,3,3,3,0,10,11,0,11,10,3,10,10,11,0,0,0,0,0,10,4,4,4,4,4,0,5,5,5,5,5,5,5,5,5,15,22,22,22,5,1,3,4,5,5,5,5,3,4,3,4,3,4,3,4,3,3,4,4,3,4,3,4,15,15,14,14,10,3,4,11,12,13,14,1,15,16,17,18,19,20,21,5,22,10,3,4,11,12,13,14,1,15,16,17,18,19,20,21,5,22,15,13,5,19,15,15,10,11,12,13,14,1,15,16,17,18,19,20,21,5,22,10,11,12,13,14,1,15,16,17,18,19,20,21,5,22,14,14,14,17,3,4,3,4,22,22,16,16,16,16,1,5,3,4,16,16,21,5,5,5,5,5,5,5,5,20,20,20,20,20,20,20,20,3,4,1,1,10,11,1,17,5,15,14,14,15,5,5,3,4,15,16,10,10,3,3,3,3,4,4,4,4,11,11,12,13,14,1,15,16,17,18,19,20,21,5,22,10,3,4,11,12,13,14,1,15,16,17,18,19,20,21,5,22,3,4,3,3,4,4,3,4,3,4,3,4,10,11,15,15,14,14,14,5,5,5,13,14,14,14,14,3,4,5,3,4,3,4,10,3,4,11,12,13,14,1,15,16,17,18,19,20,21,5,22,3,4,19,3,4,3,4,5,3,4,3,4,14,5,14,14,14,12,18,15,15,15,15,15,15,14,14,22,14,13,1,22,12,3,4,16,19,19,5,15,15,15,15,15,15,15,15,15,15,14,14,17,14,5,14,14,14,14,15,15,14,3,4,14,14,15,15,5,5,22,22,5,5,3,4,1,1,14,14,14,14,17,1,14,3,4,3,4,3,4,5,14,18,5,10,11,12,13,14,1,15,16,17,18,19,20,21,5,22,10,11,3,4,10,3,4,11,12,13,14,1,15,16,17,18,19,20,21,5,22,10,3,4,11,12,13,14,1,15,16,17,18,19,20,21,5,22,12,10,3,4,11,12,13,14,1,15,16,17,18,19,20,21,5,22,14,3,4,15,15,14,16,22,15,15,15,14,14,14,5],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,2],[[],3],[[],4],0,0,[[5,1],6],[5,7],[[3,3],3],[[4,4],4],[[3,3],6],[[4,4],6],[[3,3],3],[[4,4],4],[[3,3],6],[[4,4],6],[3,8],[3,8],[4,9],[4,9],[[3,3],3],[[4,4],4],[[3,3],6],[[4,4],6],0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,[10,10],[11,11],[12,12],[13,13],[14,14],[1,1],[15,15],[16,16],[17,17],[18,18],[19,19],[20,20],[21,21],[5,5],[22,22],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],0,0,0,0,[3,3],[4,4],[[3,3],23],[[4,4],23],0,0,0,0,0,0,[[],1],[[5,8],6],[[3,3],3],[[4,4],4],0,0,0,0,[5,[[24,[1]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],3],[[],4],[1,2],[1,[[25,[10]]]],[[10,10],23],[[11,11],23],[[1,1],23],0,0,0,0,0,0,0,0,[[3,-1],6,26],[[4,-1],6,26],0,0,[[10,27],[[29,[6,28]]]],[[10,27],30],[[3,27],30],[[3,27],30],[[3,27],30],[[3,27],30],[[4,27],30],[[4,27],30],[[4,27],30],[[4,27],30],[[11,27],30],[[11,27],[[29,[6,28]]]],[[12,27],30],[[13,27],30],[[14,27],30],[[1,27],30],[[15,27],30],[[16,27],30],[[17,27],30],[[18,27],30],[[19,27],30],[[20,27],30],[[21,27],30],[[5,27],30],[[22,27],30],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[8,[[25,[3]]]],[9,[[25,[4]]]],[8,3],[8,3],[9,4],[9,4],[8,3],[9,4],[-1,3,26],[-1,4,26],[31,[[25,[3]]]],[31,[[25,[4]]]],[32,[[25,[10]]]],[32,[[25,[11]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,[[3,3],6],[[4,4],6],[[5,1,8],6],[[3,3],3],[[4,4],4],[[3,3],23],[[4,4],23],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[3],[4],0,[3,23],[4,23],[3,23],[4,23],0,[3,[[33,[3]]]],[4,[[33,[4]]]],[3,[[34,[3]]]],[4,[[34,[4]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,[14,[[25,[3]]]],0,0,0,[22,13],[[2,2,10],1],[[],22],0,[3,3],[4,4],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[5,31],0,0,0,0,0,0,0,[[3,3],6],[[4,4],6],0,0,0,0,0,0,0,0,0,0,[[3,3,23],6],[[4,4,23],6],[[1,2],6],[[1,2],6],[14,12],0,0,0,0,[1,2],0,[[3,3],3],[[4,4],4],[[3,3],6],[[4,4],6],[[3,3],3],[[4,4],4],0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,35,[]],[-1,35,[]],[[3,3],6],[[4,4],6],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],0,[-1,36,[]],[-1,36,[]],[-1,36,[]],[-1,36,[]],[-1,36,[]],[-1,36,[]],[-1,36,[]],[-1,36,[]],[-1,36,[]],[-1,36,[]],[-1,36,[]],[-1,36,[]],[-1,36,[]],[-1,36,[]],[-1,36,[]],[-1,36,[]],[-1,36,[]],0,[[3,3],3],[[4,4],4],0,0,0,0,0,0,0,0,0,[14,[[25,[4]]]],0,[[],5]],"c":[23,87,275,276,361,370,371,390,397],"p":[[3,"BootE820Entry",0],[15,"usize"],[3,"LoadFlags",0],[3,"XLoadFlags",0],[3,"BootParams",0],[15,"tuple"],[3,"CStr",487],[15,"u8"],[15,"u16"],[4,"E820EntryType",0],[4,"SetupDataType",0],[3,"SetupData",0],[3,"CCSetupData",0],[3,"SetupHeader",0],[3,"ScreenInfo",0],[3,"APMBiosInfo",0],[3,"ISTInfo",0],[3,"SysDescTable",0],[3,"OLPCOfwHeader",0],[3,"EFIInfo",0],[3,"EDIDInfo",0],[3,"CCBlobSevInfo",0],[15,"bool"],[15,"slice"],[4,"Option",488],[8,"IntoIterator",489],[3,"Formatter",490],[3,"Error",490],[4,"Result",491],[6,"Result",490],[15,"str"],[15,"u32"],[3,"Iter",492],[3,"IterNames",492],[3,"String",493],[3,"TypeId",494]],"b":[[76,"impl-LoadFlags"],[77,"impl-Flags-for-LoadFlags"],[78,"impl-Flags-for-XLoadFlags"],[79,"impl-XLoadFlags"],[214,"impl-Display-for-E820EntryType"],[215,"impl-Debug-for-E820EntryType"],[216,"impl-Octal-for-LoadFlags"],[217,"impl-UpperHex-for-LoadFlags"],[218,"impl-LowerHex-for-LoadFlags"],[219,"impl-Binary-for-LoadFlags"],[220,"impl-UpperHex-for-XLoadFlags"],[221,"impl-Binary-for-XLoadFlags"],[222,"impl-Octal-for-XLoadFlags"],[223,"impl-LowerHex-for-XLoadFlags"],[224,"impl-Debug-for-SetupDataType"],[225,"impl-Display-for-SetupDataType"],[258,"impl-LoadFlags"],[259,"impl-Flags-for-LoadFlags"],[260,"impl-XLoadFlags"],[261,"impl-Flags-for-XLoadFlags"]]},\
"oak_restricted_kernel":{"doc":"Main ‘kernel’ for baremetal Oak Functions.","t":"HHHHFAFF","n":["FRAME_ALLOCATOR","GUEST_HOST_HEAP","PAGE_TABLES","VMA_ALLOCATOR","panic","shutdown","start_kernel","shutdown"],"q":[[0,"oak_restricted_kernel"],[7,"oak_restricted_kernel::shutdown"],[8,"core::panic::panic_info"],[9,"oak_linux_boot_params"]],"d":["Allocator for physical memory frames in the system. We …","The allocator for allocating space in the memory area that …","Active page tables.","Allocator for long-lived pages in the kernel.","Common panic routine for the kernel. This needs to be …","","Main entry point for the kernel, to be called from …","Tries various ways to shut down the machine."],"i":[0,0,0,0,0,0,0,0],"f":[0,0,0,0,[1,2],0,[3,2],[[],2]],"c":[],"p":[[3,"PanicInfo",8],[15,"never"],[3,"BootParams",9]],"b":[]},\
"oak_restricted_kernel_dice":{"doc":"This crate contains the logic used by …","t":"F","n":["generate_dice_data"],"q":[[0,"oak_restricted_kernel_dice"],[1,"oak_dice::evidence"],[2,"oak_dice::evidence"]],"d":["Generates attestation evidence for the ‘measurement’ …"],"i":[0],"f":[[[1,[3,[2]]],4]],"c":[],"p":[[3,"Stage0DiceData",1],[15,"u8"],[15,"slice"],[3,"RestrictedKernelDiceData",1]],"b":[]},\
"oak_restricted_kernel_interface":{"doc":"","t":"RRCRCAAOANNNNNNELLLLLLLLLLLLFFFFFFFFFFNNSSSNDDSSSNENLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["DERIVED_KEY_FD","DICE_DATA_FD","Errno","OAK_CHANNEL_FD","Syscall","errno","syscall","syscall","syscalls","EBADF","EFAULT","EINVAL","EIO","ENOMEM","ENOSYS","Errno","borrow","borrow_mut","eq","fmt","fmt","from","from_repr","into","to_string","try_from","try_into","type_id","exit","fsync","mmap","read","sys_exit","sys_fsync","sys_mmap","sys_read","sys_write","write","Exit","Fsync","MAP_ANONYMOUS","MAP_FIXED","MAP_PRIVATE","Mmap","MmapFlags","MmapProtection","PROT_EXEC","PROT_READ","PROT_WRITE","Read","Syscall","Write","all","all","bitand","bitand","bitand_assign","bitand_assign","bitor","bitor","bitor_assign","bitor_assign","bits","bits","bits","bits","bitxor","bitxor","bitxor_assign","bitxor_assign","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","complement","complement","contains","contains","difference","difference","empty","empty","extend","extend","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from_bits","from_bits","from_bits_retain","from_bits_retain","from_bits_retain","from_bits_retain","from_bits_truncate","from_bits_truncate","from_iter","from_iter","from_name","from_name","from_repr","insert","insert","intersection","intersection","intersects","intersects","into","into","into","into_iter","into_iter","is_all","is_all","is_empty","is_empty","iter","iter","iter_names","iter_names","not","not","remove","remove","set","set","sub","sub","sub_assign","sub_assign","symmetric_difference","symmetric_difference","toggle","toggle","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","union","union"],"q":[[0,"oak_restricted_kernel_interface"],[9,"oak_restricted_kernel_interface::errno"],[28,"oak_restricted_kernel_interface::syscall"],[38,"oak_restricted_kernel_interface::syscalls"],[156,"core::fmt"],[157,"core::fmt"],[158,"core::option"],[159,"alloc::string"],[160,"core::any"],[161,"core::ffi"],[162,"core::ffi"],[163,"bitflags::iter"],[164,"bitflags::iter"]],"d":["Predefined file descriptor for reading a derived key.","Predefined file descriptor for reading the dice …","","Predefined file descriptor for the Oak communication …","","","","Invoke system calls based on the Linux calling convention …","","Bad file descriptor","Bad address","Invalid argument","Input/output error","Cannot allocate memory","Function not implemented","Possible error values returned by Oak Restricted Kernel …","","","","","","Returns the argument unchanged.","Try to create Self from the raw representation","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","Terminates he calling process. Arguments:","Flush a file descriptor. Arguments:","The mapping is not backed by any file; contents are …","Don’t interpret addr as a hint, but require mapping at …","Private copy-on-write mapping.","Creates a mapping for memory. Arguments:","","","Pages may be executed.","Pages may be read.","","Read from a file descriptor.","System calls implemented by Oak Restricted Kernel.","Write to a file descriptor.","Get a flags value with all known bits set.","Get a flags value with all known bits set.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","Get the underlying bits value.","","Get the underlying bits value.","","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","","","","","","The bitwise negation (<code>!</code>) of the bits in a flags value, …","The bitwise negation (<code>!</code>) of the bits in a flags value, …","Whether all set bits in a source flags value are also set …","Whether all set bits in a source flags value are also set …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","Get a flags value with all bits unset.","Get a flags value with all bits unset.","The bitwise or (<code>|</code>) of the bits in each flags value.","The bitwise or (<code>|</code>) of the bits in each flags value.","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Convert from a bits value.","Convert from a bits value.","Convert from a bits value exactly.","","Convert from a bits value exactly.","","Convert from a bits value, unsetting any unknown bits.","Convert from a bits value, unsetting any unknown bits.","The bitwise or (<code>|</code>) of the bits in each flags value.","The bitwise or (<code>|</code>) of the bits in each flags value.","Get a flags value with the bits of a flag with the given …","Get a flags value with the bits of a flag with the given …","Try to create Self from the raw representation","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","Whether any set bits in a source flags value are also set …","Whether any set bits in a source flags value are also set …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Whether all known bits in this flags value are set.","Whether all known bits in this flags value are set.","Whether all bits in this flags value are unset.","Whether all bits in this flags value are unset.","Yield a set of contained flags values.","Yield a set of contained flags values.","Yield a set of contained named flags values.","Yield a set of contained named flags values.","The bitwise negation (<code>!</code>) of the bits in a flags value, …","The bitwise negation (<code>!</code>) of the bits in a flags value, …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","Call <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …","Call <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","","","","","","","","","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values."],"i":[0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,24,24,16,16,16,24,0,0,15,15,15,24,0,24,15,16,15,16,15,16,15,16,15,16,15,15,16,16,15,16,15,16,24,15,16,24,15,16,15,16,15,16,15,16,15,16,15,16,24,15,15,15,15,16,16,16,16,16,24,15,16,15,16,15,15,16,16,15,16,15,16,15,16,24,15,16,15,16,15,16,24,15,16,15,16,15,16,15,16,15,16,15,16,15,16,15,16,15,16,15,16,15,16,15,16,15,16,24,15,16,24,15,16,24,15,16,15,16],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[[1,1],2],[[1,3],4],[[1,3],[[7,[5,6]]]],[-1,-1,[]],[8,[[9,[1]]]],[-1,-2,[],[]],[-1,10,[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,11,[]],[12,13],[12,[[7,[5,1]]]],[[[9,[14]],8,15,16,12,17],[[7,[[19,[18]],1]]]],[[12,[19,[18]]],[[7,[20,1]]]],[17,5],[17,21],[[14,22,17,17,17,17],8],[[17,14,22],21],[[17,14,22],21],[[12,[19,[18]]],[[7,[20,1]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],15],[[],16],[[15,15],15],[[16,16],16],[[15,15],5],[[16,16],5],[[15,15],15],[[16,16],16],[[15,15],5],[[16,16],5],[15,12],[15,12],[16,12],[16,12],[[15,15],15],[[16,16],16],[[15,15],5],[[16,16],5],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[15,15],[16,16],[[15,15],2],[[16,16],2],[[15,15],15],[[16,16],16],[[],15],[[],16],[[15,-1],5,23],[[16,-1],5,23],[[24,3],4],[[15,3],4],[[15,3],4],[[15,3],4],[[15,3],4],[[16,3],4],[[16,3],4],[[16,3],4],[[16,3],4],[[16,3],4],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[12,[[9,[15]]]],[12,[[9,[16]]]],[12,15],[12,15],[12,16],[12,16],[12,15],[12,16],[-1,15,23],[-1,16,23],[25,[[9,[15]]]],[25,[[9,[16]]]],[20,[[9,[24]]]],[[15,15],5],[[16,16],5],[[15,15],15],[[16,16],16],[[15,15],2],[[16,16],2],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[15],[16],[15,2],[16,2],[15,2],[16,2],[15,[[26,[15]]]],[16,[[26,[16]]]],[15,[[27,[15]]]],[16,[[27,[16]]]],[15,15],[16,16],[[15,15],5],[[16,16],5],[[15,15,2],5],[[16,16,2],5],[[15,15],15],[[16,16],16],[[15,15],5],[[16,16],5],[[15,15],15],[[16,16],16],[[15,15],5],[[16,16],5],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[[15,15],15],[[16,16],16]],"c":[],"p":[[4,"Errno",9],[15,"bool"],[3,"Formatter",156],[6,"Result",156],[15,"tuple"],[3,"Error",156],[4,"Result",157],[15,"isize"],[4,"Option",158],[3,"String",159],[3,"TypeId",160],[15,"i32"],[15,"never"],[4,"c_void",161],[3,"MmapProtection",38],[3,"MmapFlags",38],[6,"c_int",161],[15,"u8"],[15,"slice"],[15,"usize"],[6,"c_ssize_t",161],[6,"c_size_t",161],[8,"IntoIterator",162],[4,"Syscall",38],[15,"str"],[3,"Iter",163],[3,"IterNames",163]],"b":[[19,"impl-Debug-for-Errno"],[20,"impl-Display-for-Errno"],[62,"impl-MmapProtection"],[63,"impl-Flags-for-MmapProtection"],[64,"impl-MmapFlags"],[65,"impl-Flags-for-MmapFlags"],[87,"impl-Octal-for-MmapProtection"],[88,"impl-Binary-for-MmapProtection"],[89,"impl-UpperHex-for-MmapProtection"],[90,"impl-LowerHex-for-MmapProtection"],[91,"impl-UpperHex-for-MmapFlags"],[92,"impl-Debug-for-MmapFlags"],[93,"impl-Binary-for-MmapFlags"],[94,"impl-Octal-for-MmapFlags"],[95,"impl-LowerHex-for-MmapFlags"],[101,"impl-MmapProtection"],[102,"impl-Flags-for-MmapProtection"],[103,"impl-MmapFlags"],[104,"impl-Flags-for-MmapFlags"]]},\
"oak_restricted_kernel_sdk":{"doc":"","t":"IIDDDDIDLLLLLLLLLLLLLLLLLLLLLLLLLLLKLKLLLLLLLLLKLLLLLLLLLLLLLLLLLLL","n":["EncryptionKeyHandle","EvidenceProvider","FileDescriptorChannel","InstanceEncryptionKeyHandle","InstanceEvidenceProvider","InstanceSigner","Signer","StderrLogger","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","create","create","create","default","enabled","flush","flush","from","from","from","from","from","generate_recipient_context","generate_session_keys","generate_session_keys","get_evidence","get_evidence","into","into","into","into","into","log","new","read_exact","sign","sign","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","write_all"],"q":[[0,"oak_restricted_kernel_sdk"],[67,"anyhow"],[68,"log"],[69,"oak_crypto::hpke"],[70,"anyhow"],[71,"oak_dice::evidence"],[72,"log"],[73,"core::any"]],"d":["Generate <code>SessionKeys</code> for the provided public key.","Exposes the ability to read the Attestation Evidence. It …","Channel that communicates over a file descriptor.","<code>EncryptionKeyHandle</code> implementation that using the instance…","<code>EvidenceProvider</code> implementation that exposes the instance…","<code>Signer</code> implementation that using the instance’s evidence …","Sign the provided message bytestring using a signing …","","","","","","","","","","","","","","","","","","","Constructs a new FileDescriptorChannel that assumes we’…","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Attempt to sign the provided message bytestring using a …","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,6,4,7,1,2,6,4,7,1,2,1,2,1,2,4,1,2,6,7,6,7,6,4,7,1,2,2,20,2,21,4,6,4,7,1,2,7,6,6,22,1,1,2,6,4,7,1,2,6,4,7,1,2,6,4,7,1,2,6],"f":[0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[1,1],[2,2],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[],[[5,[4]]]],[[],[[5,[1]]]],[[],[[5,[2]]]],[[],6],[[7,8],9],[6,[[5,[3]]]],[7,3],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[-1,[11,[10]]],[[14,[12,13]]],[]],[[-1,[11,[10]]],[[14,[12,13]]],[]],[[2,[11,[10]]],[[5,[12]]]],[-1,15,[]],[4,15],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[7,16],3],[17,6],[[6,[11,[10]]],[[5,[3]]]],[[-1,[11,[10]]],[[5,[18]]],[]],[[1,[11,[10]]],[[5,[18]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,19,[]],[-1,19,[]],[-1,19,[]],[-1,19,[]],[-1,19,[]],[[6,[11,[10]]],[[5,[3]]]]],"c":[],"p":[[3,"InstanceSigner",0],[3,"InstanceEncryptionKeyHandle",0],[15,"tuple"],[3,"InstanceEvidenceProvider",0],[6,"Result",67],[3,"FileDescriptorChannel",0],[3,"StderrLogger",0],[3,"Metadata",68],[15,"bool"],[15,"u8"],[15,"slice"],[3,"RecipientContext",69],[3,"Error",67],[4,"Result",70],[3,"Evidence",71],[3,"Record",68],[15,"i32"],[3,"Signature",72],[3,"TypeId",73],[8,"EncryptionKeyHandle",0],[8,"EvidenceProvider",0],[8,"Signer",0]],"b":[]},\
"oak_sev_guest":{"doc":"Rust wrappers for instructions and structs for use by …","t":"IAAAAAAAAAOAADDLLLLLLLLLLLLLLRRDDDDLLLLLLLLMMMMMMMMLLLLLLLLLLMLLLLMLLLLLLLLLLLLLMMDLLLLLLLLLLLSSRRDDSSSSSSSSDSSLLLLLLLLLLLLLLLLLLLLLMLLLLMLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLMMMMMLLLLLLMLLMMMMLLLLLLLLLLLLMMMMNNNNENDDDDDERRRNNSNENDDNNSRSSDDDDSNNNNNNNNNDNDNEDERSSIENNDDSNNENEDSSSENNSSDNNNNNNNNNMMMLLLMMMMLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLMMMMLLLLLLMMMMMMLLLMLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLMMMMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLMMMMMMLLLLLLLLLLLLLMMMMMLLLMMMMMMMMMMLLLLLMMLLMMMLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMSSNNNENNNEDSDNNENESNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMFLFFLLLLMLLLLLLLLLLLLLLLLLLLLLLLLFMDLLMLLLOMMMMMMMMMMLLLNNDDIEIEINNDGLLLLLLLLLLLLLLLLLLLLLLLKLLLKLLLLLLLLLLLLLKLLLLKLLLLLLLLLSSNDDEDDSNNNNNDNNNDDSNNRSEDDNSSSSEDDSSSSSSSRDDDENNDDEDSSSSLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFFLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFFFFFFMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMLLLLLMMMFLLFLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMNNDERRRDMLLLLLLMLLLLLLLLMMMMMLLLLLLLLLMLLLLMMMMMMMMMMMMMMMDRRDDMMLLLLLLMMMFMMMMMMMMLLLMMMMMMMMMMMMMMLLLMMMLLLMMMMMMMMMMMMMMMMMMMMMLLLMMMMMMMMMMLLMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMLLLLLLMLLLMMMMMMMMMMMMMMM","n":["Translator","ap_jump_table","cpuid","crypto","ghcb","guest","instructions","interrupts","io","msr","mutable_interrupt_handler_with_error_code","secrets","vmsa","ApJumpTable","ApResetAddress","borrow","borrow","borrow_mut","borrow_mut","from","from","into","into","try_from","try_from","try_into","try_into","type_id","type_id","CPUID_COUNT_MAX","CPUID_PAGE_SIZE","CpuidFunction","CpuidInput","CpuidOutput","CpuidPage","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","count","cpuid_data","eax","eax","ebx","ecx","ecx","edx","eq","fmt","fmt","fmt","fmt","from","from","from","from","from","input","into","into","into","into","output","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","validate","xcr0","xss","GuestMessageEncryptor","borrow","borrow_mut","decrypt_message","encrypt_message","from","into","new","new_with_sequence_number","try_from","try_into","type_id","CPL","DR7","GHCB_PAGE_SIZE","GHCB_PROTOCOL_VERSION","Ghcb","GhcbProtocol","RAX","RBX","RCX","RDX","SW_EXIT_CODE","SW_EXIT_INFO_1","SW_EXIT_INFO_2","SW_SCRATCH","ValidBitmap","XCR0","XSS","all","as_mut","as_mut","as_ref","as_ref","bitand","bitand_assign","bitor","bitor_assign","bits","bits","bitxor","bitxor_assign","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","complement","contains","cpl","default","default","difference","do_guest_message_request","dr7","empty","extend","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from_bits","from_bits_retain","from_bits_retain","from_bits_truncate","from_iter","from_name","get_ap_jump_table","get_cpuid","get_gpa","ghcb_usage","insert","intersection","intersects","into","into","into","into_iter","io_read_u16","io_read_u32","io_read_u8","io_write_u16","io_write_u32","io_write_u8","is_all","is_empty","iter","iter_names","mmio_read_u32","mmio_write_u32","msr_read","msr_write","new","new","not","protocol_version","rax","rbx","rcx","rdx","register_with_hypervisor","remove","reset","reset","set","set_ap_jump_table","shared_buffer","sub","sub_assign","sw_exit_code","sw_exit_info_1","sw_exit_info_2","sw_scratch","symmetric_difference","toggle","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","union","valid_bitmap","x87_state_gpa","xcr0","xss","AbsorbNomaRequest","AbsorbNomaResponse","AbsorbRequest","AbsorbResponse","AeadAlgorithm","Aes256Gcm","AttestationReport","AttestationReportData","AttestationRequest","AttestationResponse","AuthenticatedHeader","AuthorKey","CURRENT_ATTESTATION_VERSION","CURRENT_HEADER_VERSION","CURRENT_MESSAGE_VERSION","CpuidRequest","CpuidResponse","DEBUG","Default","EccCurve","EcdsaP384Sha384","EcdsaPublicKey","EcdsaSignature","ExportRequest","ExportResponse","FAMILY_ID","GUEST_MESSAGE_SIZE","GUEST_POLICY","GUEST_SVN","GuestFieldFlags","GuestMessage","GuestMessageHeader","GuestPolicy","IMAGE_ID","ImportRequest","ImportResponse","Invalid","Invalid","Invalid","Invalid","InvalidKeySelection","InvalidParams","InvalidParams","KeyRequest","KeyRequest","KeyResponse","KeyResponse","KeySelect","KeySelectIter","KeyStatus","MAX_PAYLOAD_SIZE","MEASUREMENT","MIGRATE_MA","Message","MessageType","No","P384","PlatformInfo","PolicyFlags","RESERVED","ReportRequest","ReportResponse","ReportStatus","Reserved","RootKeySelect","RootKeySelectIter","SINGLE_SOCKET","SMT","SMT_EN","SigningAlgorithm","Success","Success","TCB_VERSION","TSME_EN","TcbVersion","TccInfoReqsponse","TscInfoRequest","VCEK","VCEK","VLEK","VMRK","VmrkRequest","VmrkResponse","Yes","abi_major","abi_minor","algorithm","all","all","all","auth_header","auth_tag","author_key_digest","author_key_en","bitand","bitand","bitand","bitand_assign","bitand_assign","bitand_assign","bitor","bitor","bitor","bitor_assign","bitor_assign","bitor_assign","bits","bits","bits","bits","bits","bits","bitxor","bitxor","bitxor","bitxor_assign","bitxor_assign","bitxor_assign","boot_loader","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","chip_id","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","committed_build","committed_major","committed_minor","committed_tcb","complement","complement","complement","contains","contains","contains","current_build","current_major","current_minor","current_tcb","curve","data","default","default","default","derived_key","difference","difference","difference","empty","empty","empty","eq","eq","eq","eq","extend","extend","extend","family_id","flags","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_bits","from_bits","from_bits","from_bits_retain","from_bits_retain","from_bits_retain","from_bits_retain","from_bits_retain","from_bits_retain","from_bits_truncate","from_bits_truncate","from_bits_truncate","from_iter","from_iter","from_iter","from_name","from_name","from_name","from_repr","from_repr","from_repr","from_repr","from_repr","from_repr","from_repr","from_repr","from_repr","get_algorithm","get_author_key_en","get_flags","get_guest_field_select_flags","get_key_select","get_message_type","get_message_type","get_message_type","get_message_type","get_message_type","get_message_type","get_platform_info","get_root_key_select","get_signature_algo","get_status","get_status","guest_field_select","guest_svn","guest_svn","header","header_size","header_version","host_data","id_key_digest","image_id","insert","insert","insert","intersection","intersection","intersection","intersects","intersects","intersects","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","is_all","is_all","is_all","is_empty","is_empty","is_empty","iter","iter","iter","iter","iter","iter_names","iter_names","iter_names","launch_tcb","len","len","measurement","message_size","message_type","message_version","message_vmpck","microcode","new","new","new","new","next","next","next_back","next_back","not","not","not","nth","nth","payload","platform_info","policy","r","r","remove","remove","remove","report","report_data","report_data","report_id","report_id_ma","report_size","reported_tcb","s","s","sequence_number","set","set","set","set_key_select","set_root_key_select","signature","signature_algo","size_hint","size_hint","snp","status","status","sub","sub","sub","sub_assign","sub_assign","sub_assign","symmetric_difference","symmetric_difference","symmetric_difference","tcb_version","tee","to_owned","to_owned","to_owned","to_owned","toggle","toggle","toggle","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","union","union","union","validate","validate","validate","validate","validate","validate","validate","validate","validate_format","version","vmpl","vmpl","vmpl","EXECUTE_SUPERVISOR","EXECUTE_USER","FailInput","FailPermission","FailSizeMismatch","InstructionError","No","Page2MiB","Page4KiB","PageSize","PermissionMask","READ","RmpPermission","Unvalidated","Validated","Validation","ValidationStatusNotUpdated","Vmsa","WRITE","Yes","all","bitand","bitand_assign","bitor","bitor_assign","bits","bits","bitxor","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","complement","contains","difference","empty","eq","eq","eq","eq","extend","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from_bits","from_bits_retain","from_bits_retain","from_bits_truncate","from_iter","from_name","from_repr","from_repr","from_repr","from_repr","insert","intersection","intersects","into","into","into","into","into","into","into_iter","is_all","is_empty","iter","iter_names","not","perm_mask","pvalidate","remove","rmpadjust","rmpquery","set","sub","sub_assign","symmetric_difference","target_vmpl","to_owned","to_owned","to_owned","to_owned","toggle","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","union","vmgexit","vmsa","MutableInterruptStackFrame","borrow","borrow_mut","cs","fmt","from","into","mutable_interrupt_handler_with_error_code","rax","rbx","rcx","rdi","rdx","rflags","rip","rsi","rsp","ss","try_from","try_into","type_id","Ghcb","Ghcb","GhcbIoFactory","GhcbIoPort","IoPortFactory","PortFactoryWrapper","PortReader","PortWrapper","PortWriter","Raw","Raw","RawIoPortFactory","StaticGhcbIoPort","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","from","from","from","from","from","into","into","into","into","into","new","new_ghcb","new_raw","new_reader","new_reader","new_reader","new_reader","new_writer","new_writer","new_writer","new_writer","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_read","try_read","try_read","try_read","try_read","try_write","try_write","try_write","try_write","try_write","type_id","type_id","type_id","type_id","type_id","ALTERNATE_INJECTION_ENABLED","AP_CREATION","AddressNotAligned","ApResetHoldRequest","ApResetHoldResponse","CpuidRegister","CpuidRequest","CpuidResponse","DEBUG_SWAP_ENABLED","Eax","Ebx","Ecx","Edx","General","GhcbGpa","GhcbLocationNotAccepted","GhcbProtocolVersion","GhcbResponseLocationNotMatchingRequest","HypervisorFeatureSupportRequest","HypervisorFeatureSupportResponse","INSTRUCTION_BASED_SAMPLING_ENABLED","InvalidResponse","InvalidValue","NO_PREFERRED_GHCB_LOCATION","PREVENT_HOST_IBS_ENABLED","PageAssignment","PreferredGhcbGpaRequest","PreferredGhcbGpaResponse","Private","REFLECT_VC_ENABLED","RESTRICTED_INJECTION","RESTRICTED_INJECTION_ENABLED","RESTRICTED_INJECTION_TIMER","RegisterGhcbGpaError","RegisterGhcbGpaRequest","RegisterGhcbGpaResponse","SECURE_TSC_ENABLED","SEV_ENABLED","SEV_ES_ENABLED","SEV_SNP","SMT_PROTECTION_ENABLED","SNP_ACTIVE","SNP_BTB_ISOLATION_ENABLED","SUPPORTED_PROTOCOL_VERSION","SevInfoRequest","SevInfoResponse","SevStatus","SevStatusError","Shared","SnpFeatureNotSupported","SnpPageStateChangeRequest","SnpPageStateChangeResponse","TerminationReason","TerminationRequest","VMGEXIT_PARAMETER_ENABLED","VMPL_SSS_ENABLED","VMSA_REG_PROT_ENABLED","VTOM_ENABLED","all","all","ap_reset_hold","as_error_source","as_error_source","backtrace","backtrace","bitand","bitand","bitand_assign","bitand_assign","bitor","bitor","bitor_assign","bitor_assign","bits","bits","bits","bits","bitxor","bitxor","bitxor_assign","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cause","cause","change_snp_page_state","change_snp_state_for_frame","clone","clone","clone","clone_into","clone_into","clone_into","complement","complement","contains","contains","default","default","description","description","difference","difference","empty","empty","encryption_bit","eq","eq","eq","extend","extend","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_bits","from_bits","from_bits_retain","from_bits_retain","from_bits_retain","from_bits_retain","from_bits_truncate","from_bits_truncate","from_iter","from_iter","from_name","from_name","from_repr","from_repr","get_cpuid","get_cpuid_for_vc_exception","get_hypervisor_feature_support","get_preferred_ghcb_location","get_sev_info","get_sev_status","ghcb_gpa","insert","insert","intersection","intersection","intersects","intersects","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","is_all","is_all","is_empty","is_empty","iter","iter","iter_names","iter_names","leaf","max_protocol_version","min_protocol_version","new","new","new","not","not","reason","register","register","register_ghcb_location","remove","remove","request_termination","set","set","set_ghcb_address_and_exit","source","source","sub","sub","sub_assign","sub_assign","symmetric_difference","symmetric_difference","to_owned","to_owned","to_owned","to_string","to_string","toggle","toggle","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","union","union","value","response_ghcb_gpa","Disabled","Enabled","GuestReservedArea","Imi","SECRETS_PAGE_MAX_VERSION","SECRETS_PAGE_MIN_VERSION","SECRETS_PAGE_SIZE","SecretsPage","ap_jump_table_pa","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","fms","fmt","fmt","fmt","from","from","from","from_repr","get_imi_en","gosv","guest_area_0","guest_area_1","guest_usage","imi_en","into","into","into","try_from","try_from","try_from","try_into","try_into","try_into","tsc_factor","type_id","type_id","type_id","validate","version","version","vmpck_0","vmpck_1","vmpck_2","vmpck_3","vmpl0_guest_seq_high","vmpl0_guest_seq_low","vmpl1_guest_seq_high","vmpl1_guest_seq_low","vmpl2_guest_seq_high","vmpl2_guest_seq_low","vmpl3_guest_seq_high","vmpl3_guest_seq_low","vmsa_tweak_bitmap","SegmentRegister","VMSA_PAGE_SIZE","VMSA_SIZE","Vmsa","VmsaPage","attributes","base","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","bp_ibs_tgt_rip","br_from","br_to","calculate_rdx_from_fms","cpl","cr0","cr2","cr3","cr4","cs","cstar","dbgctl","default","default","default","dr0","dr0_addr_mask","dr1","dr1_addr_mask","dr2","dr2_addr_mask","dr3","dr3_addr_mask","dr6","dr7","ds","efer","es","event_inj","fmt","fmt","fmt","fpreg_x87","fpreg_xmm","fpreg_ymm","from","from","from","fs","g_pat","gdtr","gs","guest_exit_code","guest_exit_info_1","guest_exit_info_2","guest_exit_int_info","guest_nrip","guest_tsc_offset","guest_tsc_scale","ibs_dc_lin_addr","ibs_fetch_ctl","ibs_fetch_lin_addr","ibs_op_ctl","ibs_op_data","ibs_op_data2","ibs_op_data3","ibs_op_rop","ic_ibs_extd_ctl","idtr","into","into","into","isst_addr","kernel_gs_base","last_excp_from","last_excp_to","lbr_select","lbr_stack_state","ldtr","limit","lstar","mxcsr","new","new_vcpu_boot","pcpu_id","pkru","pl0_ssp","pl1_ssp","pl2_ssp","pl3_ssp","r10","r11","r12","r13","r14","r15","r8","r9","rax","rbp","rbx","rcx","rdi","rdx","reg_prot_nonce","rflags","rip","rsi","rsp","s_cet","selector","sev_features","sfmask","ss","ssp","star","sysenter_cs","sysenter_eip","sysenter_esp","tlb_id","tr","try_from","try_from","try_from","try_into","try_into","try_into","tsc_aux","type_id","type_id","type_id","u_cet","vintr_ctrl","virtual_tom","vmpl","vmsa","x87_cs","x87_dp","x87_ds","x87_fcw","x87_fop","x87_fsw","x87_ftw","x87_rip","xcr0","xss"],"q":[[0,"oak_sev_guest"],[13,"oak_sev_guest::ap_jump_table"],[29,"oak_sev_guest::cpuid"],[82,"oak_sev_guest::crypto"],[94,"oak_sev_guest::ghcb"],[217,"oak_sev_guest::guest"],[771,"oak_sev_guest::instructions"],[906,"oak_sev_guest::interrupts"],[927,"oak_sev_guest::io"],[996,"oak_sev_guest::msr"],[1356,"oak_sev_guest::msr::RegisterGhcbGpaError"],[1357,"oak_sev_guest::secrets"],[1415,"oak_sev_guest::vmsa"],[1564,"core::result"],[1565,"core::any"],[1566,"core::fmt"],[1567,"core::fmt"],[1568,"zerocopy"],[1569,"core::convert"],[1570,"x86_64::addr"],[1571,"core::iter::traits::collect"],[1572,"core::option"],[1573,"bitflags::iter"],[1574,"bitflags::iter"],[1575,"lock_api::mutex"],[1576,"x86_64::instructions::port"],[1577,"snafu::no_std_error"],[1578,"snafu::backtrace_impl"],[1579,"x86_64::structures::paging::page"],[1580,"x86_64::structures::paging::frame"],[1581,"alloc::string"]],"d":["Memory address translation functions.","","This module contains structs that can be used to interpret …","This module provides an optional implementation for …","This module contains an implementation of the …","Utilities for creating and processing SNP Guest Request …","Rust instruction wrappers for managing page state and …","Utilities for building interrupt handlers that need to …","","Rust implementations of the AMD SEV-SNP GHCB MSR protocol.","","This module contains structs that can be used to interpret …","This module provides an implementation of the State Save …","AP Jump Table.","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","The maximum number of CPUID functions that can be included …","The size of the CPUID page.","The CPUID function result of an invocation for a specific …","The required input valus for invoking CPUID.","The resulting register values after invoking CPUID.","Representation of the CPUID page.","","","","","","","","","The number of CPUID function results included in the page. …","The CPUID function results.","The input value of the EAX register, which represents the …","The EAX register output from calling CPUID.","The EBX register output from calling CPUID.","The input value of the ECX register, which represents the …","The ECX register output from calling CPUID.","The EDX register output from calling CPUID.","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","The input values when CPUID was invoked.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","The resulting register values when CPUID was invoked.","","","","","","","","","","","","","Checks that the count is less than the maximum allowed …","The input value of the XCR0 extended control register.","The value of the IA32_XSS model-specific register.","Wrapper for encrypting and decrypting guest messages.","","","Extracts a decrypted message from an encrypted <code>GuestMessage</code>…","Creates an encrypted payload from the provided message and …","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Creates a new instance.","Creates a new instance with a specific sequence number.","","","","","","The size of the GHCB page.","The version of the GHCB protocol and page layout that we …","The guest-host communications block.","Implementation of the GHCB protocol using the wrapped GHCB …","","","","","","","","","Flags indicating which fields in a specific GHCB instance …","","","Get a flags value with all known bits set.","","","","","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","","Get the underlying bits value.","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","","","","","","The bitwise negation (<code>!</code>) of the bits in a flags value, …","Whether all set bits in a source flags value are also set …","The current privilege level of the executing code.","","","The intersection of a source flags value with the …","Sends a guest request message to the Platform Secure …","The value of the DR7 debug register.","Get a flags value with all bits unset.","The bitwise or (<code>|</code>) of the bits in each flags value.","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Convert from a bits value.","Convert from a bits value exactly.","","Convert from a bits value, unsetting any unknown bits.","The bitwise or (<code>|</code>) of the bits in each flags value.","Get a flags value with the bits of a flag with the given …","","Calls a CPUID function for the given input using the GHCB …","Gets the guest-physical address for the guest-hypervisor …","The usage of the GHCB page. A value of 0 indicates the …","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","Whether any set bits in a source flags value are also set …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Read a 16 bit number from an IO port via the IOIO protocol.","Read a 32 bit number from an IO port via the IOIO protocol.","Read an 8 bit number from an IO port via the IOIO protocol.","Writes a 16 bit number to an IO port via the IOIO protocol.","Writes a 32 bit number to an IO port via the IOIO protocol.","Writes an 8 bit number to an IO port via the IOIO protocol.","Whether all known bits in this flags value are set.","Whether all bits in this flags value are unset.","Yield a set of contained flags values.","Yield a set of contained named flags values.","Read a 32-bit value from a MMIO memory address via the …","Write a 32-bit value to a MMIO memory address via the MMIO …","Reads a value from the specified model-specific register.","Writes a value to the specified model-specific register.","","","The bitwise negation (<code>!</code>) of the bits in a flags value, …","The version of the GHCB protocol and page layout in use.","The value of the RAX register.","The value of the RBX register.","The value of the RCX register.","The value of the RDX register.","Registers the address of the GHCB with the hypervisor.","The intersection of a source flags value with the …","Resets all of the inner GHCB information to its original …","Zeroes the entire GHCB.","Call <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …","","Area that can be used as a shared buffer for communicating …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","Guest-controlled exit code.","Guest-controlled exit information 1.","Guest-controlled exit information 2.","Guest-controlled additional information.","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","","","","","","","","","The bitwise or (<code>|</code>) of the bits in two flags values.","Bitmap indicating which quadwords of the save state area …","The guest-physical address of the page that contains the …","Value of the XCR0 extended control register.","The value of the IA32_XSS model-specific reqister.","","","VM absorb request by a migration agent.","VM absorb response.","The AEAD algorithm used for encryption.","256-bit AES-GCM.","A signed attestation report.","The data contained in an attestation report.","Request for an attestation report.","Response containing the attestation report.","The authenticated subsection of the header used for an …","Whether the author key digest is included in the report.","The currently supported attestation report version number.","The currently supported header version number.","The currently supported message version number.","CPUID request.","CPUID response.","Debugging the guest is allowed.","Use VLEK if installed, otherwise use the VCEK.","The elliptic curve used.","ECDSA using curve P-384 with SHA-384.","An ECDSA public key.","An ECDSA signature.","VM export request. Used for VM migration.","VM export response. Used for VM migration.","The family ID provided in the ID block will be mixed into …","The size of a guest message, including the header and …","The guest policy will be mixed into the key.","The guest-provided SVN will be mixed into the key.","Flags indicating allowed policy options.","An encrypted guest message.","The header for an encrypted guest request message.","The required policy for a guest to run.","The image ID provided in the ID block will be mixed into …","VM import request. Used during VM migration, typically by …","VM import response. Used during VM migration.","Invalid encryption algorithm.","Invalid message type.","Invalid.","Invalid.","The key selection field was invalid.","The supplied parameters in the request was invalid.","The supplied parameters in the request was invalid.","Request for a derived key.","Request for a derived key.","Response containing the derived key.","Derived key response.","The selected key to use for key derivation.","An iterator over the variants of KeySelect","The status of the report response.","The maximum payload size.","The launch measurement of the VM will be mixed into the …","The guest can be associated with a migration agent.","","The type of message represented by the payload.","The author key digest is not present.","Curve P-384.","Information on the platform configuration.","Flags indicating allowed policy options.","Reserved, must always be 1.","Attestation report request.","Attestation report response.","The status of the report response.","Reserved.","The selected root key to use for key derivation.","An iterator over the variants of RootKeySelect","The guest can only be activated on a single socket.","Simulatneous multi-threading (SMT) is allowed.","Indicates that simulatneous multi-threading (SMT) is …","The signing algorithm used for the report signature.","Report was successfully generated.","Report was successfully generated.","The guest-provided TCB version will be mixed into the key.","Indicates that transparent secure memory encryption (TSME) …","The version of all the components in the Trusted Computing …","Timestamp counter information response.","","Use the Versioned Chip Endorsement Key (VCEK).","Use the Versioned Chip Endorsement Key (VCEK).","Use the Loaded Chip Endorsement Key (VLEK).","Use the Virtual Machine Root Key (VMRK) provided by the …","VMRK request. Provides the VM root key to use after …","VMRK response. Status of using the VM root key after …","The author key digest is present.","The minimum ABI major version required to launch the guest.","The minimum ABI minor version required to launch the guest.","The algorithm used to encrypt the payload.","Get a flags value with all known bits set.","Get a flags value with all known bits set.","Get a flags value with all known bits set.","The the sub-section of the header that is treated as …","The authentication tag for the payload and additional data.","The SHA-384 digest of the author public key used to …","The least significant bit indicates Whether the digest of …","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","","Get the underlying bits value.","Get the underlying bits value.","","Get the underlying bits value.","","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The current security version number (SVN) of the secure …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Identifier unique to the chip, unless the ID has been …","","","","","","","","","The build number of the committed secure firmware ABI …","The major number of the committed secure firmware ABI …","The minor number of the committed secure firmware ABI …","The committed TCB version.","The bitwise negation (<code>!</code>) of the bits in a flags value, …","The bitwise negation (<code>!</code>) of the bits in a flags value, …","The bitwise negation (<code>!</code>) of the bits in a flags value, …","Whether all set bits in a source flags value are also set …","Whether all set bits in a source flags value are also set …","Whether all set bits in a source flags value are also set …","The build number of the current secure firmware ABI …","The major number of the current secure firmware ABI …","The minor number of the current secure firmware ABI …","The current version of each of the components in the …","The curve for this public key.","The data contained in the report.","","","","The derived key if status is <code>KeyStatus::Success</code>.","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","Get a flags value with all bits unset.","Get a flags value with all bits unset.","Get a flags value with all bits unset.","","","","","The bitwise or (<code>|</code>) of the bits in each flags value.","The bitwise or (<code>|</code>) of the bits in each flags value.","The bitwise or (<code>|</code>) of the bits in each flags value.","The family ID provided at launch.","The allowed settings for the guest.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Convert from a bits value.","Convert from a bits value.","Convert from a bits value.","Convert from a bits value exactly.","","Convert from a bits value exactly.","","Convert from a bits value exactly.","","Convert from a bits value, unsetting any unknown bits.","Convert from a bits value, unsetting any unknown bits.","Convert from a bits value, unsetting any unknown bits.","The bitwise or (<code>|</code>) of the bits in each flags value.","The bitwise or (<code>|</code>) of the bits in each flags value.","The bitwise or (<code>|</code>) of the bits in each flags value.","Get a flags value with the bits of a flag with the given …","Get a flags value with the bits of a flag with the given …","Get a flags value with the bits of a flag with the given …","Try to create Self from the raw representation","Try to create Self from the raw representation","Try to create Self from the raw representation","Try to create Self from the raw representation","Try to create Self from the raw representation","Try to create Self from the raw representation","Try to create Self from the raw representation","Try to create Self from the raw representation","Try to create Self from the raw representation","Gets the algorithm field as an <code>AeadAlgorithm</code> enum if …","Gets the author key enabled field as an <code>AuthorKey</code> enum if …","Gets the flags field as a <code>PolicyFlags</code> representation if …","Gets the <code>guest_field_select</code> field as a <code>GuestFieldFlags</code> …","Gets bits 1 and 2 of the <code>key_select</code> field as a <code>KeySelect</code> …","","Gets the message type field as a <code>MessageType</code> enum if …","","","","","Gets the platform info field as a <code>PlatformInfo</code> …","Gets bit 0 of the <code>key_select</code> field as a <code>RootKeySelect</code> enum.","Gets the signing algorithm field as a <code>SigningAlgorithm</code> …","Gets the status field as a <code>KeyStatus</code> enum if possible.","Gets the status field as a <code>ReportStatus</code> enum if possible.","Mask indicating which guest data will be mixed into the …","The guest security version number (SVN) to mix into the …","The guest security version number.","The message header.","The size of the header in bytes.","The header version. Currently only version 1 is supported.","Custom data provided by the hypervisor at launch.","The SHA-384 digest of the ID public key used to sign the …","The image ID provided at launch.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","Whether any set bits in a source flags value are also set …","Whether any set bits in a source flags value are also set …","Whether any set bits in a source flags value are also set …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","Whether all known bits in this flags value are set.","Whether all known bits in this flags value are set.","Whether all known bits in this flags value are set.","Whether all bits in this flags value are unset.","Whether all bits in this flags value are unset.","Whether all bits in this flags value are unset.","","","Yield a set of contained flags values.","Yield a set of contained flags values.","Yield a set of contained flags values.","Yield a set of contained named flags values.","Yield a set of contained named flags values.","Yield a set of contained named flags values.","The value of the current TCB version when the guest was …","","","The measurement of the VM memory calculated at launch.","The size of the encrypted message payload in bytes.","The type of message that the payload represents.","The version of the message. Currently only version 1 is …","The ID of the VM communication key that was used to …","The lowest current patch level of all the CPU cores.","","","","","","","","","The bitwise negation (<code>!</code>) of the bits in a flags value, …","The bitwise negation (<code>!</code>) of the bits in a flags value, …","The bitwise negation (<code>!</code>) of the bits in a flags value, …","","","The encrypted payload.","Information about the platform.","The policy required by the guest VM to be launched.","The R component of this signature. The value is …","The R component of this public. The value is zero-extended …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The attestation report.","The custom data to be included in the attestation report.","The custom data provided in the attestation request.","The report ID of this guest.","The report ID of this guest’s migration agent.","The size of the report.","The reported TCB version that was used to generate the …","The S component of this signature. The value is …","The S component of this public key. The value is …","The message sequence number. This is used as the IV for …","Call <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …","Call <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …","Call <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …","Sets bits 1 and 2 of the <code>key_select</code> field.","Sets bit 0 of the <code>key_select</code> field.","The signature over the data.","The algorithm used to sign the report.","","","The current SVN of the SNP firmware.","The status of the operation.","The status of the operation.","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The TCB version to mix into the key.","The current SVN of the PSP operating system.","","","","","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","Checks that header is valid.","Checks that the authenticated header subsection is valid.","Checks that all reserved bytes are zero and that the …","Checks that all reserved bytes are zero and that the …","Checks that the report data is valid and the signature has …","Checks that fields with specific expected values or ranges …","Checks that the flags are valid and the reserved bytes are …","Checks that the reserved bytes are all zero.","Checks that the reserved bytes are all zero.","The version of the attestation report format.","The VM Protection Level (VMPL) to mix into the derived key.","The VM Protection Level (VMPL) to be used in the …","The VMPL value that was passed in the request.","Code in the page can be executed in rings 0..2.","Code in the page can be executed in ring 3.","The input parameters were invalid.","Insufficient permissions.","The page size does not match the page size entry in the …","The potential errors when calling the PVALIDATE or …","The page cannot be used as a VM save area.","The page is a 2MiB page.","The page is a 4KiB page.","The size of a memory page.","Permission mask used by the RMP.","The target VMPL can read the page.","Representation of the RMP permission used by the RMPADJUST …","The page is not validated.","The page is validated.","Whether a page is in the validated state or not.","The page validation status was not updated. This value is …","Whether the page can be used as a VM save area.","The target VMPL can write to the page.","The page can be used as a VM save area.","Get a flags value with all known bits set.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","","Get the underlying bits value.","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","","","","","","","","","","","","","","","","","","","","The bitwise negation (<code>!</code>) of the bits in a flags value, …","Whether all set bits in a source flags value are also set …","The intersection of a source flags value with the …","Get a flags value with all bits unset.","","","","","The bitwise or (<code>|</code>) of the bits in each flags value.","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Convert from a bits value.","","Convert from a bits value exactly.","Convert from a bits value, unsetting any unknown bits.","The bitwise or (<code>|</code>) of the bits in each flags value.","Get a flags value with the bits of a flag with the given …","Try to create Self from the raw representation","Try to create Self from the raw representation","Try to create Self from the raw representation","Try to create Self from the raw representation","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","Whether any set bits in a source flags value are also set …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Whether all known bits in this flags value are set.","Whether all bits in this flags value are unset.","Yield a set of contained flags values.","Yield a set of contained named flags values.","The bitwise negation (<code>!</code>) of the bits in a flags value, …","The bit mask specifying the permission.","Marks a page as validated or unvalidated in the RMP.","The intersection of a source flags value with the …","Adjusts the permissions of a page in the RMP.","Reads an RMP permission mask for a guest page.","Call <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The target VMPL to which the permission applies.","","","","","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","","","","","","","","","","","","","","","","","","The bitwise or (<code>|</code>) of the bits in two flags values.","Unconditionally exits from the guest to the hypervisor.","Whether this page can be used as a VM save area.","A reference to the interrupt stack frame will be passed as …","","","The backed-up value of the code segment selector.","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","The backed-up value of the RAX register.","The backed-up value of the RBX register.","The backed-up value of the RCX register.","The backed-up value of the RDI register.","The backed-up value of the RDX register.","The backed-up value CPU’s flags register.","The backed-up value of the instruction pointer when the …","The backed-up value of the RSI register.","The backed-up value of the stack pointer.","The backed-up value of the stack segment.","","","","","","A factory for creating port readers and writers that use …","GHCB-based wrapper for a single IO port.","Factory for instantiating IO port readers and writers.","Wrapper implementation that can either create IO ports …","Reader that can be used to read values from a port.","","Writer that can be used to write values to a port.","","","Factory for creating port reader and writers that perform …","An IO port reader and writer implementation that uses the …","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Creates a new IO port reader instance.","","","","Creates a new IO port writer instance.","","","","","","","","","","","","","","Tries to read from the port.","","","","","Tries to write a value to the port.","","","","","","","","","","Alternate injection is enabled for this guest.","The new AMD SEV-SNP feature for starting new Application …","GHCB must be 4KiB-aligned.","","","The register of interest from the result of executing …","A request to execute CPUID for a specific leaf and return …","A response from executing CPUID for a specific leaf. Only …","Debug Register Swapping is enabled for this guest.","","","","","Non-specific termination request.","Contains the guest-physical address of the GHCB page. The …","","The supported range for the GHCB protocol version does not …","","A request for the hypervisor’s supported features.","Flags indicating which features are supported by the …","The gust was run with Instruction-Based Virtualization …","","","Value indicating that the hypervisor does not have a …","The Prevent Host IBS feature is enabled for this guest.","Whether a memory page is private to the guest, or shared …","A request for the hypervisor’s preferred location for …","The response containing the preferred location of the GHCB.","","Reflect-VC is enabled for this guest.","Restricted interrrupt injection is supported.","Restricted Injection is enabled for this guest.","Timer support is available if restricted interrupt …","","Request to register a guest-physical address for the GHCB …","The response containing the result of the GHCB …","Secure Timestamp Counter is enabled for this guest.","SEV is enabled for this guest.","SEV-ES is enabled for this guest.","AMD SEV-SNP is supported.","SMT Protection is enabled for this guest.","SEV-SNP is active for this guest.","SNP Branch Target Buffer Isolation is enabled for this …","The version of the GHCB MSR protocol supported by this …","A request for information about the supported GHCB MSR …","Response from the hypervisor about the encryption bit and …","Flags indicating which SEV features are active.","","","The SEV-SNP features supported by the hypervisor is not …","Request to change a memory page from shared to private or …","The response containing the result of the SNP Page State …","The reason for requesting termination from the hypervisor.","Request for the hypervisor to terminate the guest.","VMGEXIT Parameter is enabled for this guest.aes_gcm","VMPL SSS (Supervisor Shadow Stack) is enabled for this …","VMSA Register Protection is enabled for this guest.","Virtual Top-of-Memory is enabled for this guest.","Get a flags value with all known bits set.","Get a flags value with all known bits set.","","","","","","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","","Get the underlying bits value.","Get the underlying bits value.","","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Requests a change of state for a page to be either private …","Changes the SNP page state assignments in the RMP for a …","","","","","","","The bitwise negation (<code>!</code>) of the bits in a flags value, …","The bitwise negation (<code>!</code>) of the bits in a flags value, …","Whether all set bits in a source flags value are also set …","Whether all set bits in a source flags value are also set …","","","","","The intersection of a source flags value with the …","The intersection of a source flags value with the …","Get a flags value with all bits unset.","Get a flags value with all bits unset.","The page table bit used for inidicating that a page is …","","","","The bitwise or (<code>|</code>) of the bits in each flags value.","The bitwise or (<code>|</code>) of the bits in each flags value.","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Convert from a bits value.","Convert from a bits value.","","Convert from a bits value exactly.","","Convert from a bits value exactly.","Convert from a bits value, unsetting any unknown bits.","Convert from a bits value, unsetting any unknown bits.","The bitwise or (<code>|</code>) of the bits in each flags value.","The bitwise or (<code>|</code>) of the bits in each flags value.","Get a flags value with the bits of a flag with the given …","Get a flags value with the bits of a flag with the given …","Try to create Self from the raw representation","Try to create Self from the raw representation","Gets the value of the specified register that was returned …","Gets the CPUID values for EAX, EBX, ECX and EDX and …","Requests a bitmap specifying the features supported by the …","Requests the hypervisor’s preferred location for the …","Gets information about the supported GHCB MSR protocol …","Gets the status of SEV features for the current guest.","The preferred guest-physical address for the GHCB.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","Whether any set bits in a source flags value are also set …","Whether any set bits in a source flags value are also set …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Whether all known bits in this flags value are set.","Whether all known bits in this flags value are set.","Whether all bits in this flags value are unset.","Whether all bits in this flags value are unset.","Yield a set of contained flags values.","Yield a set of contained flags values.","Yield a set of contained named flags values.","Yield a set of contained named flags values.","The CPUID leaf to request. Sub-leafs are not supported by …","The maximum version of the GHCB MSR protocol supported by …","The minimum version of the GHCB MSR protocol supported by …","","","","The bitwise negation (<code>!</code>) of the bits in a flags value, …","The bitwise negation (<code>!</code>) of the bits in a flags value, …","","The register to return from the result. This protocol only …","The register that the value represents.","Registers the location of the GHCB page for the current …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","Requests termination from the hypervisor.","Call <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …","Call <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …","Sets the address of the GHCB page before exiting to the …","","","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","","","","","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The value of the requested register after executing CPUID.","","The initial migration image is not enabled.","The initial migration image is enabled.","Representation of the Secrets Page Guest Reserved Area.","Whether an initial migration image is enabled.","The mmaximum version of the secrets pages that we expect …","The minimum version of the secrets pages that we expect to …","The size of the secrets page.","Representation of the secrets page.","AP Jump Table Physical Address","","","","","","","The family, model and stepping of the CPU as reported in …","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Try to create Self from the raw representation","Gets the IMI enabled field as and <code>Imi</code> enum if possible.","Guest-OS-visible workarounds provided by the hypervisor …","Area reserved for guest OS use.","Area reserved for guest OS use.","Guest Usage","The least significant bit indicates whether an initial …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","Scaling factor that can be used for calculating the real …","","","","Checks that version is the expected value, …","(Rev 2.01+) Version (1 = 2.01) Otherwise: Reserved, MBZ","The version of the secrets page.","VM-platform communication key 0. AES key used for …","VM-platform communication key 1. AES key used for …","VM-platform communication key 2. AES key used for …","VM-platform communication key 3. AES key used for …","(Rev 2.01+) VMPL0 Current Guest Message Sequence Number …","VMPL0 Current Guest Message Sequence Number [31:0]","(Rev 2.01+) VMPL1 Current Guest Message Sequence Number …","VMPL1 Current Guest Message Sequence Number [31:0]","(Rev 2.01+) VMPL2 Current Guest Message Sequence Number …","VMPL2 Current Guest Message Sequence Number [31:0]","(Rev 2.01+) VMPL3 Current Guest Message Sequence Number …","VMPL3 Current Guest Message Sequence Number [31:0]","Bitmap indicating which quadwords of the VM Save Area have …","Representation of a segment register in 64-bit mode.","","","The State Save Area used for SEV-ES and SEV-SNP.","The page containing the Save State Area used for SEV-ES …","The segment attributes. The meaning of the attribute bits …","The base address of the segment.","","","","","","","The value of the guest’s IbsBrTarget MSR.","The value of the guest’s LastBranchFromIP MSR.","The value of the guest’s LastBranchToIP MSR.","When the CPU is reset, the value of RDX is set to the same …","The current protection level (ring).","Control Register 0.","The CR2 control register.","Control Register 3.","Control Register 4.","The code segment.","The target instruction pointer when making a syscall in …","The value of the guest’s DebugCTL MSR.","","","","Debug register 0.","Debug register 0 address mask.","Debug register 1.","Debug register 1 address mask.","Debug register 2.","Debug register 2 address mask.","Debug register 3.","Debug register 3 address mask.","Debug register 6.","Debug register 7.","The data segment.","The extended feature enable register.","The extra segment.","Field used for injecting events into the guest.","","","","The X87 register state.","The XMM register state.","The YMM register state.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","General purpose segment.","The page attribute table for the guest.","Pointer to the global descriptor table.","General purpose segment.","The exit code for automatic exits.","The info 1 value for automatic exits.","The info 2 value for automatic exits.","The interrupt info value for automatic exits.","The next instruction pointer for automatic exits.","The guests time stamp counter offset.","The guest’s time stamp counter scaling factor.","The value of the guest’s IbsDcLinAd MSR.","The value of the guest’s IbsFetchCtl MSR.","The value of the guest’s IbsFetchCtl MSR.","The value of the guest’s IbsOfCtl MSR.","The value of the guest’s IbsOpData1 MSR.","The value of the guest’s IbsOpData2 MSR.","The value of the guest’s IbsOpData3 MSR.","The value of the guest’s IbsOpRip MSR.","The value of the guest’s IbsFetchExtdCtl MSR.","Pointer to the interrupt descriptor table.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","The address of the interrupt shadow stack.","Register used by the SWAPGS instruction to swap the base …","The value of the guest’s LastIntFromIP MSR.","The value of the guest’s LastIntToIP MSR.","The value of the guest’s LastBranchStackSelect MSR.","The last branch record stack state.","Pointer to the local descriptor table.","The segment limit.","The target instruction pointer when making a syscall in …","The Media eXtensions Control and Status Register.","","Creates a new instance of the VMSA that represents the …","Used to control flushing of the guest TLB. Writing 0 to …","The protect keys rights register.","Shadow stack pointer for ring 0.","Shadow stack pointer for ring 1.","Shadow stack pointer for ring 2.","Shadow stack pointer for ring 3.","The R10 register.","The R11 register.","The R12 register.","The R13 register.","The R14 register.","The R14 register.","The R8 register.","The R9 register.","The RAX register.","The RBP register.","The RBX register.","The RCX register.","The RDI register.","The RDX register.","Nonce used when VMSA register protection is enabled.","The 64-bit flags register.","The instruction pointer.","The RSI register.","The stack pointer.","Shadow stack MSR for supervisor mode settings.","The segment selector.","The guest-controlled SEV features that are selected.","The syscall flag mask.","The stack segment.","The shadow stack pointer.","The target address, code segment and stack segment when …","The code segment when using SYSENTER or SYSEXIT in legacy …","The instruction pointer when using SYSENTER or SYSEXIT in …","The stack pointer when using SYSENTER or SYSEXIT in legacy …","Used by the hardware to track TLB information for the …","Pointer to a valid task state secgement in the global …","","","","","","","Additional information read by the RDTSC instruction.","","","","Shadow stack MSR for user mode settings.","The guest-controlled interrupt injection control settings.","The virtual top-of-memory setting for the guest.","The current VM protection level.","","The X87 floating point code segment.","The X87 floating point data pointer.","The X87 floating point data segment.","The X87 floating point control word.","The X87 floating point opcode.","The X87 floating point status word.","The X87 floating point tag word.","The X87 instruction pointer.","The XCR0 extended control register.","The IA32_XSS machine-specific register."],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,108,109,108,109,108,109,108,109,108,109,108,109,108,109,0,0,0,0,0,0,5,3,8,9,5,3,8,9,9,9,3,8,8,3,8,8,3,5,3,8,9,5,3,3,8,9,5,5,3,8,9,5,5,3,8,9,5,3,8,9,5,3,8,9,9,3,3,0,13,13,13,13,13,13,13,13,13,13,13,21,21,0,0,0,0,21,21,21,21,21,21,21,21,0,21,21,21,22,23,22,23,21,21,21,21,21,21,21,21,22,23,21,22,23,21,21,21,23,23,21,21,22,23,21,21,23,21,21,21,21,21,22,23,21,21,21,21,21,21,21,22,22,22,23,21,21,21,22,23,21,21,22,22,22,22,22,22,21,21,21,21,22,22,22,22,22,23,21,23,23,23,23,23,22,21,22,23,21,22,23,21,21,23,23,23,23,21,21,22,23,21,22,23,21,22,23,21,21,23,23,23,23,49,49,49,49,0,48,0,0,0,0,0,0,0,0,0,49,49,39,40,0,61,0,0,49,49,37,0,37,37,0,0,0,0,37,49,49,48,49,61,62,44,44,45,0,49,0,49,0,0,0,0,37,39,0,0,58,62,0,0,39,49,49,0,40,0,0,39,39,38,0,44,45,37,38,0,49,49,40,42,40,42,49,49,58,56,56,46,37,38,39,47,47,55,55,37,38,39,37,38,39,37,38,39,37,38,39,37,37,38,38,39,39,37,38,39,37,38,39,57,14,46,47,48,49,50,51,40,41,42,43,44,37,52,53,54,55,38,56,57,39,58,45,59,60,61,62,14,46,47,48,49,50,51,40,41,42,43,44,37,52,53,54,55,38,56,57,39,58,45,59,60,61,62,55,40,41,42,43,40,41,42,43,55,55,55,55,37,38,39,37,38,39,55,55,55,55,60,54,37,38,39,51,37,38,39,37,38,39,40,42,44,45,37,38,39,55,56,14,46,47,48,49,50,51,40,41,42,43,44,37,37,37,37,52,53,54,55,38,38,38,38,56,57,39,39,39,39,58,45,59,60,61,62,14,46,47,48,49,50,51,40,41,42,43,44,37,52,53,54,55,38,56,57,39,58,45,59,60,61,62,37,38,39,37,37,38,38,39,39,37,38,39,37,38,39,37,38,39,48,49,40,42,44,58,45,61,62,47,55,56,50,50,17,47,50,51,52,53,55,50,55,51,53,50,50,55,14,46,46,55,55,55,37,38,39,37,38,39,37,38,39,14,46,47,48,49,50,51,40,41,42,43,44,37,52,53,54,55,38,56,57,39,58,45,59,60,61,62,41,43,37,38,39,37,38,39,37,38,39,40,42,37,38,39,37,38,39,55,41,43,55,46,46,46,46,57,14,47,50,52,41,43,41,43,37,38,39,41,43,14,55,55,59,60,37,38,39,53,52,55,55,55,53,55,59,60,47,37,38,39,50,50,54,55,41,43,57,51,53,37,38,39,37,38,39,37,38,39,50,57,40,41,42,43,37,38,39,14,46,47,48,49,50,51,40,41,42,43,44,37,52,53,54,55,38,56,57,39,58,45,59,60,61,62,14,46,47,48,49,50,51,40,41,42,43,44,37,52,53,54,55,38,56,57,39,58,45,59,60,61,62,14,46,47,48,49,50,51,40,41,42,43,44,37,52,53,54,55,38,56,57,39,58,45,59,60,61,62,37,38,39,14,47,51,53,54,55,56,57,59,55,50,52,55,64,64,68,68,68,0,66,69,69,0,0,64,0,65,65,0,68,0,64,66,64,64,64,64,64,64,64,64,64,65,69,68,64,66,67,65,69,68,64,66,67,65,64,66,67,65,64,66,67,64,64,64,64,68,64,66,67,64,65,69,68,64,64,64,64,64,66,67,65,69,68,64,66,67,64,64,64,64,64,64,65,69,68,66,64,64,64,65,69,68,64,66,67,64,64,64,64,64,64,67,0,64,0,0,64,64,64,64,67,65,64,66,67,64,65,69,68,64,66,67,65,69,68,64,66,67,65,69,68,64,66,67,64,0,67,0,10,10,10,10,10,10,0,10,10,10,10,10,10,10,10,10,10,10,10,10,74,78,0,0,0,0,0,0,0,74,78,0,0,71,75,76,74,78,71,75,76,74,78,71,75,76,74,78,71,75,76,74,78,71,74,74,110,71,76,74,110,71,76,74,71,75,76,74,78,71,75,76,74,78,111,75,75,75,78,112,75,75,75,78,71,75,76,74,78,80,79,36,0,0,0,0,0,80,88,88,88,88,89,0,36,89,36,0,0,80,36,83,0,80,0,0,0,87,80,79,80,79,0,0,0,80,80,80,79,80,80,80,0,0,0,0,0,87,89,0,0,0,0,80,80,80,80,79,80,0,36,83,36,83,79,80,79,80,79,80,79,80,79,79,80,80,79,80,79,80,94,93,113,90,91,114,92,95,99,84,100,115,116,101,96,88,36,87,79,89,80,83,94,93,113,90,91,114,92,95,99,84,100,115,116,101,96,88,36,87,79,89,80,83,36,83,0,0,88,87,80,88,87,80,79,80,79,80,79,80,36,83,79,80,79,80,93,88,87,79,79,80,88,36,36,87,79,79,79,79,79,89,80,80,80,80,80,83,83,94,93,113,90,91,114,92,95,99,84,100,115,116,101,96,88,36,87,79,89,80,83,79,80,79,79,80,80,79,80,79,80,79,80,88,87,0,0,0,0,0,0,92,79,80,79,80,79,80,94,93,113,90,91,114,92,95,99,84,100,115,116,101,96,88,36,87,79,89,80,83,79,80,79,80,79,80,79,80,79,80,90,93,93,94,95,84,79,80,96,90,91,0,79,80,0,79,80,0,36,83,79,80,79,80,79,80,88,87,80,36,83,79,80,94,93,93,113,90,91,91,114,92,92,95,99,99,84,100,100,115,116,101,101,96,88,36,87,79,79,89,80,83,94,93,113,90,91,114,92,95,99,84,100,115,116,101,96,88,36,87,79,89,80,83,94,93,113,90,91,114,92,95,99,84,100,115,116,101,96,88,36,87,79,89,80,83,79,80,91,117,104,104,0,0,0,0,0,0,102,102,103,104,102,103,104,103,102,103,104,102,103,104,104,103,103,103,103,102,103,102,103,104,102,103,104,102,103,104,103,102,103,104,103,102,103,103,103,103,103,102,102,102,102,102,102,102,102,103,0,0,0,0,0,107,107,105,106,107,105,106,107,106,106,106,0,106,106,106,106,106,106,106,106,105,106,107,106,106,106,106,106,106,106,106,106,106,106,106,106,106,105,106,107,106,106,106,105,106,107,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,105,106,107,106,106,106,106,106,106,106,107,106,106,105,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,107,106,106,106,106,106,106,106,106,106,106,105,106,107,105,106,107,106,105,106,107,106,106,106,106,105,106,106,106,106,106,106,106,106,106,106],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,2,[]],[-1,2,[]],0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,[[3,3],4],[[5,6],7],[[3,6],7],[[8,6],7],[[9,6],7],[-1,-1,[]],[10,3],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,2,[]],[-1,2,[]],[-1,2,[]],[-1,2,[]],[9,[[1,[11,12]]]],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[[13,14],[[1,[-1,12]]],[15,16,17]],[[13,-1,14],[[1,[11,12]]],[15,16,17]],[-1,-1,[]],[-1,-2,[],[]],[[[19,[18]]],[[1,[13,12]]]],[[[19,[18]],20],[[1,[13,12]]]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,2,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],21],[[[22,[-1]]],[[22,[-1]]],[[24,[23]],[25,[23]],26]],[23,23],[[[22,[-1]]],[[22,[-1]]],[[24,[23]],[25,[23]],26]],[23,23],[[21,21],21],[[21,21],11],[[21,21],21],[[21,21],11],[21,27],[21,27],[[21,21],21],[[21,21],11],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[21,21],[[21,21],4],0,[[],23],[[],21],[[21,21],21],[[[22,[-1]],28,28],[[1,[11,12]]],[[24,[23]],[25,[23]],26]],0,[[],21],[[21,-1],11,29],[[23,6],7],[[21,6],7],[[21,6],7],[[21,6],7],[[21,6],7],[[21,6],7],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[27,[[30,[21]]]],[27,21],[27,21],[27,21],[-1,21,29],[12,[[30,[21]]]],[[[22,[-1]]],[[1,[28,12]]],[[24,[23]],[25,[23]],26]],[[[22,[-1]],3],[[1,[8,12]]],[[24,[23]],[25,[23]],26]],[[[22,[-1]]],28,[[24,[23]],[25,[23]],26]],0,[[21,21],11],[[21,21],21],[[21,21],4],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[21],[[[22,[-1]],31],[[1,[31,12]]],[[24,[23]],[25,[23]],26]],[[[22,[-1]],31],[[1,[32,12]]],[[24,[23]],[25,[23]],26]],[[[22,[-1]],31],[[1,[18,12]]],[[24,[23]],[25,[23]],26]],[[[22,[-1]],31,31],[[1,[11,12]]],[[24,[23]],[25,[23]],26]],[[[22,[-1]],31,32],[[1,[11,12]]],[[24,[23]],[25,[23]],26]],[[[22,[-1]],31,18],[[1,[11,12]]],[[24,[23]],[25,[23]],26]],[21,4],[21,4],[21,[[33,[21]]]],[21,[[34,[21]]]],[[[22,[-1]],28],[[1,[32,12]]],[[24,[23]],[25,[23]],26]],[[[22,[-1]],28,32],[[1,[11,12]]],[[24,[23]],[25,[23]],26]],[[[22,[-1]],32],[[1,[20,12]]],[[24,[23]],[25,[23]],26]],[[[22,[-1]],32,20],[[1,[11,12]]],[[24,[23]],[25,[23]],26]],[[-1,-2],[[22,[-1]]],[[24,[23]],[25,[23]],26],35],[[],23],[21,21],0,0,0,0,0,[[[22,[-1]]],[[1,[11,36]]],[[24,[23]],[25,[23]],26]],[[21,21],11],[[[22,[-1]]],11,[[24,[23]],[25,[23]],26]],[23,11],[[21,21,4],11],[[[22,[-1]],28],[[1,[11,12]]],[[24,[23]],[25,[23]],26]],0,[[21,21],21],[[21,21],11],0,0,0,0,[[21,21],21],[[21,21],11],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,2,[]],[-1,2,[]],[-1,2,[]],[[21,21],21],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],37],[[],38],[[],39],0,0,0,0,[[37,37],37],[[38,38],38],[[39,39],39],[[37,37],11],[[38,38],11],[[39,39],11],[[37,37],37],[[38,38],38],[[39,39],39],[[37,37],11],[[38,38],11],[[39,39],11],[37,20],[37,20],[38,20],[38,20],[39,31],[39,31],[[37,37],37],[[38,38],38],[[39,39],39],[[37,37],11],[[38,38],11],[[39,39],11],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[40,40],[41,41],[42,42],[43,43],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],0,0,0,0,[37,37],[38,38],[39,39],[[37,37],4],[[38,38],4],[[39,39],4],0,0,0,0,0,0,[[],37],[[],38],[[],39],0,[[37,37],37],[[38,38],38],[[39,39],39],[[],37],[[],38],[[],39],[[40,40],4],[[42,42],4],[[44,44],4],[[45,45],4],[[37,-1],11,29],[[38,-1],11,29],[[39,-1],11,29],0,0,[[14,6],7],[[46,6],7],[[47,6],7],[[48,6],7],[[49,6],7],[[50,6],7],[[51,6],7],[[40,6],7],[[41,6],7],[[42,6],7],[[43,6],7],[[44,6],7],[[37,6],7],[[37,6],7],[[37,6],7],[[37,6],7],[[52,6],7],[[53,6],7],[[54,6],7],[[55,6],7],[[38,6],7],[[38,6],7],[[38,6],7],[[38,6],7],[[56,6],7],[[57,6],7],[[39,6],7],[[39,6],7],[[39,6],7],[[39,6],7],[[58,6],7],[[45,6],7],[[59,6],7],[[60,6],7],[[61,6],7],[[62,6],7],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[20,[[30,[37]]]],[20,[[30,[38]]]],[31,[[30,[39]]]],[20,37],[20,37],[20,38],[20,38],[31,39],[31,39],[20,37],[20,38],[31,39],[-1,37,29],[-1,38,29],[-1,39,29],[12,[[30,[37]]]],[12,[[30,[38]]]],[12,[[30,[39]]]],[18,[[30,[48]]]],[18,[[30,[49]]]],[32,[[30,[40]]]],[32,[[30,[42]]]],[32,[[30,[44]]]],[20,[[30,[58]]]],[32,[[30,[45]]]],[32,[[30,[61]]]],[32,[[30,[62]]]],[47,[[30,[48]]]],[55,[[30,[58]]]],[56,[[30,[39]]]],[50,[[30,[37]]]],[50,40],[[],49],[47,[[30,[49]]]],[[],49],[[],49],[[],49],[[],49],[55,[[30,[38]]]],[50,42],[55,[[30,[61]]]],[51,[[30,[44]]]],[53,[[30,[45]]]],0,0,0,0,0,0,0,0,0,[[37,37],11],[[38,38],11],[[39,39],11],[[37,37],37],[[38,38],38],[[39,39],39],[[37,37],4],[[38,38],4],[[39,39],4],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[37],[38],[39],[37,4],[38,4],[39,4],[37,4],[38,4],[39,4],[[],41],[[],43],[37,[[33,[37]]]],[38,[[33,[38]]]],[39,[[33,[39]]]],[37,[[34,[37]]]],[38,[[34,[38]]]],[39,[[34,[39]]]],0,[41,63],[43,63],0,0,0,0,0,0,[[],14],[[],47],[[],50],[[],52],[41,30],[43,30],[41,30],[43,30],[37,37],[38,38],[39,39],[[41,63],30],[[43,63],30],0,0,0,0,0,[[37,37],11],[[38,38],11],[[39,39],11],0,0,0,0,0,0,0,0,0,0,[[37,37,4],11],[[38,38,4],11],[[39,39,4],11],[[50,40],11],[[50,42],11],0,0,[41,[[11,[63,[30,[63]]]]]],[43,[[11,[63,[30,[63]]]]]],0,0,0,[[37,37],37],[[38,38],38],[[39,39],39],[[37,37],11],[[38,38],11],[[39,39],11],[[37,37],37],[[38,38],38],[[39,39],39],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[37,37],11],[[38,38],11],[[39,39],11],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,2,[]],[-1,2,[]],[-1,2,[]],[-1,2,[]],[-1,2,[]],[-1,2,[]],[-1,2,[]],[-1,2,[]],[-1,2,[]],[-1,2,[]],[-1,2,[]],[-1,2,[]],[-1,2,[]],[-1,2,[]],[-1,2,[]],[-1,2,[]],[-1,2,[]],[-1,2,[]],[-1,2,[]],[-1,2,[]],[-1,2,[]],[-1,2,[]],[-1,2,[]],[-1,2,[]],[-1,2,[]],[-1,2,[]],[-1,2,[]],[[37,37],37],[[38,38],38],[[39,39],39],[14,[[1,[11,12]]]],[47,[[1,[11,12]]]],[51,[[1,[11,12]]]],[53,[[1,[11,12]]]],[54,[[1,[11,12]]]],[55,[[1,[11,12]]]],[56,[[1,[11,12]]]],[57,[[1,[11,12]]]],[59,[[1,[11,12]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],64],[[64,64],64],[[64,64],11],[[64,64],64],[[64,64],11],[64,18],[64,18],[[64,64],64],[[64,64],11],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[65,65],[64,64],[66,66],[67,67],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[64,64],[[64,64],4],[[64,64],64],[[],64],[[68,68],4],[[64,64],4],[[66,66],4],[[67,67],4],[[64,-1],11,29],[[65,6],7],[[69,6],7],[[68,6],7],[[64,6],7],[[64,6],7],[[64,6],7],[[64,6],7],[[64,6],7],[[66,6],7],[[67,6],7],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[18,[[30,[64]]]],[18,64],[18,64],[18,64],[-1,64,29],[12,[[30,[64]]]],[32,[[30,[65]]]],[32,[[30,[69]]]],[32,[[30,[68]]]],[18,[[30,[66]]]],[[64,64],11],[[64,64],64],[[64,64],4],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[64],[64,4],[64,4],[64,[[33,[64]]]],[64,[[34,[64]]]],[64,64],0,[[63,69,65],[[1,[11,68]]]],[[64,64],11],[[63,69,67],[[1,[11,68]]]],[63,[[1,[[11,[67,69]],68]]]],[[64,64,4],11],[[64,64],64],[[64,64],11],[[64,64],64],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[64,64],11],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,2,[]],[-1,2,[]],[-1,2,[]],[-1,2,[]],[-1,2,[]],[-1,2,[]],[[64,64],64],[[],11],0,0,[-1,-2,[],[]],[-1,-2,[],[]],0,[[10,6],7],[-1,-1,[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,2,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[70,[-1,-3]]],[[71,[-1,-3,-2]]],72,[[24,[23]],[25,[23]],26],[[24,[[22,[-2]]]],26]],[[[73,[[22,[23]]]]],74],[[],74],[[-1,31],-2,[],[]],[[[71,[-1,-3,-2]],31],[[75,[-1,-3,-2]]],72,[[24,[23]],[25,[23]],26],[[24,[[22,[-2]]]],26]],[[76,31],[[77,[-1]]],[]],[[74,31],[[78,[-1]]],[]],[[-1,31],-2,[],[]],[[[71,[-1,-3,-2]],31],[[75,[-1,-3,-2]]],72,[[24,[23]],[25,[23]],26],[[24,[[22,[-2]]]],26]],[[76,31],[[77,[-1]]],[]],[[74,31],[[78,[-1]]],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2,12]]],[],[]],[[[75,[-1,-3,-2]]],[[1,[31,12]]],72,[[24,[23]],[25,[23]],26],[[24,[[22,[-2]]]],26]],[[[75,[-1,-3,-2]]],[[1,[32,12]]],72,[[24,[23]],[25,[23]],26],[[24,[[22,[-2]]]],26]],[[[75,[-1,-3,-2]]],[[1,[18,12]]],72,[[24,[23]],[25,[23]],26],[[24,[[22,[-2]]]],26]],[[[78,[-1]]],[[1,[-1,12]]],[]],[[-1,-2],[[1,[11,12]]],[],[]],[[[75,[-1,-3,-2]],18],[[1,[11,12]]],72,[[24,[23]],[25,[23]],26],[[24,[[22,[-2]]]],26]],[[[75,[-1,-3,-2]],32],[[1,[11,12]]],72,[[24,[23]],[25,[23]],26],[[24,[[22,[-2]]]],26]],[[[75,[-1,-3,-2]],31],[[1,[11,12]]],72,[[24,[23]],[25,[23]],26],[[24,[[22,[-2]]]],26]],[[[78,[-1]],-1],[[1,[11,12]]],[]],[-1,2,[]],[-1,2,[]],[-1,2,[]],[-1,2,[]],[-1,2,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],79],[[],80],[[],[[1,[4,12]]]],[-1,81,[]],[-1,81,[]],[36,[[30,[82]]]],[83,[[30,[82]]]],[[79,79],79],[[80,80],80],[[79,79],11],[[80,80],11],[[79,79],79],[[80,80],80],[[79,79],11],[[80,80],11],[79,20],[79,20],[80,20],[80,20],[[79,79],79],[[80,80],80],[[79,79],11],[[80,80],11],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[36,[[30,[81]]]],[83,[[30,[81]]]],[84,[[1,[11,12]]]],[[[86,[85]],87],[[1,[11,12]]]],[88,88],[87,87],[80,80],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[79,79],[80,80],[[79,79],4],[[80,80],4],[[],79],[[],80],[36,12],[83,12],[[79,79],79],[[80,80],80],[[],79],[[],80],0,[[88,88],4],[[87,87],4],[[79,79],4],[[79,-1],11,29],[[80,-1],11,29],[[88,6],7],[[36,6],7],[[36,6],7],[[87,6],7],[[79,6],7],[[79,6],7],[[79,6],7],[[79,6],7],[[79,6],7],[[89,6],7],[[80,6],7],[[80,6],7],[[80,6],7],[[80,6],7],[[80,6],7],[[83,6],7],[[83,6],7],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[20,[[30,[79]]]],[20,[[30,[80]]]],[20,79],[20,79],[20,80],[20,80],[20,79],[20,80],[-1,79,29],[-1,80,29],[12,[[30,[79]]]],[12,[[30,[80]]]],[18,[[30,[88]]]],[18,[[30,[87]]]],[90,[[1,[91,12]]]],[[32,10],[[1,[11,12]]]],[[],[[1,[79,12]]]],[[],[[1,[92,12]]]],[[],[[1,[93,12]]]],[[],[[1,[80,83]]]],0,[[79,79],11],[[80,80],11],[[79,79],79],[[80,80],80],[[79,79],4],[[80,80],4],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[79],[80],[79,4],[80,4],[79,4],[80,4],[79,[[33,[79]]]],[80,[[33,[80]]]],[79,[[34,[79]]]],[80,[[34,[80]]]],0,0,0,[63,[[1,[94,12]]]],[63,[[1,[95,36]]]],[[63,87],[[1,[84,12]]]],[79,79],[80,80],0,0,0,[95,[[1,[11,36]]]],[[79,79],11],[[80,80],11],[96,97],[[79,79,4],11],[[80,80,4],11],[94,11],[36,[[30,[81]]]],[83,[[30,[81]]]],[[79,79],79],[[80,80],80],[[79,79],11],[[80,80],11],[[79,79],79],[[80,80],80],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,98,[]],[-1,98,[]],[[79,79],11],[[80,80],11],[-1,[[1,[-2]]],[],[]],[20,[[1,[93,12]]]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[20,[[1,[91,12]]]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[20,[[1,[92,12]]]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[20,[[1,[99]]]],[-1,[[1,[-2]]],[],[]],[20,[[1,[100,12]]]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[20,[[1,[101,12]]]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[20,[[1,[79,12]]]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,2,[]],[-1,2,[]],[-1,2,[]],[-1,2,[]],[-1,2,[]],[-1,2,[]],[-1,2,[]],[-1,2,[]],[-1,2,[]],[-1,2,[]],[-1,2,[]],[-1,2,[]],[-1,2,[]],[-1,2,[]],[-1,2,[]],[-1,2,[]],[-1,2,[]],[-1,2,[]],[-1,2,[]],[-1,2,[]],[-1,2,[]],[-1,2,[]],[[79,79],79],[[80,80],80],0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[102,6],7],[[103,6],7],[[104,6],7],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[32,[[30,[104]]]],[103,[[30,[104]]]],0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],0,[-1,2,[]],[-1,2,[]],[-1,2,[]],[103,[[1,[11,12]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,[[18,18,18],20],0,0,0,0,0,0,0,0,[[],105],[[],106],[[],107],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[105,6],7],[[106,6],7],[[107,6],7],0,0,0,[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,[106,105],[20,106],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],0,[-1,2,[]],[-1,2,[]],[-1,2,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"c":[],"p":[[4,"Result",1564],[3,"TypeId",1565],[3,"CpuidInput",29],[15,"bool"],[3,"CpuidFunction",29],[3,"Formatter",1566],[6,"Result",1566],[3,"CpuidOutput",29],[3,"CpuidPage",29],[3,"MutableInterruptStackFrame",906],[15,"tuple"],[15,"str"],[3,"GuestMessageEncryptor",82],[3,"GuestMessage",217],[8,"AsBytes",1567],[8,"FromBytes",1567],[8,"Message",217],[15,"u8"],[15,"slice"],[15,"u64"],[3,"ValidBitmap",94],[3,"GhcbProtocol",94],[3,"Ghcb",94],[8,"AsMut",1568],[8,"AsRef",1568],[8,"Sized",1569],[15,"u128"],[3,"PhysAddr",1570],[8,"IntoIterator",1571],[4,"Option",1572],[15,"u16"],[15,"u32"],[3,"Iter",1573],[3,"IterNames",1573],[8,"Translator",0],[4,"RegisterGhcbGpaError",996],[3,"GuestFieldFlags",217],[3,"PlatformInfo",217],[3,"PolicyFlags",217],[4,"KeySelect",217],[3,"KeySelectIter",217],[4,"RootKeySelect",217],[3,"RootKeySelectIter",217],[4,"KeyStatus",217],[4,"ReportStatus",217],[3,"AuthenticatedHeader",217],[3,"GuestMessageHeader",217],[4,"AeadAlgorithm",217],[4,"MessageType",217],[3,"KeyRequest",217],[3,"KeyResponse",217],[3,"AttestationRequest",217],[3,"AttestationResponse",217],[3,"AttestationReport",217],[3,"AttestationReportData",217],[3,"GuestPolicy",217],[3,"TcbVersion",217],[4,"AuthorKey",217],[3,"EcdsaSignature",217],[3,"EcdsaPublicKey",217],[4,"SigningAlgorithm",217],[4,"EccCurve",217],[15,"usize"],[3,"PermissionMask",771],[4,"Validation",771],[4,"Vmsa",771],[3,"RmpPermission",771],[4,"InstructionError",771],[4,"PageSize",771],[3,"Mutex",1574],[3,"GhcbIoFactory",927],[8,"RawMutex",1574],[6,"Spinlock",1575],[4,"PortFactoryWrapper",927],[3,"GhcbIoPort",927],[3,"RawIoPortFactory",927],[6,"Port",1576],[4,"PortWrapper",927],[3,"HypervisorFeatureSupportResponse",996],[3,"SevStatus",996],[8,"Error",1577],[3,"Backtrace",1578],[4,"SevStatusError",996],[3,"SnpPageStateChangeRequest",996],[4,"Size2MiB",1579],[3,"PhysFrame",1580],[4,"PageAssignment",996],[4,"CpuidRegister",996],[4,"TerminationReason",996],[3,"CpuidRequest",996],[3,"CpuidResponse",996],[3,"PreferredGhcbGpaResponse",996],[3,"SevInfoResponse",996],[3,"GhcbGpa",996],[3,"RegisterGhcbGpaRequest",996],[3,"TerminationRequest",996],[15,"never"],[3,"String",1581],[3,"RegisterGhcbGpaResponse",996],[3,"SnpPageStateChangeResponse",996],[3,"ApResetHoldResponse",996],[3,"GuestReservedArea",1357],[3,"SecretsPage",1357],[4,"Imi",1357],[3,"VmsaPage",1415],[3,"Vmsa",1415],[3,"SegmentRegister",1415],[3,"ApResetAddress",13],[3,"ApJumpTable",13],[8,"IoPortFactory",927],[8,"PortReader",927],[8,"PortWriter",927],[3,"SevInfoRequest",996],[3,"PreferredGhcbGpaRequest",996],[3,"HypervisorFeatureSupportRequest",996],[3,"ApResetHoldRequest",996],[13,"GhcbResponseLocationNotMatchingRequest",1356]],"b":[[120,"impl-Flags-for-ValidBitmap"],[121,"impl-ValidBitmap"],[141,"impl-Binary-for-ValidBitmap"],[142,"impl-LowerHex-for-ValidBitmap"],[143,"impl-Debug-for-ValidBitmap"],[144,"impl-Octal-for-ValidBitmap"],[145,"impl-UpperHex-for-ValidBitmap"],[150,"impl-ValidBitmap"],[151,"impl-Flags-for-ValidBitmap"],[323,"impl-Flags-for-GuestFieldFlags"],[324,"impl-GuestFieldFlags"],[325,"impl-PlatformInfo"],[326,"impl-Flags-for-PlatformInfo"],[327,"impl-PolicyFlags"],[328,"impl-Flags-for-PolicyFlags"],[446,"impl-LowerHex-for-GuestFieldFlags"],[447,"impl-Octal-for-GuestFieldFlags"],[448,"impl-UpperHex-for-GuestFieldFlags"],[449,"impl-Binary-for-GuestFieldFlags"],[454,"impl-Octal-for-PlatformInfo"],[455,"impl-Binary-for-PlatformInfo"],[456,"impl-LowerHex-for-PlatformInfo"],[457,"impl-UpperHex-for-PlatformInfo"],[460,"impl-LowerHex-for-PolicyFlags"],[461,"impl-Octal-for-PolicyFlags"],[462,"impl-Binary-for-PolicyFlags"],[463,"impl-UpperHex-for-PolicyFlags"],[500,"impl-GuestFieldFlags"],[501,"impl-Flags-for-GuestFieldFlags"],[502,"impl-PlatformInfo"],[503,"impl-Flags-for-PlatformInfo"],[504,"impl-PolicyFlags"],[505,"impl-Flags-for-PolicyFlags"],[796,"impl-Flags-for-PermissionMask"],[797,"impl-PermissionMask"],[832,"impl-Binary-for-PermissionMask"],[833,"impl-Octal-for-PermissionMask"],[834,"impl-LowerHex-for-PermissionMask"],[835,"impl-Debug-for-PermissionMask"],[836,"impl-UpperHex-for-PermissionMask"],[846,"impl-Flags-for-PermissionMask"],[847,"impl-PermissionMask"],[982,"impl-PortReader%3Cu16%3E-for-GhcbIoPort%3C\'a,+R,+P,+G%3E"],[983,"impl-PortReader%3Cu32%3E-for-GhcbIoPort%3C\'a,+R,+P,+G%3E"],[984,"impl-PortReader%3Cu8%3E-for-GhcbIoPort%3C\'a,+R,+P,+G%3E"],[987,"impl-PortWriter%3Cu8%3E-for-GhcbIoPort%3C\'a,+R,+P,+G%3E"],[988,"impl-PortWriter%3Cu32%3E-for-GhcbIoPort%3C\'a,+R,+P,+G%3E"],[989,"impl-PortWriter%3Cu16%3E-for-GhcbIoPort%3C\'a,+R,+P,+G%3E"],[1069,"impl-Flags-for-HypervisorFeatureSupportResponse"],[1070,"impl-HypervisorFeatureSupportResponse"],[1071,"impl-SevStatus"],[1072,"impl-Flags-for-SevStatus"],[1150,"impl-Debug-for-RegisterGhcbGpaError"],[1151,"impl-Display-for-RegisterGhcbGpaError"],[1153,"impl-Octal-for-HypervisorFeatureSupportResponse"],[1154,"impl-LowerHex-for-HypervisorFeatureSupportResponse"],[1155,"impl-Debug-for-HypervisorFeatureSupportResponse"],[1156,"impl-Binary-for-HypervisorFeatureSupportResponse"],[1157,"impl-UpperHex-for-HypervisorFeatureSupportResponse"],[1159,"impl-Binary-for-SevStatus"],[1160,"impl-Octal-for-SevStatus"],[1161,"impl-LowerHex-for-SevStatus"],[1162,"impl-Debug-for-SevStatus"],[1163,"impl-UpperHex-for-SevStatus"],[1164,"impl-Display-for-SevStatusError"],[1165,"impl-Debug-for-SevStatusError"],[1190,"impl-Flags-for-HypervisorFeatureSupportResponse"],[1191,"impl-HypervisorFeatureSupportResponse"],[1192,"impl-Flags-for-SevStatus"],[1193,"impl-SevStatus"]]},\
"oak_simple_io":{"doc":"Simple I/O driver for communication between the guest and …","t":"DRRRRDILLLLLLLLLLLLLLLLLL","n":["BufferDescriptor","DEFAULT_INPUT_BUFFER","DEFAULT_OUTPUT_BUFFER","INPUT_BUFFER_LENGTH","OUTPUT_BUFFER_LENGTH","SimpleIo","Translator","borrow","borrow","borrow_mut","borrow_mut","from","from","into","into","new","new_with_defaults","read_bytes","try_from","try_from","try_into","try_into","type_id","type_id","write_bytes"],"q":[[0,"oak_simple_io"],[25,"oak_sev_guest::io"],[26,"core::result"],[27,"core::alloc"],[28,"alloc::collections::vec_deque"],[29,"core::option"],[30,"core::any"]],"d":["I/O port descriptor for a buffer.","Default I/O ports for the input buffer.","Default I/O ports for the output buffer.","The length of the buffer that will be used for input …","The length of the buffer that will be used for output …","The simple I/O channel driver implementation.","Memory address translation function.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Reads the next available bytes from the input buffer, if …","","","","","","","Writes the data to the output buffer and notifies the host."],"i":[0,0,0,0,0,0,0,2,3,2,3,2,3,2,3,3,3,3,2,3,2,3,2,3,3],"f":[0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[[1,-1,2,2,-2],[[5,[[3,[-2]],4]]],6,7],[[1,-1,-2],[[5,[[3,[-2]],4]]],6,7],[[[3,[-1]]],[[10,[[9,[8]]]]],7],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,11,[]],[-1,11,[]],[[[3,[-1]],[12,[8]]],[[5,[13,4]]],7]],"c":[],"p":[[4,"PortFactoryWrapper",25],[3,"BufferDescriptor",0],[3,"SimpleIo",0],[15,"str"],[4,"Result",26],[8,"Translator",0],[8,"Allocator",27],[15,"u8"],[3,"VecDeque",28],[4,"Option",29],[3,"TypeId",30],[15,"slice"],[15,"usize"]],"b":[]},\
"oak_stage0":{"doc":"","t":"FFFAFFFHHHHHDLLLFLFMMMMMFLLL","n":["create_gdt","create_idt","jump_to_kernel","paging","panic","rust64_start","sev_status","PAGE_TABLE_REFS","PDPT","PD_0","PD_3","PML4","PageTableRefs","borrow","borrow_mut","from","init_page_table_refs","into","map_additional_memory","pd_0","pd_3","pdpt","pml4","pt_0","remap_first_huge_page","try_from","try_into","type_id"],"q":[[0,"oak_stage0"],[7,"oak_stage0::paging"],[28,"x86_64::structures::gdt"],[29,"x86_64::registers::segmentation"],[30,"x86_64::structures::idt"],[31,"x86_64::addr"],[32,"alloc::boxed"],[33,"core::alloc"],[34,"core::panic::panic_info"],[35,"oak_sev_guest::msr"],[36,"core::result"],[37,"core::any"]],"d":["","","Passes control to the operating system kernel. No more …","","Common panic routine for the Stage0 binaries. This needs …","Entry point for the Rust code in the stage0 BIOS.","Returns the value of the SEV_STATUS MSR that’s safe to …","References to all the pages tables we care about.","","","","","Wrapper for the page table references so that we can …","","","Returns the argument unchanged.","Initialises the page table references.","Calls <code>U::from(self)</code>.","Maps the first 1GiB of memory using 2MiB hugepages, except …","The page directory covering virtual memory range 0..1GiB.","The page directory covering virtual memory range 3..4GiB.","The page-directory pointer table covering virtual memory …","The root page-map level 4 table coverting virtual memory …","The page table covering virtual memory range 0..2MiB where …","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,14,14,14,0,14,0,14,14,14,14,14,0,14,14,14],"f":[[1,[[3,[2,2]]]],[4,3],[[5,[6,[0,-1]]],7,8],0,[9,7],[10,7],[[],11],0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-1,[]],[10,3],[-1,-2,[],[]],[10,3],0,0,0,0,0,[10,3],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,13,[]]],"c":[],"p":[[3,"GlobalDescriptorTable",28],[3,"SegmentSelector",29],[15,"tuple"],[3,"InterruptDescriptorTable",30],[3,"VirtAddr",31],[3,"Box",32],[15,"never"],[8,"Allocator",33],[3,"PanicInfo",34],[15,"u64"],[3,"SevStatus",35],[4,"Result",36],[3,"TypeId",37],[3,"PageTableRefs",7]],"b":[]},\
"oak_stage0_dice":{"doc":"This crate contains the logic used by stage0 to create …","t":"DRMLLMLLFLMMFFMMLLL","n":["Measurements","REPORT_DATA_SIZE","acpi_measurement","borrow","borrow_mut","cmdline_measurement","default","from","generate_dice_data","into","kernel_measurement","memory_map_measurement","mock_attestation_report","mock_derived_key","ram_disk_measurement","setup_data_measurement","try_from","try_into","type_id"],"q":[[0,"oak_stage0_dice"],[19,"oak_dice::evidence"],[20,"core::ops::function"],[21,"oak_sev_guest::guest"],[22,"core::result"],[23,"core::any"]],"d":["Measurements of various components in Stage1.","","The concatenated measurement of the command used for …","","","The measurement of the kernel command-line.","","Returns the argument unchanged.","Generates attestation evidence for the ‘measurements’ …","Calls <code>U::from(self)</code>.","The measurement of the kernel image.","The measurement of the physical memory map.","Returns an attestation report.","Returns a fixed key filled with zeros.","The measurement of the initial RAM disk.","The measurement of the kernel setup data.","","",""],"i":[0,0,1,1,1,1,1,1,0,1,1,1,0,0,1,1,1,1,1],"f":[0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],0,[[],1],[-1,-1,[]],[[1,-1,-2],2,3,3],[-1,-2,[],[]],0,0,[[[5,[4]]],[[8,[6,7]]]],[[],[[8,[[5,[4]],7]]]],0,0,[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,9,[]]],"c":[],"p":[[3,"Measurements",0],[3,"Stage0DiceData",19],[8,"FnOnce",20],[15,"u8"],[15,"array"],[3,"AttestationReport",21],[15,"str"],[4,"Result",22],[3,"TypeId",23]],"b":[]},\
"oak_tdx_guest":{"doc":"Rust implementation of features needed to implement guest …","t":"AAENDSNNSSSSNNNDEIDFLMLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLFFMMMLMMLLLLLLLLLLLLMLMLLLLLKLLLLLLLLLLLLLLLLLLNELLFLLLFFFFFFFFFLLL","n":["tdcall","vmcall","AcceptMemoryError","AlreadyAccepted","Attributes","DEBUG","InvalidOperand","InvalidSize","KL","PERFMON","PKS","SYSPROF","Size1GiB","Size2MiB","Size4KiB","TdInfo","TdxPageSize","TdxSize","VeInfo","accept_memory","all","attributes","bitand","bitand_assign","bitor","bitor_assign","bits","bits","bitxor","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","complement","contains","default","difference","empty","exit_qualification","exit_reason","extend","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from_bits","from_bits_retain","from_bits_retain","from_bits_truncate","from_iter","from_name","from_repr","get_td_info","get_ve_info","gpa_width","guest_linear_address","guest_physical_address","insert","instruction_info","instruction_length","intersection","intersects","into","into","into","into","into","into_iter","is_all","is_empty","iter","iter_names","max_vcpus","not","num_vcpus","remove","set","sub","sub_assign","symmetric_difference","tdx_size","to_string","toggle","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","union","MapFailure","MapGpaError","borrow","borrow_mut","call_cpuid","fmt","from","into","io_read_u16","io_read_u32","io_read_u8","io_write_u16","io_write_u32","io_write_u8","map_gpa","msr_read","msr_write","try_from","try_into","type_id"],"q":[[0,"oak_tdx_guest"],[2,"oak_tdx_guest::tdcall"],[114,"oak_tdx_guest::vmcall"],[134,"x86_64::structures::paging::frame"],[135,"core::result"],[136,"x86_64::structures::paging::page"],[137,"core::iter::traits::collect"],[138,"core::fmt"],[139,"core::fmt"],[140,"bitflags::iter"],[141,"bitflags::iter"],[142,"core::any"],[143,"core::core_arch::x86::cpuid"],[144,"x86_64::structures::paging::page"]],"d":["Rust implementation of the TDX TDCALL instruction.","Rust implementation of the sub-functions of the TDX TDCALL[…","Error when accepting guest-physical memory.","The page is not pending and has already been accepted.","Attributes of a TD.","The guest TD runs in off-TD debug mode.","The supplied address is not valid.","The specified page size is invalid.","Whether the TD is allowed to use Key Locker.","Wehther the TD is allowed to use Perfmon and PERF_METRICS.","Whether the TD is allowed to use Supervisor Protection …","Whether system profiling is enabled on the TD.","","","","Information about the TD’s execution environment.","","Trait for getting the associated <code>TdxPageSize</code> enum for a …","Information about a virtualization exception (#VE).","Accepts a pending private memory page to make it usable in …","Get a flags value with all known bits set.","The TD attributes passed as part of TDINIT.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","","Get the underlying bits value.","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","","","","","","","","","","The bitwise negation (<code>!</code>) of the bits in a flags value, …","Whether all set bits in a source flags value are also set …","","The intersection of a source flags value with the …","Get a flags value with all bits unset.","The exit qualification.","The exit reason.","The bitwise or (<code>|</code>) of the bits in each flags value.","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Convert from a bits value.","","Convert from a bits value exactly.","Convert from a bits value, unsetting any unknown bits.","The bitwise or (<code>|</code>) of the bits in each flags value.","Get a flags value with the bits of a flag with the given …","Try to create Self from the raw representation","Gets information about the TD’s execution environment by …","Gets information about the recent virtualization exception …","The effective GPA width. The “shared” bit is at …","The guest-linear address (virtual address).","The guest-physical address.","The bitwise or (<code>|</code>) of the bits in two flags values.","Additional context for the instruction that caused the #VE.","The length of the instruction that caused the #VE.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","Whether any set bits in a source flags value are also set …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Whether all known bits in this flags value are set.","Whether all bits in this flags value are unset.","Yield a set of contained flags values.","Yield a set of contained named flags values.","The maximum possible number of vCPUs for this TD.","The bitwise negation (<code>!</code>) of the bits in a flags value, …","The number of vCPUs enabled on this TD.","The intersection of a source flags value with the …","Call <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","","","","","","","","","","","","","","","The bitwise or (<code>|</code>) of the bits in two flags values.","","Error when mapping a guest-physical address (GPA) as …","","","Executes CPUID for the specified leaf and sub-leaf.","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Reads two bytes from the specified IO port.","Reads four bytes from the specified IO port.","Reads a single byte from the specified IO port.","Writes two bytes to the specified IO port.","Writes four bytes to the specified IO port.","Writes a single byte to the specified IO port.","Maps a range of guest-physical addresses (GPAs) as shared …","Reads a value from the specified model-specific register.","Writes a value to the specified model-specific register.","","",""],"i":[0,0,0,3,0,7,3,3,7,7,7,7,14,14,14,0,0,0,0,0,7,17,7,7,7,7,7,7,7,7,17,18,7,3,14,17,18,7,3,14,7,7,7,7,7,18,18,7,7,7,7,7,3,3,14,17,18,7,3,14,7,7,7,7,7,7,3,0,0,17,18,18,7,18,18,7,7,17,18,7,3,14,7,7,7,7,7,17,7,17,7,7,7,7,7,6,3,7,17,18,7,3,14,17,18,7,3,14,17,18,7,3,14,7,25,0,25,25,0,25,25,25,0,0,0,0,0,0,0,0,0,25,25,25],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[1,[-1]]],[[4,[2,3]]],[5,6]],[[],7],0,[[7,7],7],[[7,7],2],[[7,7],7],[[7,7],2],[7,8],[7,8],[[7,7],7],[[7,7],2],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[7,7],[[7,7],9],[[],7],[[7,7],7],[[],7],0,0,[[7,-1],2,10],[[7,11],12],[[7,11],12],[[7,11],12],[[7,11],12],[[3,11],[[4,[2,13]]]],[[3,11],12],[[14,11],12],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[8,[[15,[7]]]],[8,7],[8,7],[8,7],[-1,7,10],[16,[[15,[7]]]],[8,[[15,[3]]]],[[],17],[[],[[15,[18]]]],0,0,0,[[7,7],2],0,0,[[7,7],7],[[7,7],9],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[7],[7,9],[7,9],[7,[[19,[7]]]],[7,[[20,[7]]]],0,[7,7],0,[[7,7],2],[[7,7,9],2],[[7,7],7],[[7,7],2],[[7,7],7],[[],14],[-1,21,[]],[[7,7],2],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,22,[]],[-1,22,[]],[-1,22,[]],[-1,22,[]],[-1,22,[]],[[7,7],7],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[[23,23],[[4,[24,16]]]],[[25,11],12],[-1,-1,[]],[-1,-2,[],[]],[23,[[4,[26,16]]]],[23,[[4,[23,16]]]],[23,[[4,[27,16]]]],[[23,26],[[4,[2,16]]]],[[23,23],[[4,[2,16]]]],[[23,27],[[4,[2,16]]]],[[[29,[28]]],[[4,[2,25]]]],[23,[[4,[8,16]]]],[[23,8],[[4,[2,16]]]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,22,[]]],"c":[],"p":[[3,"PhysFrame",134],[15,"tuple"],[4,"AcceptMemoryError",2],[4,"Result",135],[8,"PageSize",136],[8,"TdxSize",2],[3,"Attributes",2],[15,"u64"],[15,"bool"],[8,"IntoIterator",137],[3,"Formatter",138],[6,"Result",138],[3,"Error",138],[4,"TdxPageSize",2],[4,"Option",139],[15,"str"],[3,"TdInfo",2],[3,"VeInfo",2],[3,"Iter",140],[3,"IterNames",140],[3,"String",141],[3,"TypeId",142],[15,"u32"],[3,"CpuidResult",143],[4,"MapGpaError",114],[15,"u16"],[15,"u8"],[4,"Size4KiB",136],[3,"PhysFrameRange",134]],"b":[[26,"impl-Flags-for-Attributes"],[27,"impl-Attributes"],[48,"impl-Octal-for-Attributes"],[49,"impl-LowerHex-for-Attributes"],[50,"impl-UpperHex-for-Attributes"],[51,"impl-Binary-for-Attributes"],[52,"impl-Display-for-AcceptMemoryError"],[53,"impl-Debug-for-AcceptMemoryError"],[61,"impl-Flags-for-Attributes"],[62,"impl-Attributes"]]},\
"oak_virtio":{"doc":"Simple virtio drivers implemented based on polling.","t":"IIIIAKAKAKDLLLLLLLLLLLLLLDDDLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLALDDDSDDDSSSDMLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMLLLLLLLLLLLLLLLLLLLLLLLMMLMLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMDLLLLLLALLALLLLNNRSSDNNNNNNDEELLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["InverseTranslator","Read","Translator","Write","console","flush","queue","read_exact","vsock","write_all","Console","borrow","borrow_mut","find_and_configure_device","flush","from","get_status","into","read_bytes","read_exact","try_from","try_into","type_id","write_all","write_bytes","DeviceWriteOnlyQueue","DriverWriteOnlyQueue","Queue","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","from","from","from","get_avail_addr","get_desc_addr","get_used_addr","inner","inner","into","into","into","must_notify_device","new","new","read_next_used_buffer","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","virtq","write_buffer","AvailRing","Desc","DescFlags","NO_NOTIFY","RingFlags","UsedElem","UsedRing","VIRTQ_DESC_F_INDIRECT","VIRTQ_DESC_F_NEXT","VIRTQ_DESC_F_WRITE","VirtQueue","addr","all","all","avail","avail_event","bitand","bitand","bitand_assign","bitand_assign","bitor","bitor","bitor_assign","bitor_assign","bits","bits","bits","bits","bitxor","bitxor","bitxor_assign","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","complement","complement","contains","contains","default","default","default","desc","difference","difference","empty","empty","extend","extend","flags","flags","flags","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from_bits","from_bits","from_bits_retain","from_bits_retain","from_bits_retain","from_bits_retain","from_bits_truncate","from_bits_truncate","from_iter","from_iter","from_name","from_name","id","idx","idx","insert","insert","intersection","intersection","intersects","intersects","into","into","into","into","into","into","into","into_iter","into_iter","is_all","is_all","is_empty","is_empty","iter","iter","iter_names","iter_names","len","length","new","next","not","not","remove","remove","ring","ring","set","set","sub","sub","sub_assign","sub_assign","symmetric_difference","symmetric_difference","to_owned","to_owned","toggle","toggle","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","union","union","used","used_event","VSock","borrow","borrow_mut","find_and_configure_device","from","get_status","into","packet","read_filtered_packet","read_packet","socket","try_from","try_into","type_id","write_packet","CreditRequest","CreditUpdate","HEADER_SIZE","NO_RECEIVE","NO_SEND","Packet","Request","Response","Rst","Rw","Shutdown","Stream","VSockFlags","VSockOp","VSockType","all","as_slice","bitand","bitand_assign","bitor","bitor_assign","bits","bits","bitxor","bitxor_assign","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","complement","contains","difference","empty","eq","eq","eq","extend","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from_bits","from_bits_retain","from_bits_retain","from_bits_truncate","from_iter","from_name","from_repr","from_repr","get_buf_alloc","get_dst_cid","get_dst_port","get_flags","get_fwd_cnt","get_len","get_op","get_payload","get_payload_len","get_src_cid","get_src_port","get_type","insert","intersection","intersects","into","into","into","into","into_iter","is_all","is_empty","iter","iter_names","new","new_control","new_data","not","remove","set","set_buf_alloc","set_dst_cid","set_dst_port","set_flags","set_fwd_cnt","set_op","set_src_cid","set_src_port","sub","sub_assign","symmetric_difference","to_string","to_string","toggle","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","union","Socket","SocketConnector","SocketListener","accept","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","connect","flush","from","from","from","into","into","into","new","new","read_exact","shutdown","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","write_all"],"q":[[0,"oak_virtio"],[10,"oak_virtio::console"],[25,"oak_virtio::queue"],[60,"oak_virtio::queue::virtq"],[232,"oak_virtio::vsock"],[247,"oak_virtio::vsock::packet"],[367,"oak_virtio::vsock::socket"],[399,"anyhow"],[400,"rust_hypervisor_firmware_virtio::pci"],[401,"core::alloc"],[402,"rust_hypervisor_firmware_virtio::virtio"],[403,"alloc::collections::vec_deque"],[404,"core::option"],[405,"core::result"],[406,"core::any"],[407,"x86_64::addr"],[408,"alloc::vec"],[409,"core::iter::traits::collect"],[410,"core::fmt"],[411,"core::fmt"],[412,"bitflags::iter"],[413,"core::fmt"]],"d":["","Read bytes from a source.","Memory address translation functions.","Write bytes to a source.","","Flush any output buffers, if they exist.","","Read bytes until <code>data</code> has been filled.","","Write all bytes in <code>data</code>.","Simple driver implementation for a virtio serial/console …","","","Finds the virtio console PCI device, initialises the …","","Returns the argument unchanged.","Gets the device status.","Calls <code>U::from(self)</code>.","Reads the next available bytes from the receive queue, if …","","","","","","Writes the data to the transmit queue.","A queue where the descriptor buffers are only writable by …","A queue where the descriptor buffers are only writable by …","A container for a boxed virtqueue and its associated …","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Gets the address of the available ring.","Gets the address of the descriptor table.","Gets the address of the used ring.","The inner queue.","The inner queue.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Checks whether the device wants to be notified of queue …","","","Reads the contents of the next used buffer from the queue, …","","","","","","","","","","","Writes the data to a buffer and adds its descriptor to the …","The ring buffer that indicates which descriptors have been …","A descriptor for a byte buffer used in a virtio queue.","Flags about a descriptor.","This indicates that the owner of the ring does not require …","Flags about the available and used rings.","An element indicating a used descriptor chain.","The ring buffer that indicates which available descriptors …","This means the buffer contains a list of buffer …","This marks a buffer as continuing via the next field to …","This marks a buffer as device write-only (otherwise device …","A split virtqueue implementation.","The guest-physical address of the buffer.","Get a flags value with all known bits set.","Get a flags value with all known bits set.","The available ring, which is controlled by the driver.","Event details. Only used if VIRTIO_F_EVENT_IDX has been …","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","","Get the underlying bits value.","Get the underlying bits value.","","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","","","","","","","","","","","","","","","","","","The bitwise negation (<code>!</code>) of the bits in a flags value, …","The bitwise negation (<code>!</code>) of the bits in a flags value, …","Whether all set bits in a source flags value are also set …","Whether all set bits in a source flags value are also set …","","","","The descriptor table.","The intersection of a source flags value with the …","The intersection of a source flags value with the …","Get a flags value with all bits unset.","Get a flags value with all bits unset.","The bitwise or (<code>|</code>) of the bits in each flags value.","The bitwise or (<code>|</code>) of the bits in each flags value.","Driver-specific flags for the queue.","Flags providing more info about this descriptor.","Device-specific flags for the queue.","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Convert from a bits value.","Convert from a bits value.","Convert from a bits value exactly.","","Convert from a bits value exactly.","","Convert from a bits value, unsetting any unknown bits.","Convert from a bits value, unsetting any unknown bits.","The bitwise or (<code>|</code>) of the bits in each flags value.","The bitwise or (<code>|</code>) of the bits in each flags value.","Get a flags value with the bits of a flag with the given …","Get a flags value with the bits of a flag with the given …","The index of the head of the used descriptor chain.","The next index that will be used in the ring (modulo …","The next index that will be used in the ring (modulo …","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","Whether any set bits in a source flags value are also set …","Whether any set bits in a source flags value are also set …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Whether all known bits in this flags value are set.","Whether all known bits in this flags value are set.","Whether all bits in this flags value are unset.","Whether all bits in this flags value are unset.","Yield a set of contained flags values.","Yield a set of contained flags values.","Yield a set of contained named flags values.","Yield a set of contained named flags values.","Total length of the bytes that was written to the used …","The lengths of the buffer.","","The index of the next descriptor in the chain if this is …","The bitwise negation (<code>!</code>) of the bits in a flags value, …","The bitwise negation (<code>!</code>) of the bits in a flags value, …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The ring-buffer containing indices of the heads of …","The ring-buffer containing the used elements.","Call <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …","Call <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","","","","","","","","","","","","","","","","","","","","","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The used ring, which is controlled by the device.","Event details. Only used if VIRTIO_F_EVENT_IDX has been …","Low-level driver interface to interact with a virtio …","","","Finds the virtio vsock PCI device, initialises the device, …","Returns the argument unchanged.","Gets the device status.","Calls <code>U::from(self)</code>.","Virtio vsock packet implementation.","Reads the next valid packet that matches the filter, if …","Reads the next valid packet from the receive queue, if one …","","","","","Writes the packet to the transmit queue.","Request for update on credit to calculate stream buffer …","Give update on credit to support flow control, either in …","The size of the packet header in bytes.","Indicates that no more payload data will be received.","Indicates that no more payload data will be senn.","","Connection request.","Connections accepted response.","Connection reset, either in reponse to a shutdown request …","Represents a data packet.","Connection shutdown request.","Only stream sockets are currently supported in the Virtio …","Flags about a socket connection.","Vsock Ops.","Socket Type.","Get a flags value with all known bits set.","Returns the entire buffer as a slice.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","","Get the underlying bits value.","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","","","","","","","","The bitwise negation (<code>!</code>) of the bits in a flags value, …","Whether all set bits in a source flags value are also set …","The intersection of a source flags value with the …","Get a flags value with all bits unset.","","","","The bitwise or (<code>|</code>) of the bits in each flags value.","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Convert from a bits value.","","Convert from a bits value exactly.","Convert from a bits value, unsetting any unknown bits.","The bitwise or (<code>|</code>) of the bits in each flags value.","Get a flags value with the bits of a flag with the given …","Try to create Self from the raw representation","Try to create Self from the raw representation","Gets the size of the peer’s stream buffer.","Gets the destination CID.","Gets the destination port.","Gets the flags.","Gets the number of bytes that the peer has read out of the …","Gets the payload length.","Gets the op that the packet represents.","Gets the payload.","Gets the actual length of the payload in the current …","Gets the source CID.","Gets the source port.","Gets the type of socket the packet is intended for.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","Whether any set bits in a source flags value are also set …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Whether all known bits in this flags value are set.","Whether all bits in this flags value are unset.","Yield a set of contained flags values.","Yield a set of contained named flags values.","Creates a new <code>Packet</code> from an existing buffer.","Creates a new control <code>Packet</code> with only a header.","Creates a new data <code>Packet</code> with the given payload length.","The bitwise negation (<code>!</code>) of the bits in a flags value, …","The intersection of a source flags value with the …","Call <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …","Sets the size of the stream buffer.","Sets the destination CID.","Sets the destination port.","Sets the flags.","Sets the number of bytes read from the stream buffer.","Sets the op that the packet represents.","Sets the source CID.","Sets the source port.","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","","","","","","","","","","","","The bitwise or (<code>|</code>) of the bits in two flags values.","A connection-oriented socket.","Connector to initiate a connection to a listener on the …","Listener that waits for a connection initiated from the …","Listens for a connection from the host on the specified …","","","","","","","Tries to connect to a listener on the host.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Shuts the connection down.","","","","","","","","","",""],"i":[0,0,0,0,0,49,0,50,0,49,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,20,21,17,20,21,17,20,21,17,17,17,17,20,21,20,21,17,17,20,21,21,20,21,17,20,21,17,20,21,17,0,20,0,0,0,24,0,0,0,23,23,23,0,32,23,24,51,28,23,24,23,24,23,24,23,24,23,23,24,24,23,24,23,24,27,51,23,32,24,28,26,27,51,23,32,24,28,26,23,26,23,26,23,24,23,24,27,28,26,51,23,24,23,24,23,24,27,32,28,23,23,23,23,23,32,24,24,24,24,24,28,26,27,51,23,32,24,28,26,23,24,23,23,24,24,23,24,23,24,23,24,26,27,28,23,24,23,24,23,24,27,51,23,32,24,28,26,23,24,23,24,23,24,23,24,23,24,26,32,32,32,23,24,23,24,27,28,23,24,23,24,23,24,23,24,23,26,23,24,27,51,23,32,24,28,26,27,51,23,32,24,28,26,27,51,23,32,24,28,26,23,24,51,27,0,37,37,37,37,37,37,0,37,37,0,37,37,37,37,41,41,0,40,40,0,41,41,41,41,41,42,0,0,0,40,38,40,40,40,40,40,40,40,40,38,41,40,42,38,41,40,42,40,40,40,40,41,40,42,40,38,41,41,40,40,40,40,40,42,42,38,41,40,42,40,40,40,40,40,40,41,42,38,38,38,38,38,38,38,38,38,38,38,38,40,40,40,38,41,40,42,40,40,40,40,40,38,38,38,40,40,40,38,38,38,38,38,38,38,38,40,40,40,41,42,40,38,41,40,42,38,41,40,42,38,41,40,42,40,0,0,0,46,48,46,47,48,46,47,48,47,48,46,47,48,46,47,48,46,47,47,48,46,47,48,46,47,48,46,47,47],"f":[0,0,0,0,0,[-1,[[2,[1]]],[]],0,[[-1,[4,[3]]],[[2,[1]]],[]],0,[[-1,[4,[3]]],[[2,[1]]],[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[[-1,-2,-3],[[2,[[6,[5,-3]]]]],7,8,9],[[[6,[-1,-2]]],[[2,[1]]],10,9],[-1,-1,[]],[[[6,[-1,-2]]],11,10,9],[-1,-2,[],[]],[[[6,[-1,-2]]],[[13,[[12,[3]]]]],10,9],[[[6,[-1,-2]],[4,[3]]],[[2,[1]]],10,9],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,15,[]],[[[6,[-1,-2]],[4,[3]]],[[2,[1]]],10,9],[[[6,[-1,-2]],[4,[3]]],[[13,[16]]],10,9],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[17,[-1]]],18,9],[[[17,[-1]]],18,9],[[[17,[-1]]],18,9],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[17,[-1]]],19,9],[[-1,-2],[[20,[-2]]],7,9],[[-1,-2],[[21,[-2]]],7,9],[[[21,[-1]]],[[13,[[22,[3]]]]],9],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,15,[]],[-1,15,[]],[-1,15,[]],0,[[[20,[-1]],[4,[3]]],[[13,[16]]],9],0,0,0,0,0,0,0,0,0,0,0,0,[[],23],[[],24],0,0,[[23,23],23],[[24,24],24],[[23,23],1],[[24,24],1],[[23,23],23],[[24,24],24],[[23,23],1],[[24,24],1],[23,25],[23,25],[24,25],[24,25],[[23,23],23],[[24,24],24],[[23,23],1],[[24,24],1],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[23,23],[26,26],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[23,23],[24,24],[[23,23],19],[[24,24],19],[[],27],[[],28],[[],26],0,[[23,23],23],[[24,24],24],[[],23],[[],24],[[23,-1],1,29],[[24,-1],1,29],0,0,0,[[23,30],31],[[23,30],31],[[23,30],31],[[23,30],31],[[23,30],31],[[32,30],31],[[24,30],31],[[24,30],31],[[24,30],31],[[24,30],31],[[24,30],31],[[28,30],31],[[26,30],31],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[25,[[13,[23]]]],[25,[[13,[24]]]],[25,23],[25,23],[25,24],[25,24],[25,23],[25,24],[-1,23,29],[-1,24,29],[33,[[13,[23]]]],[33,[[13,[24]]]],0,0,0,[[23,23],1],[[24,24],1],[[23,23],23],[[24,24],24],[[23,23],19],[[24,24],19],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[23],[24],[23,19],[24,19],[23,19],[24,19],[23,[[34,[23]]]],[24,[[34,[24]]]],[23,[[35,[23]]]],[24,[[35,[24]]]],0,0,[[23,36,11],32],0,[23,23],[24,24],[[23,23],1],[[24,24],1],0,0,[[23,23,19],1],[[24,24,19],1],[[23,23],23],[[24,24],24],[[23,23],1],[[24,24],1],[[23,23],23],[[24,24],24],[-1,-2,[],[]],[-1,-2,[],[]],[[23,23],1],[[24,24],1],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,15,[]],[-1,15,[]],[-1,15,[]],[-1,15,[]],[-1,15,[]],[-1,15,[]],[-1,15,[]],[[23,23],23],[[24,24],24],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[[-1,-2,-3],[[2,[[37,[5,-3]]]]],7,8,9],[-1,-1,[]],[[[37,[-1,-2]]],11,10,9],[-1,-2,[],[]],0,[[[37,[-1,-2]],-3,19],[[13,[38]]],10,9,39],[[[37,[-1,-2]]],[[13,[38]]],10,9],0,[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,15,[]],[[[37,[-1,-2]],38],1,10,9],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],40],[38,[[4,[3]]]],[[40,40],40],[[40,40],1],[[40,40],40],[[40,40],1],[40,11],[40,11],[[40,40],40],[[40,40],1],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[40,40],[[40,40],19],[[40,40],40],[[],40],[[41,41],19],[[40,40],19],[[42,42],19],[[40,-1],1,29],[[38,30],31],[[41,30],31],[[41,30],[[14,[1,43]]]],[[40,30],31],[[40,30],31],[[40,30],31],[[40,30],31],[[40,30],31],[[42,30],[[14,[1,43]]]],[[42,30],31],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[11,[[13,[40]]]],[11,40],[11,40],[11,40],[-1,40,29],[33,[[13,[40]]]],[25,[[13,[41]]]],[25,[[13,[42]]]],[38,11],[38,44],[38,11],[38,40],[38,11],[38,11],[38,[[2,[41]]]],[38,[[4,[3]]]],[38,16],[38,44],[38,11],[38,[[2,[42]]]],[[40,40],1],[[40,40],40],[[40,40],19],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[40],[40,19],[40,19],[40,[[34,[40]]]],[40,[[35,[40]]]],[[[22,[3]]],[[2,[38]]]],[[11,11,41],[[2,[38]]]],[[[4,[3]],11,11],[[2,[38]]]],[40,40],[[40,40],1],[[40,40,19],1],[[38,11],1],[[38,44],1],[[38,11],1],[[38,40],1],[[38,11],1],[[38,41],[[2,[1]]]],[[38,44],1],[[38,11],1],[[40,40],40],[[40,40],1],[[40,40],40],[-1,45,[]],[-1,45,[]],[[40,40],1],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,15,[]],[-1,15,[]],[-1,15,[]],[-1,15,[]],[[40,40],40],0,0,0,[[[46,[-1,-2]]],[[2,[[47,[-1,-2]]]]],10,9],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[48,[-1,-2]]],[[2,[[47,[-1,-2]]]]],10,9],[[[47,[-1,-2]]],[[2,[1]]],10,9],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[37,[-1,-2]],11,11],[[48,[-1,-2]]],10,9],[[[37,[-1,-2]],11],[[46,[-1,-2]]],10,9],[[[47,[-1,-2]],[4,[3]]],[[2,[1]]],10,9],[[[47,[-1,-2]]],1,10,9],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,15,[]],[-1,15,[]],[-1,15,[]],[[[47,[-1,-2]],[4,[3]]],[[2,[1]]],10,9]],"c":[],"p":[[15,"tuple"],[6,"Result",399],[15,"u8"],[15,"slice"],[3,"VirtioPciTransport",400],[3,"Console",10],[8,"Translator",0],[8,"InverseTranslator",0],[8,"Allocator",401],[8,"VirtioTransport",402],[15,"u32"],[3,"VecDeque",403],[4,"Option",404],[4,"Result",405],[3,"TypeId",406],[15,"usize"],[3,"Queue",25],[3,"VirtAddr",407],[15,"bool"],[3,"DriverWriteOnlyQueue",25],[3,"DeviceWriteOnlyQueue",25],[3,"Vec",408],[3,"DescFlags",60],[3,"RingFlags",60],[15,"u16"],[3,"UsedElem",60],[3,"AvailRing",60],[3,"UsedRing",60],[8,"IntoIterator",409],[3,"Formatter",410],[6,"Result",410],[3,"Desc",60],[15,"str"],[3,"Iter",411],[3,"IterNames",411],[3,"PhysAddr",407],[3,"VSock",232],[3,"Packet",247],[8,"Fn",412],[3,"VSockFlags",247],[4,"VSockOp",247],[4,"VSockType",247],[3,"Error",410],[15,"u64"],[3,"String",413],[3,"SocketListener",367],[3,"Socket",367],[3,"SocketConnector",367],[8,"Write",0],[8,"Read",0],[3,"VirtQueue",60]],"b":[[84,"impl-Flags-for-DescFlags"],[85,"impl-DescFlags"],[86,"impl-RingFlags"],[87,"impl-Flags-for-RingFlags"],[127,"impl-LowerHex-for-DescFlags"],[128,"impl-UpperHex-for-DescFlags"],[129,"impl-Binary-for-DescFlags"],[130,"impl-Debug-for-DescFlags"],[131,"impl-Octal-for-DescFlags"],[133,"impl-Debug-for-RingFlags"],[134,"impl-Octal-for-RingFlags"],[135,"impl-Binary-for-RingFlags"],[136,"impl-UpperHex-for-RingFlags"],[137,"impl-LowerHex-for-RingFlags"],[149,"impl-DescFlags"],[150,"impl-Flags-for-DescFlags"],[151,"impl-RingFlags"],[152,"impl-Flags-for-RingFlags"],[268,"impl-Flags-for-VSockFlags"],[269,"impl-VSockFlags"],[289,"impl-Debug-for-VSockOp"],[290,"impl-Display-for-VSockOp"],[291,"impl-Debug-for-VSockFlags"],[292,"impl-LowerHex-for-VSockFlags"],[293,"impl-Binary-for-VSockFlags"],[294,"impl-UpperHex-for-VSockFlags"],[295,"impl-Octal-for-VSockFlags"],[296,"impl-Display-for-VSockType"],[297,"impl-Debug-for-VSockType"],[303,"impl-Flags-for-VSockFlags"],[304,"impl-VSockFlags"]]},\
"sev_serial":{"doc":"","t":"DLLLLLLLLLLLL","n":["SerialPort","borrow","borrow_mut","from","init","into","new","send","try_from","try_into","type_id","wait_for_empty_output","write_str"],"q":[[0,"sev_serial"],[13,"core::result"],[14,"oak_sev_guest::io"],[15,"core::any"],[16,"core::fmt"]],"d":["Basic implementation that allows for writing to a serial …","","","Returns the argument unchanged.","Initializes the serial port for writing.","Calls <code>U::from(self)</code>.","Creates a new instance of a serial port with the given …","Sends a byte of data via the serial port.","","","","Wait until the output buffer is empty.",""],"i":[0,1,1,1,1,1,1,1,1,1,1,1,1],"f":[0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-1,[]],[1,[[4,[2,3]]]],[-1,-2,[],[]],[[5,6],1],[[1,7],[[4,[2,3]]]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,8,[]],[1,[[4,[2,3]]]],[[1,3],9]],"c":[],"p":[[3,"SerialPort",0],[15,"tuple"],[15,"str"],[4,"Result",13],[15,"u16"],[4,"PortFactoryWrapper",14],[15,"u8"],[3,"TypeId",15],[6,"Result",16]],"b":[]},\
"snp_measurement":{"doc":"","t":"DRRLLLLLLLLAMLLLLLLMFAALMLLLLLLADLLMLLFFMLLLNENNNRDENNNNMMMMMMLLLLLLMLMLLLLLLLLLMLLLLMLLLLLLLLLLLLLLNRRRRDNRRRRRRRNDDEDNLLLLLLLLLLMMLLLLLLLLLMLLLLLMLMMFLMMLLLLLMMMLLLLLLLLLLLLLLLRRRRF","n":["Cli","DEFAULT_ENCLAVE_BINARY","DEFAULT_STAGE0_ROM","augment_args","augment_args_for_update","borrow","borrow_mut","clone","clone_into","command","command_for_update","elf","enclave_binary","enclave_binary_path","from","from_arg_matches","from_arg_matches_mut","group_id","into","legacy_boot","main","page","stage0","stage0_path","stage0_rom","to_owned","try_from","try_into","type_id","update_from_arg_matches","update_from_arg_matches_mut","vmsa","MemorySegment","borrow","borrow_mut","data","from","into","load_elf_file","load_elf_segments","start_address","try_from","try_into","type_id","Cpuid","ImiPage","Invalid","No","Normal","PAGE_INFO_SIZE","PageInfo","PageType","Secrets","Unmeasured","Vmsa","Zero","_imi_page","_length","_reserved","_vmpl1_perms","_vmpl2_perms","_vmpl3_perms","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","contents","default","digest_cur","fmt","fmt","fmt","from","from","from","from","from_repr","from_repr","gpa","into","into","into","new","page_type","set_contents_from_page_bytes","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","update_current_digest","update_from_data","update_from_snp_page","update_from_vmsa","Cpuid","FIRMWARE_TOP","GUID_TABLE_END_OFFSET","GUID_TABLE_ENTRY_HEADER_SIZE","GUID_TABLE_FOOTER_GUID","GuidTableEntryHeader","Invalid","LEGACY_MAX_SIZE","LEGACY_TOP","SEV_MEATADATA_GUID","SEV_METADATA_ENTRY_SIZE","SEV_METADATA_HEADER_SIZE","SEV_METADATA_VERSION","SEV_SECTION_SIGNATURE","Secrets","SevMetadataHeader","SevMetadataPageInfo","SevMetadataPageType","Stage0Info","Unmeasured","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bytes","count","fmt","from","from","from","from","from","from_repr","get_guid_table_content","get_snp_pages","guid","into","into","into","into","into","legacy_offset","legacy_shadow_bytes","legacy_start_address","length","load_stage0","new","page_count","page_type","parse","parse","parse","parse_firmware_guid_table","rom_bytes","size","start_address","start_address","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","CPU_FAMILY","CPU_MODEL","CPU_STEPPING","VMSA_ADDRESS","get_boot_vmsa"],"q":[[0,"snp_measurement"],[32,"snp_measurement::elf"],[44,"snp_measurement::page"],[100,"snp_measurement::stage0"],[178,"snp_measurement::vmsa"],[183,"clap_builder::builder::command"],[184,"std::path"],[185,"clap_builder::parser::matches::arg_matches"],[186,"clap_builder"],[187,"core::result"],[188,"clap_builder::util::id"],[189,"core::option"],[190,"anyhow"],[191,"core::any"],[192,"alloc::vec"],[193,"core::fmt"],[194,"core::fmt"],[195,"oak_sev_guest::vmsa"],[196,"std::collections::hash::map"]],"d":["","The default workspace-relative path to the Oak Restricted …","The default workspace-relative path to the Stage 0 …","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","A memory segment extracted from an ELF file.","","","The data specified for the segment in the ELF file.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","Loads an ELF file and extracts the non-zero loadable …","The guest-physical start address of the segment.","","","","The SEV-SNP CPUID page.","Whether the page is part of an initial migration image …","Reserved value.","The page is not an IMI page.","The page is a normal page.","The size of the PageInfo struct.","Implementation of the Page Info structure used for …","The type of page being measured.","The SEV-SNP secrets page.","A page that is encrypted but not measured.","The page contains a VM state save area (VMSA) for a vCPU.","A page filled with zeros.","Whether the page is part of an initial migration image. …","The length of this struct in bytes.","Reserved. Must be 0.","The permissions for VMPL1. For now we treat this as …","The permissions for VMPL2. For now we treat this as …","The permissions for VMPL3. For now we treat this as …","","","","","","","The SHA-384 digest of the contents to be measured for …","","The current measurement up to this point.","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Try to create Self from the raw representation","Try to create Self from the raw representation","The guest-physical address of the page being measured.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","The type of page being measured.","Sets the <code>contents</code> field based to the SHA-384 digest of the …","","","","","","","","","","Calculates the SHA-384 digest of the struct’s memory and …","Updates the current measurement digest from a byte slice …","Updates the current measurement digest for a …","Updates the current measurement digest from a VMSA page.","","The address of the first byte after the end of the …","The reverse offset from the end of the firmware blob to …","The size of the header of an entry in the GUID table.","The footer GUID identifying the end of the GUID table.","The header of a guid table entry.","","The maximum size of the shadow firmware for legacy boot.","The address of the first byte after the end of the legacy …","The GUID identifying the SEV metadata GUID table entry.","The size of the SEV metadata section entry.","The size of the SEV metadata section header.","The version of SEV metadata sections we expect to …","The expected first 4 bytes of the SEV metadata section …","","The header of the SEV metadata section.","Information about the pages specified in the firmware SEV …","The page types used in the firmware SEV metadata section …","The contents of the Stage 0 firmware ROM image and its …","","","","","","","","","","","","The bytes of the State 0 firmware ROM image.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Try to create Self from the raw representation","Gets the main contents of the GUID table, excluding the …","Gets the SEV-SNP specific pages defined in the firmware …","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","The offset into the firmware ROM image from where the …","Gets the bytes of the legacy boot shadow of the ROM image.","The start address of the legacy boot shadow of the …","","Loads the Stage 0 firmware ROM image from the supplied …","","","","","","","Parses the GUID table from the firmware image as a map.","Gets the bytes of the entire ROM image.","","The start address of the firmware ROM in guest memory.","","","","","","","","","","","","","","","","","The CPU family of the vCPU we expect to be running on.","The CPU model of the vCPU we expect to be running on.","The stepping of the vCPU we expect to be running on.","The guest-physical address of the VMSA page.","Gets the initial VMSA for the vCPU that is used to boot …"],"i":[0,0,0,2,2,2,2,2,2,2,2,0,2,2,2,2,2,2,2,2,0,0,0,2,2,2,2,2,2,2,2,0,0,14,14,14,14,14,0,0,14,14,14,14,19,0,19,18,19,0,0,0,19,19,19,19,15,15,15,15,15,15,15,18,19,15,18,19,15,15,15,15,18,19,15,18,19,19,18,19,15,15,18,19,15,15,15,15,18,19,15,18,19,15,18,19,15,15,15,15,20,0,0,0,0,0,20,0,0,0,0,0,0,0,20,0,0,0,0,20,25,26,27,28,20,25,26,27,28,20,25,28,20,25,26,27,28,20,20,25,25,27,25,26,27,28,20,25,25,25,28,0,25,26,26,26,27,28,25,25,27,25,26,25,26,27,28,20,25,26,27,28,20,25,26,27,28,20,0,0,0,0,0],"f":[0,0,0,[1,1],[1,1],[-1,-2,[],[]],[-1,-2,[],[]],[2,2],[[-1,-2],3,[],[]],[[],1],[[],1],0,0,[2,4],[-1,-1,[]],[5,[[7,[2,6]]]],[5,[[7,[2,6]]]],[[],[[9,[8]]]],[-1,-2,[],[]],0,[[],[[10,[3]]]],0,0,[2,4],0,[-1,-2,[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,11,[]],[[2,5],[[7,[3,6]]]],[[2,5],[[7,[3,6]]]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],0,[-1,-1,[]],[-1,-2,[],[]],[4,[[10,[[13,[12]]]]]],[4,[[10,[[13,[14]]]]]],0,[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,11,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[],15],0,[[15,16],17],[[18,16],17],[[19,16],17],[-1,-1,[]],[-1,-1,[]],[20,19],[-1,-1,[]],[12,[[9,[18]]]],[12,[[9,[19]]]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],15],0,[[15,[21,[12]]],3],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[15,3],[[15,[21,[12]],22],3],[[15,19,22],3],[[15,23,22],3],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[[20,16],17],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[24,[[9,[20]]]],[25,[[21,[12]]]],[25,[[13,[26]]]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[25,[[21,[12]]]],0,0,[4,[[10,[25]]]],[[[13,[12]]],25],0,0,[[[21,[12]]],26],[[[21,[12]]],27],[[[21,[12]]],28],[25,[[30,[29,[21,[12]]]]]],[25,[[21,[12]]]],0,0,0,[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],0,0,0,0,[[],23]],"c":[],"p":[[3,"Command",183],[3,"Cli",0],[15,"tuple"],[3,"PathBuf",184],[3,"ArgMatches",185],[6,"Error",186],[4,"Result",187],[3,"Id",188],[4,"Option",189],[6,"Result",190],[3,"TypeId",191],[15,"u8"],[3,"Vec",192],[3,"MemorySegment",32],[3,"PageInfo",44],[3,"Formatter",193],[6,"Result",193],[4,"ImiPage",44],[4,"PageType",44],[4,"SevMetadataPageType",100],[15,"slice"],[3,"PhysAddr",194],[3,"VmsaPage",195],[15,"u32"],[3,"Stage0Info",100],[3,"SevMetadataPageInfo",100],[3,"GuidTableEntryHeader",100],[3,"SevMetadataHeader",100],[15,"u128"],[3,"HashMap",196]],"b":[]},\
"weather_lookup":{"doc":"Oak Functions weather lookup example.","t":"FF","n":["init","main"],"q":[[0,"weather_lookup"]],"d":["",""],"i":[0,0],"f":[[[],1],[[],1]],"c":[],"p":[[15,"tuple"]],"b":[]},\
"xtask":{"doc":"","t":"HAAAAAAAAOAFDLLLLLLLLLLLLDLLLLLLLLLLLLDLLLLLLLLLLLLFFFFFFFFFFFFFFFFFFFFFFFNDNDDNDEDNDEDNNDDNNNDNNNNDNNNNDNNDIIEDNDNDEEDNLMLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLMKLLLLLLLLMMLLLLLLLLMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLFLLMMMMMMLLLLLLMLLMLLFFKLLKLFLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLMMMMDHHLLFFFLLLLLLLLLLLLFFFFLLLLLLDLLLLMLLFFFLLLL","n":["PROCESSES","check_build_licenses","check_license","check_todo","containers","examples","files","internal","launcher","spread","testing","workspace_path","CheckBuildLicenses","borrow","borrow_mut","description","from","into","into_request","new","run","try_from","try_into","type_id","vzip","CheckLicense","borrow","borrow_mut","description","from","into","into_request","new","run","try_from","try_into","type_id","vzip","CheckTodo","borrow","borrow_mut","description","from","into","into_request","new","run","try_from","try_into","type_id","vzip","run_oak_functions_example_in_background","run_oak_functions_launcher_example_with_lookup_data","build_rust_crate_wasm","run_oak_functions_example","crate_manifest_files","file_contains","is_bazel_file","is_build_file","is_clang_format_file","is_dockerfile","is_fuzzing_toml_file","is_html_file","is_javascript_file","is_markdown_file","is_shell_script","is_source_code_file","is_toml_file","is_typescript_file","is_yaml_file","read_file","source_files","to_string","workspace_manifest_files","Base","BuildClient","BuildEnclaveBinary","CargoBinary","CargoManifest","CheckFormat","Cmd","Command","Completion","Completion","Context","Dependency","DependencySpec","Error","Format","FuzzConfig","FuzzableExample","Json","Multiple","Ok","Opt","RunBazelTests","RunCargoClean","RunCargoClippy","RunCargoDeny","RunCargoFuzz","RunCargoFuzz","RunCargoTests","RunCargoUdeps","RunCi","RunOakExampleOpt","RunOakFunctionsExample","RunTests","RunTestsOpt","Runnable","Running","ServerVariant","ServerVariantIter","Single","SingleStatusResult","Skipped","Status","StatusResultValue","Step","StepResult","Text","all_dependencies_with_toml_path","args","augment_args","augment_args","augment_args","augment_args","augment_args","augment_args","augment_args_for_update","augment_args_for_update","augment_args_for_update","augment_args_for_update","augment_args_for_update","augment_args_for_update","augment_subcommands","augment_subcommands_for_update","bin","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build_dependencies","cleanup","client_rust_target","client_rust_toolchain","client_variant","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmd","command","command","command","command","command","command","command_for_update","command_for_update","command_for_update","command_for_update","command_for_update","command_for_update","default","default","dependencies","description","description","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","dev_dependencies","dry_run","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","example_name","examples","failed_steps_prefixes","file_name","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_arg_matches","from_arg_matches","from_arg_matches","from_arg_matches","from_arg_matches","from_arg_matches","from_arg_matches","from_arg_matches_mut","from_arg_matches_mut","from_arg_matches_mut","from_arg_matches_mut","from_arg_matches_mut","from_arg_matches_mut","from_arg_matches_mut","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_str","group_id","group_id","group_id","group_id","group_id","group_id","has_subcommand","hash","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","is_empty","iter","keep_going","kill","kill_process","len","len","logs","logs","lookup_data_path","manifest_path","name","name","new","new","new_in_dir","next","next_back","nth","out_dir","partial_cmp","partial_cmp","path","path_to_executable","path_to_manifest","process_gone","read_to_end","result","result","root","run","run","run_step","size_hint","stderr","stdout","success","target_name","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","update_from_arg_matches","update_from_arg_matches","update_from_arg_matches","update_from_arg_matches","update_from_arg_matches","update_from_arg_matches","update_from_arg_matches","update_from_arg_matches_mut","update_from_arg_matches_mut","update_from_arg_matches_mut","update_from_arg_matches_mut","update_from_arg_matches_mut","update_from_arg_matches_mut","update_from_arg_matches_mut","value","values","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","command","name","name","steps","App","MOCK_LOOKUP_DATA_PATH","OAK_RESTRICTED_KERNEL_BIN_DIR","borrow","borrow_mut","build_binary","build_enclave_binary","build_stage0","clone","clone_into","enclave_binary_path","enclave_crate_name","enclave_crate_path","eq","fmt","from","from_crate_name","from_ref","into","into_request","run_launcher","run_oak_functions_example_in_background","run_oak_functions_launcher_example","run_oak_functions_launcher_example_with_lookup_data","subcommand","to_owned","try_from","try_into","type_id","vzip","BackgroundStep","borrow","borrow_mut","drop","from","inner","into","into_request","run_background","run_step","skip_test","try_from","try_into","type_id","vzip"],"q":[[0,"xtask"],[12,"xtask::check_build_licenses"],[25,"xtask::check_license"],[38,"xtask::check_todo"],[51,"xtask::containers"],[53,"xtask::examples"],[55,"xtask::files"],[74,"xtask::internal"],[525,"xtask::internal::Step"],[529,"xtask::launcher"],[559,"xtask::testing"],[574,"std::path"],[575,"alloc::string"],[576,"tonic::request"],[577,"alloc::boxed"],[578,"core::result"],[579,"core::any"],[580,"core::iter::traits::iterator"],[581,"std::path"],[582,"clap_builder::builder::command"],[583,"serde::de"],[584,"core::fmt"],[585,"core::fmt"],[586,"clap_builder"],[587,"clap_builder::util::id"],[588,"core::option"],[589,"core::hash"],[590,"core::iter::traits::collect"],[591,"core::cmp"],[592,"tokio::io::async_read"],[593,"core::marker"],[594,"core::future::future"],[595,"core::pin"]],"d":["","","","","","","","","Functionality for testing variants of the enclave binary …","Similar to the <code>vec!</code> macro, but also allows a “spread” …","","","A <code>Runnable</code> command that checks for the existence of BUILD …","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","A <code>Runnable</code> command that checks for the existence of source …","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","A <code>Runnable</code> command that checks for the existence of todos …","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","Runs the specified example as a background task. Returns a …","","Build the Rust crate that will be used as the Wasm module …","","Return an iterator of all known Cargo Manifest files that …","","Return whether the provided path refers to a Bazel file (…","","Return whether the provided path refers to a source file …","","Return whether the provided path refers to a <code>fuzz</code> crate …","","","Return whether the provided path refers to a markdown file …","","Return whether the provided path refers to a source file …","","","","","Return an iterator of all the first-party and non-ignored …","","Return an iterator of all known Cargo Manifest files that …","Production-like server variant, without logging or any of …","","","Partial information about a Cargo binary, as included in a …","Partial representation of Cargo manifest files.","","A single command.","","","","Encapsulates all the local state relative to a step, and …","Partial representation of a dependency in a <code>Cargo.toml</code> …","Partial representation of a Json specification of a …","","","Struct representing config files for fuzzing.","Config for building an example for fuzzing.","Json specification of a dependency.","","","","","","","","","","","","","Holds the options for running the example.","","","","A task that can be run asynchronously.","A task that is currently running asynchronously.","","An iterator over the variants of ServerVariant","","","","A construct to keep track of the status of the execution. …","The outcome of an individual step of execution.","An execution step, which may be a single <code>Runnable</code>, or a …","","Plaintext specification of a dependency with only the …","","Additional <code>libFuzzer</code> arguments passed through to the binary","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns a description of the task, e.g. the command line …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","Attempts to kill the running task.","","Returns the number of top-level steps or commands. The …","","","","","Path to the Cargo.toml file for the example.","","Name of the example","","","","","","","Path to desired location of the .wasm file.","","","","Get path to the executable server binary for the server …","","","Reads the entire content of the provided future into a …","Returns the final result of the task, upon spontaneous …","","","Starts the task and returns a <code>Running</code> implementation.","Run the provided command, printing a status message with …","Run the provided step, printing out information about the …","","Returns an <code>AsyncRead</code> object to stream stderr logs from the …","Returns an <code>AsyncRead</code> object to stream stdout logs from the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Get the path to the respective enclave binary variant that …","Get the crate name of respective enclave binary variant","Get the path to the respective enclave binary variant that …","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","Runs the specified example as a background task. Returns a …","Runs the Oak Functions launcher configured with a default …","","Get the subcommand for launching in this mode","","","","","","Thin wrapper around an inner <code>Running</code> that kills the inner …","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","Runs a step in the background, and returns a reference to …","Runs a step, and asserts that it succeeds.","Whether to skip the test. For instance, GitHub Actions …","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,4,4,4,4,4,4,4,4,4,4,0,12,12,12,12,12,12,12,12,12,12,12,12,0,13,13,13,13,13,13,13,13,13,13,13,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,29,0,26,0,0,26,0,0,0,26,0,0,0,34,26,0,0,40,18,34,0,26,26,26,26,0,26,26,26,26,0,26,26,0,0,0,0,0,18,0,34,0,0,0,0,40,23,32,8,27,19,28,31,32,8,27,19,28,31,32,26,26,23,44,18,37,8,26,27,19,28,29,30,31,32,23,39,40,41,42,43,33,34,35,36,44,18,37,8,26,27,19,28,29,30,31,32,23,39,40,41,42,43,33,34,35,36,23,31,28,28,28,8,26,27,19,28,29,30,31,32,33,34,35,8,26,27,19,28,29,30,31,32,33,34,35,8,8,27,19,28,31,32,8,27,19,28,31,32,29,36,23,17,37,29,23,39,40,41,42,43,23,8,29,40,41,34,34,34,34,34,19,42,36,27,44,26,27,19,28,29,30,31,32,23,39,40,41,42,43,33,34,44,18,37,8,26,27,19,28,29,30,31,32,23,39,40,41,42,43,33,34,35,36,8,26,27,19,28,31,32,8,26,27,19,28,31,32,8,26,27,19,28,29,30,31,32,33,34,35,29,8,27,19,28,31,32,26,34,44,18,37,8,26,27,19,28,29,30,31,32,23,39,40,41,42,43,33,34,35,36,30,44,18,37,8,26,27,19,28,29,30,31,32,23,39,40,41,42,43,33,34,35,36,18,29,8,9,0,18,30,8,35,19,43,39,43,37,33,37,30,30,30,43,40,41,41,29,29,0,0,9,35,44,17,37,0,30,9,9,36,32,8,26,27,19,28,29,30,31,32,33,34,35,44,33,34,44,18,37,8,26,27,19,28,29,30,31,32,23,39,40,41,42,43,33,34,35,36,44,18,37,8,26,27,19,28,29,30,31,32,23,39,40,41,42,43,33,34,35,36,44,18,37,8,26,27,19,28,29,30,31,32,23,39,40,41,42,43,33,34,35,36,8,26,27,19,28,31,32,8,26,27,19,28,31,32,35,36,44,18,37,8,26,27,19,28,29,30,31,32,23,39,40,41,42,43,33,34,35,36,62,62,63,63,0,0,0,61,61,0,0,0,61,61,61,61,61,61,61,61,61,61,61,61,0,0,0,0,61,61,61,61,61,61,0,14,14,14,14,14,14,14,0,0,0,14,14,14,14],"f":[0,0,0,0,0,0,0,0,0,0,0,[[[2,[1]]],3],0,[-1,-2,[],[]],[-1,-2,[],[]],[4,5],[-1,-1,[]],[-1,-2,[],[]],[-1,[[6,[-2]]],[],[]],[5,[[7,[4]]]],[[[7,[4]],8],[[7,[9]]]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,11,[]],[-1,-2,[],[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[12,5],[-1,-1,[]],[-1,-2,[],[]],[-1,[[6,[-2]]],[],[]],[5,[[7,[12]]]],[[[7,[12]],8],[[7,[9]]]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,11,[]],[-1,-2,[],[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[13,5],[-1,-1,[]],[-1,-2,[],[]],[-1,[[6,[-2]]],[],[]],[5,[[7,[13]]]],[[[7,[13]],8],[[7,[9]]]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,11,[]],[-1,-2,[],[]],[[1,1],[[16,[14,15]]]],[[1,15,1],[[7,[17]]]],[1,18],[19,18],[[],[[0,[20]]]],[[21,1],22],[21,22],[21,22],[21,22],[21,22],[21,22],[21,22],[21,22],[21,22],[21,22],[21,22],[21,22],[21,22],[21,22],[21,5],[[],[[0,[20]]]],[3,5],[[],[[0,[20]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[23,[[24,[5]]]],0,[25,25],[25,25],[25,25],[25,25],[25,25],[25,25],[25,25],[25,25],[25,25],[25,25],[25,25],[25,25],[25,25],[25,25],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,[8,8],[26,26],[27,27],[19,19],[28,28],[29,29],[30,30],[31,31],[32,32],[33,33],[34,34],[35,35],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],0,[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],29],[[],36],0,[-1,5,[]],[37,5],[-1,[[10,[29]]],38],[-1,[[10,[23]]],38],[-1,[[10,[39]]],38],[-1,[[10,[40]]],38],[-1,[[10,[41]]],38],[-1,[[10,[42]]],38],[-1,[[10,[43]]],38],0,0,[[29,29],22],[[40,40],22],[[41,41],22],[[34,34],22],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],0,0,0,0,[[44,45],46],[[26,45],46],[[27,45],46],[[19,45],46],[[28,45],46],[[29,45],46],[[30,45],46],[[31,45],46],[[32,45],46],[[23,45],46],[[39,45],46],[[40,45],46],[[41,45],46],[[42,45],46],[[43,45],46],[[33,45],46],[[34,45],46],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[47,[[10,[8,48]]]],[47,[[10,[26,48]]]],[47,[[10,[27,48]]]],[47,[[10,[19,48]]]],[47,[[10,[28,48]]]],[47,[[10,[31,48]]]],[47,[[10,[32,48]]]],[47,[[10,[8,48]]]],[47,[[10,[26,48]]]],[47,[[10,[27,48]]]],[47,[[10,[19,48]]]],[47,[[10,[28,48]]]],[47,[[10,[31,48]]]],[47,[[10,[32,48]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[1,[[10,[29]]]],[[],[[50,[49]]]],[[],[[50,[49]]]],[[],[[50,[49]]]],[[],[[50,[49]]]],[[],[[50,[49]]]],[[],[[50,[49]]]],[1,22],[[34,-1],16,51],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[18,22],[[],30],0,[-1,16,[]],[52,16],[18,53],[30,53],0,0,0,0,0,0,[[1,-1],[[7,[37]]],54],[53,33],[[1,-1,21],[[7,[37]]],54],[30,50],[30,50],[[30,53],50],0,[[40,40],[[50,[55]]]],[[41,41],[[50,[55]]]],0,[29,1],[29,1],[52,22],[-1,[[24,[56]]],[57,58]],[[[7,[-1]]],[[60,[[7,[59]]]]],[]],[[[7,[35]]],[[60,[[7,[59]]]]]],[8,44],[[[7,[-1]],8],[[7,[9]]],[]],[[[7,[37]],8],[[7,[9]]]],[[44,18,33],[[60,[[7,[59]]]]]],[30,[[16,[53,[50,[53]]]]]],[-1,[[7,[57]]],[]],[-1,[[7,[57]]],[]],[36,22],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,5,[]],[-1,5,[]],[-1,5,[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[[8,47],[[10,[16,48]]]],[[26,47],[[10,[16,48]]]],[[27,47],[[10,[16,48]]]],[[19,47],[[10,[16,48]]]],[[28,47],[[10,[16,48]]]],[[31,47],[[10,[16,48]]]],[[32,47],[[10,[16,48]]]],[[8,47],[[10,[16,48]]]],[[26,47],[[10,[16,48]]]],[[27,47],[[10,[16,48]]]],[[19,47],[[10,[16,48]]]],[[28,47],[[10,[16,48]]]],[[31,47],[[10,[16,48]]]],[[32,47],[[10,[16,48]]]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[[1,1],18],[[],18],[[],18],[61,61],[[-1,-2],16,[],[]],[61,5],[61,5],[61,5],[[61,61],22],[[61,45],46],[-1,-1,[]],[1,61],[-1,-1,[]],[-1,-2,[],[]],[-1,[[6,[-2]]],[],[]],[[1,61],[[7,[17]]]],[[1,1],[[16,[14,15]]]],[[61,1,15],[[7,[17]]]],[[61,1,15,1],[[7,[17]]]],[61,[[24,[5]]]],[-1,-2,[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,11,[]],[-1,-2,[],[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[14,16],[-1,-1,[]],0,[-1,-2,[],[]],[-1,[[6,[-2]]],[],[]],[[[7,[17]]],14],[18,16],[[],22],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,11,[]],[-1,-2,[],[]]],"c":[],"p":[[15,"str"],[15,"slice"],[3,"PathBuf",574],[3,"CheckBuildLicenses",12],[3,"String",575],[3,"Request",576],[3,"Box",577],[3,"Opt",74],[8,"Running",74],[4,"Result",578],[3,"TypeId",579],[3,"CheckLicense",25],[3,"CheckTodo",38],[3,"BackgroundStep",559],[15,"u16"],[15,"tuple"],[8,"Runnable",74],[4,"Step",74],[3,"RunOakExampleOpt",74],[8,"Iterator",580],[3,"Path",574],[15,"bool"],[3,"CargoManifest",74],[3,"Vec",581],[3,"Command",582],[4,"Command",74],[3,"Completion",74],[3,"BuildClient",74],[4,"ServerVariant",74],[3,"ServerVariantIter",74],[3,"RunTestsOpt",74],[3,"RunCargoFuzz",74],[3,"Status",74],[4,"StatusResultValue",74],[3,"SingleStatusResult",74],[3,"StepResult",74],[3,"Cmd",74],[8,"Deserializer",583],[3,"CargoBinary",74],[4,"Dependency",74],[3,"DependencySpec",74],[3,"FuzzConfig",74],[3,"FuzzableExample",74],[3,"Context",74],[3,"Formatter",584],[6,"Result",584],[3,"ArgMatches",585],[6,"Error",586],[3,"Id",587],[4,"Option",588],[8,"Hasher",589],[15,"i32"],[15,"usize"],[8,"IntoIterator",590],[4,"Ordering",591],[15,"u8"],[8,"AsyncRead",592],[8,"Unpin",593],[8,"Future",594],[3,"Pin",595],[3,"App",529],[13,"Single",525],[13,"Multiple",525]],"b":[]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
